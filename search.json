[{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"introduction-and-context","dir":"Articles","previous_headings":"","what":"Introduction and context","title":"Review differential expression analysis (DEA) and volcano plots","text":"Differential expression analysis (DEA) fundamental technique bioinformatics, particularly field transcriptomics. review cover key concepts, statistical methods, visualisation techniques used differential expression analysis, focus RNA sequencing (RNA-seq) data.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"volcano-plots-with-dmplot","dir":"Articles","previous_headings":"","what":"Volcano plots with dmplot","title":"Review differential expression analysis (DEA) and volcano plots","text":"Simply put volcano plot scatter plot combines statistical significance (y-axis) magnitude change (x-axis) feature (gene, transcript, etc.) two conditions. plot named characteristic shape, significant features forming peaks resemble volcano. typically used differential expression analysis bioinformatics applications well. dmplot makes creating volcano plot easy Volcano R6 class. can 3 simple steps:  Continue reading review differential expression analysis volcano plots.","code":"box::use(dt = data.table) box::use(dmplot[ Volcano ])  # 1. load data data(diff_expr_res, package = \"dmplot\")  head(diff_expr_res) #>       feature     log2FC  p_value      fdr #>        <char>      <num>    <num>    <num> #> 1: nCvahjxZZe -4.4653827 1.84e-12 2.95e-08 #> 2: xokTmQulss -4.1254298 2.77e-10 2.23e-06 #> 3: EsqEEnrrMA -0.7639582 6.92e-10 3.70e-06 #> 4: MesqnUNFSM -1.3692713 1.79e-09 7.20e-06 #> 5: vHRmtdhRnW -0.6481394 3.48e-09 1.12e-05 #> 6: HHvlskYCEL -3.1067641 9.15e-09 2.45e-05  # 2. create the Volcano object volc <- Volcano$new(data = diff_expr_res)  # 3. create the plot volcano_plot <- volc$plot_volcano()  print(volcano_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"overview-of-differential-expression-analysis","dir":"Articles","previous_headings":"","what":"Overview of Differential Expression Analysis","title":"Review differential expression analysis (DEA) and volcano plots","text":"Differential expression analysis aims identify genes transcripts show significant differences expression levels two biological conditions. technique crucial understanding: Gene regulation mechanisms Cellular responses stimuli treatments Differences cell types disease states order execute DEA must: Design experimenta Collect process RNA-seq data Perform statistical analysis","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"rna-seq-data","dir":"Articles","previous_headings":"Overview of Differential Expression Analysis","what":"RNA-seq Data","title":"Review differential expression analysis (DEA) and volcano plots","text":"statistical analysis, raw RNA-seq data undergoes several processing steps: Quality control Read alignment pseudoalignment Quantification gene/transcript expression output typically count matrix, rows represent genes/transcripts columns represent samples.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"normalisation","dir":"Articles","previous_headings":"Overview of Differential Expression Analysis > Statistics","what":"Normalisation","title":"Review differential expression analysis (DEA) and volcano plots","text":"Raw count data needs normalised account differences sequencing depth technical biases. Common methods include: TPM (Transcripts Per Million) - differential expression analysis1 RPKM/FPKM (Reads/Fragments Per Kilobase Million) - longer recommended2 DESeq2’s median ratios method - “gene count comparisons samples DE analysis; within sample comparisons”3 EdgeR’s TMM (Trimmed Mean M-values) method","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"modelling-gene-expression","dir":"Articles","previous_headings":"Overview of Differential Expression Analysis > Statistics","what":"Modelling Gene Expression","title":"Review differential expression analysis (DEA) and volcano plots","text":"Gene expression often modelled using negative binomial distribution: \\[ Y_{ij} \\sim NB(\\mu_{ij}, \\alpha_i) \\] : \\(Y_{ij}\\) count gene sample j \\(\\mu_{ij}\\) mean \\(\\alpha_i\\) dispersion parameter mean \\(\\mu_{ij}\\) related experimental conditions log-linear model: \\[ \\log(\\mu_{ij}) = x_j'\\beta_i \\] \\(x_j\\) vector covariates \\(\\beta_i\\) vector regression coefficients.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"hypothesis-testing---the-statistical-analysis","dir":"Articles","previous_headings":"Overview of Differential Expression Analysis > Statistics","what":"Hypothesis Testing - the Statistical Analysis","title":"Review differential expression analysis (DEA) and volcano plots","text":"gene, test null hypothesis difference expression conditions. typically involves: Estimating model parameters Calculating test statistic (e.g., Wald test, likelihood ratio test) Computing p-value Simply put means go every row matrix execute statistical test determine gene differentially expressed two conditions. end result table contains gene name, p-value, log fold change. look little like following:","code":"head(diff_expr_res[, -\"fdr\"]) #>       feature     log2FC  p_value #>        <char>      <num>    <num> #> 1: nCvahjxZZe -4.4653827 1.84e-12 #> 2: xokTmQulss -4.1254298 2.77e-10 #> 3: EsqEEnrrMA -0.7639582 6.92e-10 #> 4: MesqnUNFSM -1.3692713 1.79e-09 #> 5: vHRmtdhRnW -0.6481394 3.48e-09 #> 6: HHvlskYCEL -3.1067641 9.15e-09"},{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"false-discovery-rate-fdr","dir":"Articles","previous_headings":"Overview of Differential Expression Analysis > Statistics","what":"False Discovery Rate (FDR)","title":"Review differential expression analysis (DEA) and volcano plots","text":"FDR (false discovery rate) tool used eliminate bad results look good. used determining statistical significance potentially differentially expressed genes. done adjusting p-values FDR method. example volcano plot p-values sometimes used y-axis determining gene statistically significant . p-value cut-0.05 often used, meaning 95% time get results samples overlap distributions - sometimes get samples overlap. gene p-value less 0.05 yet false positive. FDR tool used Benjamini-Hochberg method. method stringent helps eliminate false positive discoveries. assessing p-values want look something called anti-conservative distribution p-values. P-values genes statistically significant spread evenly 0 1, experimental condition may skew expression levels tends large number p-values accumulating 0.05 (5%). Typically one look distributions eye determine anti-conservative distribution cut-. Benjamini-Hochberg formalised procedure formula; allows us adjust p-values eliminate false positives may otherwise reported significant. Thus adjusting p-values data new column data:","code":"head(diff_expr_res) #>       feature     log2FC  p_value      fdr #>        <char>      <num>    <num>    <num> #> 1: nCvahjxZZe -4.4653827 1.84e-12 2.95e-08 #> 2: xokTmQulss -4.1254298 2.77e-10 2.23e-06 #> 3: EsqEEnrrMA -0.7639582 6.92e-10 3.70e-06 #> 4: MesqnUNFSM -1.3692713 1.79e-09 7.20e-06 #> 5: vHRmtdhRnW -0.6481394 3.48e-09 1.12e-05 #> 6: HHvlskYCEL -3.1067641 9.15e-09 2.45e-05"},{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"log-fold-change","dir":"Articles","previous_headings":"Overview of Differential Expression Analysis","what":"Log Fold Change","title":"Review differential expression analysis (DEA) and volcano plots","text":"log2FC stands log fold change - mathematically represents: log2(fold change). fold change calculated change expression relative control. gene expressed 5X (5X FC) much test sample control FC 5, log2FC 2.32. Typically absolute change 1.5 log2FC relative control cut-used determine gene differentially expressed . log2FC 1.5 actually represent 2^{1.5} = 2.82 FC increase relative control. cut-1.5 commonly used kind analysis - can adjusted per results/research question. use log2FC vs FC? raw FC values calculated vary 0 positive infinity. centred around 1. Meaning FC 1 means gene test individual equal level expression control. Downward regulation expression negative direction relative control squeezed 0 1, positive/upregulation fold changes can vary 1 infinity. Using log2FC allows us recentre values around 0 express symmetrically positive negative FCs. log2 fold change gene two conditions calculated : \\[ \\log_2FC_i = \\log_2\\left(\\frac{\\text{Expression condition 2}_i}{\\text{Expression condition 1}_i}\\right) \\] Notice volcano plot x-axis centred around 0. log fold change symmetrical around 0. log fold change 0 means difference expression two conditions.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"visualisation-with-volcano-plots","dir":"Articles","previous_headings":"","what":"Visualisation with Volcano Plots","title":"Review differential expression analysis (DEA) and volcano plots","text":"Volcano plots popular way visualise results differential expression analysis. combine statistical significance magnitude change.","code":"box::use(dmplot[ theme_dereck_light ])  # since dmplot always returns a ggplot object we can make adjustments volcano_plot2 <- volcano_plot +     theme_dereck_light()  print(volcano_plot2)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"interpreting-the-volcano-plot","dir":"Articles","previous_headings":"Visualisation with Volcano Plots","what":"Interpreting the Volcano Plot","title":"Review differential expression analysis (DEA) and volcano plots","text":"resulting plot: X-axis: log2 fold change Y-axis: -log10(FDR) Red points: Significantly -regulated genes (FDR < 0.05 log2FC > 1) Blue points: Significantly -regulated genes (FDR < 0.05 log2FC < -1) Black points: Non-significant changes Labelled points: Top 15 significant genes plot allows quick identification genes large fold changes high statistical significance.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"biological-interpretation","dir":"Articles","previous_headings":"","what":"Biological Interpretation","title":"Review differential expression analysis (DEA) and volcano plots","text":"statistical analysis identifies differentially expressed genes, biological interpretation crucial. may involve: Gene Ontology (GO) enrichment analysis Pathway analysis Network analysis Integration omics data","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Review differential expression analysis (DEA) and volcano plots","text":"Differential expression analysis powerful tool bioinformatics, allowing researchers identify genes respond experimental conditions differ biological states. combining rigorous statistical methods intuitive visualisation techniques like volcano plots, provides valuable insights gene regulation cellular function. dmplot’s Volcano R6 class presented offers standardised quick way way create volcano plots, facilitating exploration presentation differential expression results. However, ’s important remember plots just one step broader process understanding biological systems transcriptomic data.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/bio_review-differential-expression-analysis-volcano-plots.html","id":"further-reading-and-related-analyses","dir":"Articles","previous_headings":"","what":"Further Reading and Related Analyses","title":"Review differential expression analysis (DEA) and volcano plots","text":"differential expression analysis provides valuable insights individual gene behaviour, researchers often seek understand broader patterns biological contexts. related analyses might find interesting: Gene Set Enrichment Analysis (GSEA): Identifies gene sets significantly enriched different conditions phenotypes. Weighted Gene Co-expression Network Analysis (WGCNA): Identifies modules highly correlated genes relates external sample traits. Time-course Expression Analysis: Examines gene expression changes time, useful developmental studies response treatments. Single-cell RNA-seq Analysis: Extends differential expression analysis single-cell level, revealing cell-type-specific responses heterogeneity within populations. Functional Annotation Clustering: Groups similar annotations together reduce redundancy highlight biological themes. advanced analyses can provide deeper biological insights complement results standard differential expression analysis. often require specialised tools careful interpretation can greatly enhance understanding complex biological systems.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/donate.html","id":"support-my-work","dir":"Articles","previous_headings":"","what":"Support my work","title":"Donate","text":"find package useful, please consider supporting work cryptocurrency donation.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/donate.html","id":"bitcoin","dir":"Articles","previous_headings":"Support my work","what":"Bitcoin","title":"Donate","text":"bc1qgs4f6hhnzj8m2j05axgsf53k67kugps92qzr2k Copy","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/donate.html","id":"monero","dir":"Articles","previous_headings":"Support my work","what":"Monero","title":"Donate","text":"41wSUfpnhVUW5GnTKCyBBwVuokhkjMeepAVkKT1qv3HDhcZhTSQx1UaTaibEukndQrCPLVMcRt1LVFpVSq3YrdRjENBtMkG Copy","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"C++ high-performance technical indicators","text":"dmplot package provides set high-performance technical indicators commonly used financial analysis. indicators implemented C++ achieve maximum computational efficiency, making suitable large-scale data analysis high-frequency trading applications. document, focus specifically discussing C++ Implementation algorithm. mathematics behind indicator, please refer documentation: dmplot documentation.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"licensing","dir":"Articles","previous_headings":"Introduction","what":"Licensing","title":"C++ high-performance technical indicators","text":"dmplot package released MIT license, allowing free use modification. Users must: Cite original author (see LICENSE details). Include license redistribution.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"c-implementation-and-performance","dir":"Articles","previous_headings":"","what":"C++ Implementation and Performance","title":"C++ high-performance technical indicators","text":"technical indicator functions dmplot implemented C++ using Rcpp framework. approach offers several advantages: Speed: C++ significantly faster pure R code, especially computationally intensive tasks. Memory efficiency: C++ allows efficient memory management, crucial dealing large datasets. Vectorisation: implementations take advantage C++’s ability efficiently process vectors data. function carefully optimised benchmarked ensure best possible performance. Users can expect implementations outperform equivalent R code setting. can beat performance C++ implementations, please open issue GitHub repository ’d love hear ! Now, let’s explore indicator, focusing mathematical foundation optimised C++ implementation.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"bollinger-bands-bb","dir":"Articles","previous_headings":"","what":"Bollinger Bands (BB)","title":"C++ high-performance technical indicators","text":"","code":"Rcpp::List bb(std::vector<double> price, int n, int sd = 2) {     // calculate the simple moving average     std::vector<double> mavg = sma(price, n);      // pre-allocate std::vector with 0 values for the standard deviation     std::vector<double> std_dev(price.size(), 0);      // calculate the standard deviation     for (int i = n - 1; i < price.size(); i++) {         // population standard deviation is used         // delta = sqrt(sum((x_i - mean) * (x_i - mean)) / n)         double sum = 0;         for (int j = i - n + 1; j <= i; j++) {             sum += std::pow(price[j] - mavg[i], 2);         }         std_dev[i] = std::sqrt(sum / (double) n);     }      // calculate the upper and lower bands     std::vector<double> upper_bound(price.size(), 0);     std::vector<double> lower_bound(price.size(), 0);     std::vector<double> pct(price.size(), 0);      for (int i = 0; i < mavg.size(); i++) {         upper_bound[i] = mavg[i] + sd * std_dev[i];         lower_bound[i] = mavg[i] - sd * std_dev[i];         pct[i] = (price[i] - lower_bound[i]) / (upper_bound[i] - lower_bound[i]);     }      List result = List::create(         _[\"bb_lower\"] = lower_bound,         _[\"bb_mavg\"] = mavg,         _[\"bb_upper\"] = upper_bound,         _[\"bb_pct\"] = pct     );      return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation","dir":"Articles","previous_headings":"Bollinger Bands (BB)","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Bollinger Bands algorithm implemented C++ using following steps: Calculate simple moving average (SMA) price data. Compute standard deviation point using rolling window. Calculate upper lower bands adding/subtracting standard deviation multiplied factor. Determine percentage B, indicates price relation bands.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance","dir":"Articles","previous_headings":"Bollinger Bands (BB)","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Optimise rolling calculations: Implement sliding window approach SMA standard deviation calculations reduce redundant computations. Parallelise computations: Utilise OpenMP std::thread perform calculations different sections data concurrently. Use SIMD instructions: Implement SIMD (Single Instruction, Multiple Data) operations vectorised calculations, especially standard deviation computation. Precompute squares: Calculate store squares price differences mean avoid repeated power operations. Memory efficiency: Consider using -place calculations possible reduce memory usage. Optimise data structures: Evaluate use efficient data structures memory layouts improved cache performance.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"exponential-moving-average-ema","dir":"Articles","previous_headings":"","what":"Exponential Moving Average (EMA)","title":"C++ high-performance technical indicators","text":"","code":"std::vector<double> ema(std::vector<double> price, int n, bool wilder = false) {     // define beta     // for EMA, wilder=FALSE (the default) uses an exponential smoothing ratio of 2/(n+1), while wilder=TRUE uses Welles Wilder's exponential smoothing ratio of 1/n     double beta = wilder ? 1.0 / n : 2.0 / ((double) n + 1.0);      // pre-allocate the vector with NA values     std::vector<double> result(price.size(), NA_REAL);      // check for non-leading NAs and get first non-NA location     int first_non_na = 0;     for (int i = 0; i < price.size(); i++) {         if (!std::isnan(price[i])) {             first_non_na = i;             break;         }     }      // if first value larger than n then throw error     if (n + first_non_na > price.size()) {         stop(\"Not enough non-NA values\");     }      // calculate the first value as the average of the first n values     double seed = 0.0;     for (int i = first_non_na; i < first_non_na + n; i++) {         // std::cout << price[i] << std::endl;         seed += price[i] / (double) n;     }      result[first_non_na + n - 1] = seed;      // calculate the ema     for (int i = first_non_na + n; i < price.size(); i++) {         result[i] = beta * price[i] + (1.0 - beta) * result[i - 1];     }          return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation-1","dir":"Articles","previous_headings":"Exponential Moving Average (EMA)","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Exponential Moving Average (EMA) algorithm implemented C++ using following steps: Calculate smoothing factor (beta) based period whether Wilder’s method used. Handle non-leading NA values input data. Compute initial seed value simple average first n non-NA values. Calculate EMA recursively remaining data points.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance-1","dir":"Articles","previous_headings":"Exponential Moving Average (EMA)","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Optimise NA handling: Consider using efficient method find first non-NA value, std::find_if. Vectorise calculations: Implement SIMD operations EMA calculation loop process multiple data points simultaneously. Memory efficiency: Use -place calculations possible reduce memory usage. Parallelise computations: large datasets, consider parallelising EMA calculations different segments data. Precompute constants: Calculate store constant values (e.g., 1.0 - beta) outside main loop. Optimise error handling: Implement efficient error checking handling mechanisms. Consider alternative data structures: Evaluate use cache-friendly data structures improved performance.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"moving-average-convergence-divergence-macd","dir":"Articles","previous_headings":"","what":"Moving Average Convergence Divergence (MACD)","title":"C++ high-performance technical indicators","text":"","code":"List macd(std::vector<double> price, int s, int l, int k, bool percent = true) {     std::vector<double> mavg_fast = ema(price, s);     std::vector<double> mavg_slow = ema(price, l);      // calculate the macd as the difference between mavg_fast and mavg_slow     std::vector<double> macd_res;      // we use a for loop here     for (int i = 0; i < mavg_fast.size(); i++) {         if (percent) {             macd_res.push_back(100 * (mavg_fast[i] / mavg_slow[i] - 1));         } else {             macd_res.push_back(mavg_fast[i] - mavg_slow[i]);         }     }      std::vector<double> signal = ema(macd_res, k);      List result = List::create(_[\"macd\"] = macd_res, _[\"signal\"] = signal);      return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation-2","dir":"Articles","previous_headings":"Moving Average Convergence Divergence (MACD)","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Moving Average Convergence Divergence (MACD) algorithm implemented C++ using following steps: Calculate fast slow Exponential Moving Averages (EMA) using provided periods. Compute MACD line either taking difference percentage difference fast slow EMAs. Calculate signal line applying EMA MACD line. Return MACD line signal line list.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance-2","dir":"Articles","previous_headings":"Moving Average Convergence Divergence (MACD)","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Vectorise calculations: Implement SIMD operations MACD calculation loop process multiple data points simultaneously. Optimise memory allocation: Pre-allocate macd_res vector avoid multiple reallocations push_back operations. Parallel processing: large datasets, consider parallelising MACD calculations different segments data. Inline EMA calculations: possible, inline EMA calculations within MACD function reduce function call overhead. Use references: Pass large vectors reference avoid unnecessary copying. Optimise conditional statements: Consider using ternary operator template specialisation handle percent flag efficiently. Memory efficiency: Evaluate possibility -place calculations reduce memory usage. Cache optimisation: Analyse optimise data access patterns better cache utilisation.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"momentum","dir":"Articles","previous_headings":"","what":"Momentum","title":"C++ high-performance technical indicators","text":"","code":"std::vector<double> mom(std::vector<double> price, int n) {     std::vector<double> result(price.size(), NA_REAL);     for (int i = n; i < price.size(); i++) {         result[i] = price[i] - price[i - n];     }     return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation-3","dir":"Articles","previous_headings":"Momentum","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Momentum algorithm implemented C++ using following steps: Pre-allocate result vector NA_REAL values handle missing data points. Iterate price vector, calculating difference current price price n periods ago. Store calculated momentum values result vector. straightforward implementation uses efficient vector operations minimises memory allocations. use NA_REAL ensures R receives valid NA values initial n-1 periods momentum calculated.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance-3","dir":"Articles","previous_headings":"Momentum","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Vectorisation: Implement SIMD instructions calculate multiple momentum values simultaneously. Parallel processing: large datasets, consider using OpenMP std::thread parallelize momentum calculations. Memory access optimisation: Analyse memory access pattern consider cache-friendly data structures algorithms. Inline expansion: function called frequently, consider making inline reduce function call overhead. Error handling: Add input validation ensure n larger price vector size. Optimise specific n values: common n values (e.g., 1, 5, 10), consider creating specialised implementations. Use iterator-based approach: Consider using iterators instead indexing, might efficient compilers. Precision control: lower precision acceptable, consider using float instead double faster calculations.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"rate-of-change-roc","dir":"Articles","previous_headings":"","what":"Rate of Change (ROC)","title":"C++ high-performance technical indicators","text":"","code":"std::vector<double> roc(std::vector<double> price, int n, char type = 'c') {     std::vector<double> result(price.size(), NA_REAL);      for (int i = n; i < price.size(); i++) {         if (type == 'c') {             result[i] = std::log(price[i]) - std::log(price[i - n]);         } else {             result[i] = (price[i] - price[i - n]) / price[i - n];         }     }      return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation-4","dir":"Articles","previous_headings":"Rate of Change (ROC)","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Rate Change (ROC) algorithm implemented C++ using following steps: Pre-allocate result vector NA_REAL values handle missing data points. Iterate price vector, starting nth element. type ‘c’ (continuous), calculate difference logarithms. Otherwise, calculate percentage change. Store calculated ROC values result vector. implementation allows two types ROC calculations: continuous (logarithmic) discrete (percentage). use NA_REAL ensures R receives valid NA values initial n-1 periods ROC calculated.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance-4","dir":"Articles","previous_headings":"Rate of Change (ROC)","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Vectorisation: Implement SIMD instructions calculate multiple ROC values simultaneously, especially arithmetic operations. Branch prediction optimisation: Consider reordering -else statement based common use case improve branch prediction. Parallel processing: large datasets, use OpenMP std::thread parallelise ROC calculations. Precompute logarithms: memory constraint, consider precomputing logarithms ‘c’ type avoid redundant calculations. Memory access optimisation: Analyse memory access pattern consider cache-friendly data structures algorithms. Inline expansion: function called frequently, consider making inline reduce function call overhead. Error handling: Add input validation ensure n larger price vector size type valid. Template specialisation: Create specialised implementations ‘c’ non-‘c’ types avoid runtime conditional check. Precision control: lower precision acceptable, consider using float instead double faster calculations.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"relative-strength-index-rsi","dir":"Articles","previous_headings":"","what":"Relative Strength Index (RSI)","title":"C++ high-performance technical indicators","text":"","code":"std::vector<double> rsi(std::vector<double> price, int n, char method = 'e') {     int price_length = price.size();     // create result vectors     std::vector<double> up(price_length, 0.0);     std::vector<double> down(price_length, 0.0);      for (int i = 1; i < price_length; i++) {         double price_diff = price[i] - price[i - 1];         if (price_diff > 0) {             up[i] = price[i] - price[i - 1];         } else {             down[i] = price[i - 1] - price[i];         }     }      // smoothed averages     std::vector<double> smoothed_average_gain(price_length, NA_REAL);     std::vector<double> smoothed_average_loss(price_length, NA_REAL);      if (method == 'e') {         smoothed_average_gain = ema(up, n, true);         smoothed_average_loss = ema(down, n, true);     } else if (method == 's') {         smoothed_average_gain = sma(up, n);         smoothed_average_loss = sma(down, n);     } else {         // throw c++ error         throw std::invalid_argument(\"method must be 'e' or 's'\");     }      // calculate the relative strength     std::vector<double> result(price_length, NA_REAL);      for (int i = 0; i < price_length; i++) {         double relative_strength_value = smoothed_average_gain[i] / smoothed_average_loss[i];         result[i] = 100.0 - 100.0 / (1.0 + relative_strength_value);     }      return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation-5","dir":"Articles","previous_headings":"Relative Strength Index (RSI)","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Relative Strength Index (RSI) algorithm implemented C++ using following steps: Calculate price differences separate ‘’ ‘’ movements. Compute smoothed averages gains losses using either Exponential Moving Average (EMA) Simple Moving Average (SMA), based specified method. Calculate relative strength ratio average gain average loss. Compute RSI values using formula: RSI = 100 - (100 / (1 + RS)). implementation allows flexibility choosing EMA SMA methods calculating average gains losses. leverages previously implemented EMA SMA functions efficiency code reuse.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance-5","dir":"Articles","previous_headings":"Relative Strength Index (RSI)","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Vectorisation: Implement SIMD instructions calculate multiple RSI values simultaneously, especially arithmetic operations. Optimise branching: Consider using template specialisation function pointers avoid method check function call. Parallel processing: large datasets, use OpenMP std::thread parallelise RSI calculations. Memory optimisation: Consider using -place calculations movements reduce memory usage. Precompute constants: Calculate store constant values (e.g., 100.0, 1.0) outside loops. Inline expansion: function called frequently, consider making inline reduce function call overhead. Error handling: Implement robust error checking handling mechanisms. Precision control: lower precision acceptable, consider using float instead double faster calculations. Cache optimisation: Analyse optimise data access patterns better cache utilisation. Optimise division operations: Consider using reciprocal multiplication instead division applicable.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"simple-moving-average-sma","dir":"Articles","previous_headings":"","what":"Simple Moving Average (SMA)","title":"C++ high-performance technical indicators","text":"","code":"std::vector<double> sma(std::vector<double> price, int n) {     // pre-allocate the vector with NA values     std::vector<double> result(price.size(), NA_REAL);      // calculate the first value as the average of the first n values     double first_val = 0;     for (int i = 0; i < n; i++) {         first_val += price[i] / (double) n;     }      // proof dividing in the for loop is correct     // 1+2+3+4+5+6+7+8+9+10 = 55 / 10 = 5.5     // (1/10)+(2/10)+(3/10)+(4/10)+(5/10)+(6/10)+(7/10)+(8/10)+(9/10)+(10/10) = 5.5     // first_val /= (double) n;      result[n - 1] = first_val;      // iterate over every position of the result array     // each are calculated from all values in window of size n     for (int i = n; i <= price.size(); i++) {         // iterate over the window of size n and calculate the sum / n         // values are initially set to NA so we must do initial value at 0         double sum = 0;         for (int j = i - n; j < i; j++) {             sum += price[j];         }         result[i - 1] = sum / (double) n;     }          // cast to NumericVector     return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation-6","dir":"Articles","previous_headings":"Simple Moving Average (SMA)","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Simple Moving Average (SMA) algorithm implemented C++ using following steps: Pre-allocate result vector NA_REAL values handle missing data points. Calculate first SMA value averaging first n elements price vector. Iterate remaining price data, calculating SMA window size n. Store calculated SMA values result vector. implementation uses efficient rolling sum algorithm minimise redundant calculations, resulting O(n) time complexity. use NA_REAL ensures R receives valid NA values initial n-1 periods SMA calculated.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance-6","dir":"Articles","previous_headings":"Simple Moving Average (SMA)","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Optimise rolling sum: Implement sliding window approach avoid recalculating entire sum window. Vectorisation: Use SIMD instructions calculate multiple sums divisions simultaneously. Parallel processing: large datasets, consider using OpenMP std::thread parallelise SMA calculations. Memory access optimisation: Analyse memory access pattern consider cache-friendly data structures algorithms. Precision control: lower precision acceptable, consider using float instead double faster calculations. Precompute reciprocals: Store 1/n replace division multiplication main loop. Error handling: Add input validation ensure n larger price vector size. Inline expansion: function called frequently, consider making inline reduce function call overhead. Optimise specific n values: common n values (e.g., 5, 10, 20), consider creating specialised implementations. Use iterators: Consider using iterators instead indexing, might efficient compilers.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"performance-discussion","dir":"Articles","previous_headings":"","what":"Performance Discussion","title":"C++ high-performance technical indicators","text":"implementing technical analysis algorithms C++ use R via Rcpp, several performance considerations optimisation strategies come play. section discusses general performance aspects Rcpp-specific optimisations can enhance efficiency package.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"general-c-optimisations","dir":"Articles","previous_headings":"Performance Discussion","what":"General C++ Optimisations","title":"C++ high-performance technical indicators","text":"Vectorisation: Utilise SIMD (Single Instruction, Multiple Data) operations possible. Modern C++ compilers can auto-vectorise loops, explicit use libraries like Eigen Boost.SIMD can yield improvements. Memory Management: Minimise dynamic allocations. Pre-allocate vectors sizes known advance. Consider using reserve() vectors grow. Loop Optimisation: Unroll small loops, consider loop fusion applicable. mindful cache-friendly access patterns. Inline Functions: Use inline functions small, frequently called functions reduce function call overhead. Const Correctness: Use const wherever possible allow compiler optimisations. Move Semantics: Utilise C++11 move semantics reduce unnecessary copying large objects.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"rcpp-specific-optimisations","dir":"Articles","previous_headings":"Performance Discussion","what":"Rcpp-Specific Optimisations","title":"C++ high-performance technical indicators","text":"RcppArmadillo: linear algebra operations, consider using RcppArmadillo, provides efficient matrix vector operations. Rcpp Sugar: Leverage Rcpp Sugar vectorised operations. provides R-like syntax C++ performance. Rcpp Attributes: Use Rcpp attributes seamless R C++ integration, reducing boilerplate code. Avoid R API Loops: Minimise calls R API functions inside loops, can expensive. Use Appropriate R Data Types: Match C++ types appropriate R types (e.g., NumericVector double vectors) efficient data transfer R C++. Parallel Processing: Utilise OpenMP parallelisation, supported Rcpp.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"r-integration-considerations","dir":"Articles","previous_headings":"Performance Discussion","what":"R Integration Considerations","title":"C++ high-performance technical indicators","text":"Minimise R-C++ Context Switching: Batch operations C++ possible reduce overhead switching R C++ contexts. Efficient Data Passing: Pass large datasets reference using Rcpp::Reference class avoid copying. Use RcppParallel: embarrassingly parallel tasks, consider using RcppParallel leverage multi-core processors. Profiling: Use Rcpp’s microbenchmark package profile C++ code identify bottlenecks. Memory Management R: aware R’s garbage collection. Properly scope Rcpp objects ensure timely cleanup.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"algorithm-specific-optimisations","dir":"Articles","previous_headings":"Performance Discussion","what":"Algorithm-Specific Optimisations","title":"C++ high-performance technical indicators","text":"Rolling Window Calculations: Implement efficient rolling window algorithms avoid redundant calculations moving averages similar indicators. Lookup Tables: functions discrete inputs (e.g., small integer ranges), consider using lookup tables instead repeated calculations. Approximations: appropriate, use fast approximations complex functions (e.g., fast log approximations certain calculations). Specialised Implementations: common parameter values (e.g., specific lookback periods), consider creating specialised, optimised implementations.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"future-optimisations","dir":"Articles","previous_headings":"Performance Discussion","what":"Future Optimisations","title":"C++ high-performance technical indicators","text":"GPU Acceleration: large datasets compute-intensive algorithms, consider GPU acceleration using libraries like RcppCUDA. Adaptive Algorithms: Implement algorithms can adapt different data sizes, potentially switching different implementations based input size. Code Generation: highly repetitive code patterns, consider using template metaprogramming code generation techniques create optimised implementations. applying optimisations consistently profiling code, can ensure Rcpp-based technical analysis package maintains high performance providing seamless integration R. Remember always benchmark profile optimisations ensure changes actually improve performance real-world scenarios.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_cpp-high-performance-technical-indicators.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"C++ high-performance technical indicators","text":"dmplot package provides set high-performance technical indicators implemented C++. leveraging speed efficiency C++, functions offer superior performance compared equivalent R implementations, especially large datasets high-frequency calculations. combination mathematical rigor optimised C++ code makes dmplot excellent choice financial analysts, quantitative traders, researchers working large-scale financial data requiring real-time analysis capabilities. Future developments continue focus performance optimisations expanding range available indicators, always emphasis C++ implementation maximum efficiency.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_getting-started-with-the-dmplot-framwork-for-finance.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started with the dmplot framework","text":"vignette explain conventions dmplot design choices - guide working data effectively leveraging dmplot ggplot2 framework derive insight analyses. dmplot limited financial data, indeed ’s conventions design choices applicable time series data. However, package indeed focus financial data analysis visualisation.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_getting-started-with-the-dmplot-framwork-for-finance.html","id":"licensing","dir":"Articles","previous_headings":"Introduction","what":"Licensing","title":"Getting started with the dmplot framework","text":"dmplot package released MIT license, allowing free use modification. Users must: Cite original author (see LICENSE details). Include license redistribution.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_getting-started-with-the-dmplot-framwork-for-finance.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Getting started with the dmplot framework","text":"Let’s install necessary libraries. often use following packages: data.table working large datasets. dmplot plotting financial time series datasets. kucoin interacting KuCoin API - getting cryptocurrency financial data. ggplot2 plotting. box loading modules R. strongly recommend using data.table work finance. indeed one primary reasons data.table created - work large datasets efficiently. installing data.table M1 MacOS consult guide building source: gist.github.com/dereckmezquita/ed860601138a46cf591a1bdcc95db0a2 Now, let’s load required libraries:","code":"install.packages(\"data.table\", type = \"source\") install.packages(\"TTR\") install.packages(\"ggplot2\") install.packages(\"box\")  remotes::install_github(\"dereckmezquita/dmplot\") remotes::install_github(\"dereckmezquita/kucoin\") box::use(kucoin) box::use(dt = data.table)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_getting-started-with-the-dmplot-framwork-for-finance.html","id":"dmplot-and-tidy-data-for-financial-data-analysis-and-visualization","dir":"Articles","previous_headings":"","what":"dmplot and “Tidy Data” for Financial Data Analysis and Visualization","title":"Getting started with the dmplot framework","text":"dmplot package provides toolkit plotting financial time series datasets ggplot2 framework. includes functions plotting candlestick charts, moving averages, Bollinger Bands, MACD, RSI, Stochastic Oscillator. order best leverage ggplot2 , thus visualise financial analyses must adhere “tidy data” convention. Whereby column variable, row observation, cell single value. format dmplot expects. Thus, calculated indicators added new columns dataset dmplot expects. offer two points guidance: Use data.table. Functions must return named list values. reason first point data.table powerful package working large datasets highly efficient. second point return named list values can easily use function within data.table create new columns. can see sticking convention allows us easily efficiently leverage data.table framework calculate new columns thus new indicators.","code":"petal_ratios <- function(petal_length, petal_width, sepal_length, sepal_width) {     petal_ratio <- petal_length / petal_width     sepal_ratio <- sepal_length / sepal_width     return(list(petal_ratio = petal_ratio, sepal_ratio = sepal_ratio)) }  iris2 <- dt$as.data.table(iris)  head(iris2) #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <num>       <num>        <num>       <num>  <fctr> #> 1:          5.1         3.5          1.4         0.2  setosa #> 2:          4.9         3.0          1.4         0.2  setosa #> 3:          4.7         3.2          1.3         0.2  setosa #> 4:          4.6         3.1          1.5         0.2  setosa #> 5:          5.0         3.6          1.4         0.2  setosa #> 6:          5.4         3.9          1.7         0.4  setosa  iris2[,     c(\"petal_ratio\", \"sepal_ratio\") := petal_ratios(         Petal.Length,         Petal.Width,         Sepal.Length,         Sepal.Width     ) ]  head(iris2) #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species petal_ratio #>           <num>       <num>        <num>       <num>  <fctr>       <num> #> 1:          5.1         3.5          1.4         0.2  setosa        7.00 #> 2:          4.9         3.0          1.4         0.2  setosa        7.00 #> 3:          4.7         3.2          1.3         0.2  setosa        6.50 #> 4:          4.6         3.1          1.5         0.2  setosa        7.50 #> 5:          5.0         3.6          1.4         0.2  setosa        7.00 #> 6:          5.4         3.9          1.7         0.4  setosa        4.25 #> 1 variable(s) not shown: [sepal_ratio <num>]"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_getting-started-with-the-dmplot-framwork-for-finance.html","id":"loading-sample-data","dir":"Articles","previous_headings":"","what":"Loading Sample Data","title":"Getting started with the dmplot framework","text":"’ll use sample data README:","code":"ticker <- \"BTC/USDT\"  data <- get_market_data(     symbols = ticker,     from = lubridate::now() - lubridate::days(7),     to = lubridate::now(),     frequency = \"1 hour\" ) head(data) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-07-06 05:00:00 56057.9 56485.8 56025.2 56363.1 79.48139 #> 2: BTC/USDT 2024-07-06 06:00:00 56363.1 56573.3 56346.6 56413.8 41.94569 #> 3: BTC/USDT 2024-07-06 07:00:00 56413.7 56672.4 56402.5 56602.2 98.02022 #> 4: BTC/USDT 2024-07-06 08:00:00 56602.2 56655.3 56508.8 56555.8 49.06419 #> 5: BTC/USDT 2024-07-06 09:00:00 56555.9 56767.0 56441.6 56759.9 42.89421 #> 6: BTC/USDT 2024-07-06 10:00:00 56757.4 56887.1 56645.3 56786.6 45.64148 #> 1 variable(s) not shown: [turnover <num>]"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_getting-started-with-the-dmplot-framwork-for-finance.html","id":"calculating-financial-indicators","dir":"Articles","previous_headings":"","what":"Calculating Financial Indicators","title":"Getting started with the dmplot framework","text":"provide host functions calculating financial indicators dmplot package. functions designed used within data.table framework return named list values. However, find need use outside functions can easily wrap function returns named list values. demonstrate TTT::EMA TTT::BBands:","code":"box::use(TTR[EMA, BBands]) box::use(dmplot[ bb ])  # redifine our function to return a list ema <- function(x, n, wilder = TRUE) {     return(as.list(as.data.frame(EMA(x, n = n, wilder = wilder)))) }  # calculate the short and long moving averages data[, ema_short := ema(close, n = 10, wilder = TRUE)] data[, ema_long := ema(close, n = 50, wilder = TRUE)]  # calculate the bollinger bands data[,     c(\"bb_lower\", \"bb_mavg\", \"bb_upper\", \"bb_pct\") := bb(         close, n = 10,         sd = 2     ) ]  head(data) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-07-06 05:00:00 56057.9 56485.8 56025.2 56363.1 79.48139 #> 2: BTC/USDT 2024-07-06 06:00:00 56363.1 56573.3 56346.6 56413.8 41.94569 #> 3: BTC/USDT 2024-07-06 07:00:00 56413.7 56672.4 56402.5 56602.2 98.02022 #> 4: BTC/USDT 2024-07-06 08:00:00 56602.2 56655.3 56508.8 56555.8 49.06419 #> 5: BTC/USDT 2024-07-06 09:00:00 56555.9 56767.0 56441.6 56759.9 42.89421 #> 6: BTC/USDT 2024-07-06 10:00:00 56757.4 56887.1 56645.3 56786.6 45.64148 #> 7 variable(s) not shown: [turnover <num>, ema_short <num>, ema_long <num>, bb_lower <num>, bb_mavg <num>, bb_upper <num>, bb_pct <num>]"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to financial indicators with dmplot","text":"vignette explains calculate interpret common financial indicators used technical analysis. ’ll cover mathematics behind indicator demonstrate functions used calculate well leverage provided dmplot. Finally, ’ll demonstrate visualise indicators using dmplot package.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"licensing","dir":"Articles","previous_headings":"Introduction","what":"Licensing","title":"Introduction to financial indicators with dmplot","text":"dmplot package released MIT license, allowing free use modification. Users must: Cite original author (see LICENSE details). Include license redistribution.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Introduction to financial indicators with dmplot","text":"See getting started installing recommended libraries: Getting Started dmplot Framework","code":"box::use(dt = data.table) box::use(ggplot2) box::use(dmplot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"loading-sample-data","dir":"Articles","previous_headings":"","what":"Loading Sample Data","title":"Introduction to financial indicators with dmplot","text":"’ll use sample data README:","code":"ticker <- \"BTC/USDT\"  data <- get_market_data(     symbols = ticker,     from = lubridate::now() - lubridate::days(7),     to = lubridate::now(),     frequency = \"1 hour\" ) head(data) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-07-06 05:00:00 56057.9 56485.8 56025.2 56363.1 79.48139 #> 2: BTC/USDT 2024-07-06 06:00:00 56363.1 56573.3 56346.6 56413.8 41.94569 #> 3: BTC/USDT 2024-07-06 07:00:00 56413.7 56672.4 56402.5 56602.2 98.02022 #> 4: BTC/USDT 2024-07-06 08:00:00 56602.2 56655.3 56508.8 56555.8 49.06419 #> 5: BTC/USDT 2024-07-06 09:00:00 56555.9 56767.0 56441.6 56759.9 42.89421 #> 6: BTC/USDT 2024-07-06 10:00:00 56757.4 56887.1 56645.3 56786.6 45.64148 #> 1 variable(s) not shown: [turnover <num>]"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"calculating-and-visualising-financial-indicators","dir":"Articles","previous_headings":"","what":"Calculating and Visualising Financial Indicators","title":"Introduction to financial indicators with dmplot","text":"adhere “Tidy Data” principles ggplot2 framework can easily calculate build visualisations layers. first set create set base layers reuse throughout visualisations.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"candlestick-chart","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators > Base Layers","what":"Candlestick Chart","title":"Introduction to financial indicators with dmplot","text":"candlestick chart type financial chart used represent price movements security. candlestick typically shows open, high, low, close prices specific period.","code":"candle_plot <- data |>     ggplot2$ggplot(ggplot2$aes(         x = datetime,         open = open,         high = high,         low = low,         close = close     )) +     ## ------------------------------------     dmplot$stat_candlestick() +     ## ------------------------------------     ggplot2$scale_x_datetime(date_breaks = \"1 day\", date_labels = \"%b %d\") +     ggplot2$labs(         title = paste(ticker, \"- Candlestick with EMA and Bollinger Bands\"),         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(axis.text.x = ggplot2$element_text(angle = 45, hjust = 1))  print(candle_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"line-chart","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators > Base Layers","what":"Line Chart","title":"Introduction to financial indicators with dmplot","text":"Sometimes may want visualise single indicator price movement time. line chart simple effective way .","code":"line_plot <- data |>     ggplot2$ggplot(ggplot2$aes(         x = datetime,         y = close     )) +     ggplot2$geom_line(         colour = \"cyan\",         linewidth = 1.25,         alpha = 0.5,         na.rm = TRUE     ) +     ggplot2$scale_x_datetime(date_breaks = \"1 day\", date_labels = \"%b %d\") +     ggplot2$labs(         title = paste(ticker, \"- Closing Price\"),         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(axis.text.x = ggplot2$element_text(angle = 45, hjust = 1))  print(line_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"volume","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators > Base Layers","what":"Volume","title":"Introduction to financial indicators with dmplot","text":"volume indicator financial indicator per se, commonly used conjunction indicators confirm price trends.","code":"volume_plot <- data |>     ggplot2$ggplot(ggplot2$aes(         x = datetime,         y = volume,         group = symbol     )) +     ggplot2$geom_bar(         stat = \"identity\",         ggplot2$aes(fill = ifelse(close > open, \"green\", \"red\")),         linewidth = 1,         alpha = 1,         na.rm = TRUE     ) +     ggplot2$scale_x_datetime(         date_breaks = \"1 day\",         date_minor_breaks = \"1 hour\",         date_labels = \"%d %b\"     ) +     ggplot2$scale_fill_identity() +     ggplot2$labs(         x = ggplot2$element_blank(),         y = \"Volume\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(         axis.text.x = ggplot2$element_text(angle = 45, hjust = 1),         panel.grid.minor = ggplot2::element_blank()     )  print(volume_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"simple-moving-average-sma","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"1. Simple Moving Average (SMA)","title":"Introduction to financial indicators with dmplot","text":"Simple Moving Average (SMA) average security’s price specified number periods. Mathematics: series Y, SMA time t calculated : \\[ SMA(t) = \\frac{Y(t) + Y(t-1) + ... + Y(t-n+1)}{n} \\] n number periods. Now using candlestick plot created earlier, can add SMA layer visualise moving averages.","code":"sma <- function(x, n) {     return(as.list(as.data.frame(TTR::SMA(x, n = n)))) }  data2 <- dt$copy(data)  data2[, sma_short := sma(close, n = 20)[[1]]] data2[, sma_long := sma(close, n = 50)[[1]]]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-07-06 05:00:00 56057.9 56485.8 56025.2 56363.1 79.48139 #> 2: BTC/USDT 2024-07-06 06:00:00 56363.1 56573.3 56346.6 56413.8 41.94569 #> 3: BTC/USDT 2024-07-06 07:00:00 56413.7 56672.4 56402.5 56602.2 98.02022 #> 4: BTC/USDT 2024-07-06 08:00:00 56602.2 56655.3 56508.8 56555.8 49.06419 #> 5: BTC/USDT 2024-07-06 09:00:00 56555.9 56767.0 56441.6 56759.9 42.89421 #> 6: BTC/USDT 2024-07-06 10:00:00 56757.4 56887.1 56645.3 56786.6 45.64148 #> 3 variable(s) not shown: [turnover <num>, sma_short <num>, sma_long <num>] sma_layer <- dmplot$stat_movingaverages(data = data2,         ggplot2$aes(x = datetime, short = sma_short, long = sma_long),         alpha = list(mavg = 0.5)     )  print(candle_plot + sma_layer)"},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"exponential-moving-average-ema","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"1. Exponential Moving Average (EMA)","title":"Introduction to financial indicators with dmplot","text":"EMA gives weight recent prices, making responsive new information simple moving average. Mathematics: series Y, EMA time t calculated : \\[ EMA(t) = α * Y(t) + (1 - α) * EMA(t-1) \\] α = 2 / (N + 1), N number periods.","code":"ema <- function(x, n, wilder = TRUE) {     as.list(as.data.frame(TTR::EMA(x, n = n, wilder = wilder))) }  data2 <- dt$copy(data)  data2[, `:=`(     ema_short = ema(close, n = 10, wilder = TRUE)[[1]],     ema_long = ema(close, n = 50, wilder = TRUE)[[1]] )]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-07-06 05:00:00 56057.9 56485.8 56025.2 56363.1 79.48139 #> 2: BTC/USDT 2024-07-06 06:00:00 56363.1 56573.3 56346.6 56413.8 41.94569 #> 3: BTC/USDT 2024-07-06 07:00:00 56413.7 56672.4 56402.5 56602.2 98.02022 #> 4: BTC/USDT 2024-07-06 08:00:00 56602.2 56655.3 56508.8 56555.8 49.06419 #> 5: BTC/USDT 2024-07-06 09:00:00 56555.9 56767.0 56441.6 56759.9 42.89421 #> 6: BTC/USDT 2024-07-06 10:00:00 56757.4 56887.1 56645.3 56786.6 45.64148 #> 3 variable(s) not shown: [turnover <num>, ema_short <num>, ema_long <num>] ema_layer <- dmplot$stat_movingaverages(data = data2,         ggplot2$aes(x = datetime, short = ema_short, long = ema_long),         alpha = list(mavg = 0.5),         colour = list(\"cyan\", \"magenta\")     )  print(candle_plot + ema_layer)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"bollinger-bands","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"2. Bollinger Bands","title":"Introduction to financial indicators with dmplot","text":"Bollinger Bands consist middle band (usually simple moving average) upper lower band standard deviations away middle band. Mathematics: \\[ Middle Band = SMA(n) \\] \\[ Upper Band = SMA(n) + k * σ(n) \\] \\[ Lower Band = SMA(n) - k * σ(n) \\] SMA(n) n-period simple moving average, σ(n) n-period standard deviation, k number standard deviations (usually 2). can see plot Bolllinger Bands great way visualise price volatility see security overbought oversold.","code":"bb <- function(close, n = 20, sd = 2) {     as.list(as.data.frame(TTR::BBands(close, n = n, sd = sd))) }  data2 <- dt$copy(data)  data2[, c(\"bb_lower\", \"bb_mavg\", \"bb_upper\", \"bb_pct\") := bb(close, n = 10, sd = 2)]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-07-06 05:00:00 56057.9 56485.8 56025.2 56363.1 79.48139 #> 2: BTC/USDT 2024-07-06 06:00:00 56363.1 56573.3 56346.6 56413.8 41.94569 #> 3: BTC/USDT 2024-07-06 07:00:00 56413.7 56672.4 56402.5 56602.2 98.02022 #> 4: BTC/USDT 2024-07-06 08:00:00 56602.2 56655.3 56508.8 56555.8 49.06419 #> 5: BTC/USDT 2024-07-06 09:00:00 56555.9 56767.0 56441.6 56759.9 42.89421 #> 6: BTC/USDT 2024-07-06 10:00:00 56757.4 56887.1 56645.3 56786.6 45.64148 #> 5 variable(s) not shown: [turnover <num>, bb_lower <num>, bb_mavg <num>, bb_upper <num>, bb_pct <num>] bb_layer <- dmplot$stat_bollingerbands(data = data2,         ggplot2$aes(ymin = bb_lower, mavg = bb_mavg, ymax = bb_upper),         colour = list(\"pink\", \"cyan\", \"cyan\")     )  print(candle_plot + bb_layer)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"fibonacci-retracement-fib","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"3. Fibonacci Retracement (Fib)","title":"Introduction to financial indicators with dmplot","text":"Fibonacci retracement popular tool used technical analysis identify potential support resistance levels based Fibonacci sequence. Mathematics: Fibonacci retracement levels calculated follows: 0.000 (0.0%) 0.236 (23.6%) 0.382 (38.2%) 0.500 (50.0%) 0.618 (61.8%) 0.786 (78.6%) 1.000 (100.0%) plot overlay Fibonacci retracement levels candlestick chart identify potential support resistance levels.","code":"data2 <- dt$copy(data)  high_price <- max(data2$high) low_price <- min(data2$low)  fib_levels <- dmplot$fib(high_price, low_price)  print(fib_levels) #> $levels #> [1] 0.000 0.236 0.382 0.500 0.618 0.786 1.000 #>  #> $prices #> [1] 59598.90 58343.88 57567.46 56939.95 56312.44 55419.03 54281.00 fib_plot <- candle_plot +     ggplot2$geom_hline(         yintercept = fib_levels$prices, color = \"yellow\", linetype = \"dashed\"     ) +     ggplot2$scale_y_continuous(         name = \"Price\",         sec.axis = ggplot2$sec_axis(             ~ (. - low_price) / (high_price - low_price) * 100,             name = \"Retracement %\",             labels = \\(x) paste0(round(x, 1), \"%\")         )     ) +     ggplot2$labs(         title = \"Price Chart with Fibonacci Retracement Levels\",         x = \"Date\"     )  print(fib_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"moving-average-convergence-divergence-macd","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"4. Moving Average Convergence Divergence (MACD)","title":"Introduction to financial indicators with dmplot","text":"MACD trend-following momentum indicator shows relationship two moving averages security’s price. Mathematics: \\[ MACD Line = EMA(12) - EMA(26) \\] \\[ Signal Line = EMA(9) MACD Line \\] \\[ MACD Histogram = MACD Line - Signal Line \\] MACD Line difference short-term EMA (12 periods) long-term EMA (26 periods). Signal Line EMA MACD Line (usually 9 periods). MACD Line crosses Signal Line, considered bullish signal. MACD Line crosses Signal Line, considered bearish signal. can see plot , MACD indicator great way visualise relationship two moving averages identify potential buy sell signals. plot shows two moving averages MACD histogram; histogram difference MACD Line Signal Line.","code":"macd <- function(x, fast = 12, slow = 26, signal = 9) {     as.list(as.data.frame(TTR::MACD(x, fast, slow, signal))) }  data2 <- dt$copy(data)  data2[, c(\"macd\", \"macd_signal\") := macd(close, fast = 12, slow = 26, signal = 9)] data2[, macd_diff := macd - macd_signal]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-07-06 05:00:00 56057.9 56485.8 56025.2 56363.1 79.48139 #> 2: BTC/USDT 2024-07-06 06:00:00 56363.1 56573.3 56346.6 56413.8 41.94569 #> 3: BTC/USDT 2024-07-06 07:00:00 56413.7 56672.4 56402.5 56602.2 98.02022 #> 4: BTC/USDT 2024-07-06 08:00:00 56602.2 56655.3 56508.8 56555.8 49.06419 #> 5: BTC/USDT 2024-07-06 09:00:00 56555.9 56767.0 56441.6 56759.9 42.89421 #> 6: BTC/USDT 2024-07-06 10:00:00 56757.4 56887.1 56645.3 56786.6 45.64148 #> 4 variable(s) not shown: [turnover <num>, macd <num>, macd_signal <num>, macd_diff <num>] macd_plot <- data2 |>     ggplot2$ggplot(ggplot2$aes(x = datetime)) +     dmplot$stat_macd(data = data2,         ggplot2$aes(macd = macd, macd_signal = macd_signal, macd_diff = macd_diff)     ) +     dmplot$theme_dereck_dark() +     ggplot2$scale_x_datetime(date_breaks = \"1 day\", date_labels = \"%b %d\") +     ggplot2$labs(         title = paste(ticker, \"- MACD\"),         x = \"Date\",         y = \"MACD Value\"     ) +     ggplot2$theme(axis.text.x = ggplot2$element_text(angle = 45, hjust = 1))  print(macd_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"relative-strength-index-rsi","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"5. Relative Strength Index (RSI)","title":"Introduction to financial indicators with dmplot","text":"RSI momentum oscillator measures speed change price movements. Mathematics: \\[ RSI = 100 - (100 / (1 + RS)) \\] RS = Average Gain / Average Loss \\[ Average Gain = [(previous avg. gain) x 13 + current gain] / 14 \\] \\[ Average Loss = [(previous avg. loss) x 13 + current loss] / 14 \\] RSI provides visual representation strength security’s price movement. often used identify overbought oversold conditions.","code":"rsi <- function(x, n = 14) {     as.list(as.data.frame(TTR::RSI(x, n = n))) }  data2 <- dt$copy(data)  data2[, rsi := rsi(close, n = 14)[[1]]]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-07-06 05:00:00 56057.9 56485.8 56025.2 56363.1 79.48139 #> 2: BTC/USDT 2024-07-06 06:00:00 56363.1 56573.3 56346.6 56413.8 41.94569 #> 3: BTC/USDT 2024-07-06 07:00:00 56413.7 56672.4 56402.5 56602.2 98.02022 #> 4: BTC/USDT 2024-07-06 08:00:00 56602.2 56655.3 56508.8 56555.8 49.06419 #> 5: BTC/USDT 2024-07-06 09:00:00 56555.9 56767.0 56441.6 56759.9 42.89421 #> 6: BTC/USDT 2024-07-06 10:00:00 56757.4 56887.1 56645.3 56786.6 45.64148 #> 2 variable(s) not shown: [turnover <num>, rsi <num>] rsi_plot <- na.omit(data2) |>     ggplot2$ggplot(ggplot2$aes(x = datetime)) +     ggplot2$geom_line(ggplot2$aes(y = rsi, colour = \"RSI\")) +     ggplot2$geom_hline(         yintercept = c(30, 70),         linetype = \"dashed\",         colour = \"yellow\"     ) +     ggplot2$scale_x_datetime(date_breaks = \"1 day\", date_labels = \"%b %d\") +     ggplot2$scale_y_continuous(limits = c(0, 100)) +     ggplot2$scale_color_manual(values = c(\"RSI\" = \"cyan\")) +     ggplot2$labs(         title = paste(ticker, \"- RSI\"),         x = \"Date\",         y = \"RSI Value\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(         axis.text.x = ggplot2$element_text(angle = 45, hjust = 1),         legend.position = \"none\"     )  print(rsi_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"rate-of-change-roc-momentum","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"6. Rate of Change (ROC) / Momentum","title":"Introduction to financial indicators with dmplot","text":"Rate Change (ROC) indicator measures percentage change price current price price n periods ago. Mathematics: \\[ ROC = \\frac{Close - Close_{n}}{Close_{n}} \\] n number periods. often used momentum indicator identify overbought oversold conditions. Notice execute second calculation normalise momentum values -1 1. \\[ Momentum = \\frac{ROC}{max(|ROC|)} \\] Momentum indicator simple way visualise rate change price specified number periods.","code":"data2 <- dt$copy(data)  data2[, mom := TTR::ROC(close, n = 2L)] data2[, mom := mom / max(abs(mom), na.rm = TRUE)]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-07-06 05:00:00 56057.9 56485.8 56025.2 56363.1 79.48139 #> 2: BTC/USDT 2024-07-06 06:00:00 56363.1 56573.3 56346.6 56413.8 41.94569 #> 3: BTC/USDT 2024-07-06 07:00:00 56413.7 56672.4 56402.5 56602.2 98.02022 #> 4: BTC/USDT 2024-07-06 08:00:00 56602.2 56655.3 56508.8 56555.8 49.06419 #> 5: BTC/USDT 2024-07-06 09:00:00 56555.9 56767.0 56441.6 56759.9 42.89421 #> 6: BTC/USDT 2024-07-06 10:00:00 56757.4 56887.1 56645.3 56786.6 45.64148 #> 2 variable(s) not shown: [turnover <num>, mom <num>] mom <- data2 |>     ggplot2$ggplot(ggplot2$aes(         x = datetime,         y = mom,         group = symbol     )) +     ## ------------------------------------     # momentum     ggplot2$geom_line(         colour = \"yellow\",         linewidth = 1.25,         alpha = 0.5,         na.rm = TRUE     ) +     ## ------------------------------------     # zero line     ggplot2$geom_hline(         yintercept = 0, colour = \"grey\", size = 1, linetype = \"dashed\"     ) +     ggplot2$scale_x_datetime(         date_breaks = \"1 day\", date_minor_breaks = \"1 hour\", date_labels = \"%d %b\"     ) +     ggplot2$labs(         x = ggplot2::element_blank(),         y = \"Momentum\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(         axis.text.x = ggplot2$element_text(angle = 90),         panel.grid.minor = ggplot2$element_blank()     )  print(mom)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"stochastic-oscillator","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"7. Stochastic Oscillator","title":"Introduction to financial indicators with dmplot","text":"Stochastic Oscillator momentum indicator shows location close relative high-low range set number periods. Mathematics: \\[ %K = (Current Close - Lowest Low)/(Highest High - Lowest Low) * 100 \\] \\[ %D = 3-day SMA %K \\] Stochastic Oscillator used identify overbought oversold conditions. %K line crosses %D line, considered buy signal. %K line crosses %D line, considered sell signal. Dotted yellow lines represent overbought (80) oversold (20) levels. Purple line represents Fast %K line; represents current close relative high-low range last 14 periods. Yellow line represents Slow %D line; 3-day SMA Fast %K line. Fast %K line crosses Slow %D line, considered buy signal. Fast %K line crosses Slow %D line, considered sell signal.","code":"stoch <- function(high, low, close, n = 14, k = 3, d = 3) {     as.list(as.data.frame(TTR::stoch(HLC = data.frame(high, low, close), nFastK = n, nFastD = k, nSlowD = d))) }  data2 <- dt$copy(data)  data2[,     c(\"fastK\", \"fastD\", \"slowD\") := stoch(high, low, close, n = 14, k = 3, d = 3) ]  # similarly to the momentum indicator, we normalise the values between 0 and 100 data2[, fastK := fastK / max(abs(fastK), na.rm = TRUE) * 100] data2[, fastD := fastD / max(abs(fastD), na.rm = TRUE) * 100] data2[, slowD := slowD / max(abs(slowD), na.rm = TRUE) * 100]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-07-06 05:00:00 56057.9 56485.8 56025.2 56363.1 79.48139 #> 2: BTC/USDT 2024-07-06 06:00:00 56363.1 56573.3 56346.6 56413.8 41.94569 #> 3: BTC/USDT 2024-07-06 07:00:00 56413.7 56672.4 56402.5 56602.2 98.02022 #> 4: BTC/USDT 2024-07-06 08:00:00 56602.2 56655.3 56508.8 56555.8 49.06419 #> 5: BTC/USDT 2024-07-06 09:00:00 56555.9 56767.0 56441.6 56759.9 42.89421 #> 6: BTC/USDT 2024-07-06 10:00:00 56757.4 56887.1 56645.3 56786.6 45.64148 #> 4 variable(s) not shown: [turnover <num>, fastK <num>, fastD <num>, slowD <num>] stoch_plot <- na.omit(data2) |>     ggplot2$ggplot(ggplot2$aes(x = datetime)) +     ggplot2$geom_line(ggplot2$aes(y = fastK, colour = \"Fast %K\")) +     ggplot2$geom_line(ggplot2$aes(y = slowD, colour = \"Slow %D\")) +     ggplot2$geom_hline(         yintercept = c(20, 80),         linetype = \"dashed\",         colour = \"yellow\"     ) +     ggplot2$scale_x_datetime(date_breaks = \"1 day\", date_labels = \"%b %d\") +     ggplot2$scale_y_continuous(limits = c(0, 100)) +     ggplot2$scale_color_manual(values = c(\"Fast %K\" = \"magenta\", \"Slow %D\" = \"yellow\")) +     ggplot2$labs(         title = paste(ticker, \"- Stochastic Oscillator\"),         x = \"Date\",         y = \"Value\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(axis.text.x = ggplot2$element_text(angle = 45, hjust = 1))  print(stoch_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"pulling-it-all-together","dir":"Articles","previous_headings":"","what":"Pulling it all together","title":"Introduction to financial indicators with dmplot","text":"Now built individual layers, can combine single plot visualise indicators together. use gridExtra package arrange plots grid layout.","code":"box::use(gridExtra)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"candlestick-chart-rsi-volume","dir":"Articles","previous_headings":"Pulling it all together","what":"Candlestick Chart + RSI + Volume","title":"Introduction to financial indicators with dmplot","text":"Now fun combine candlestick chart, RSI, volume plots single layout.  Challenge: can adjust left padding plots y-axis labels align?","code":"candle_plot_minus_x_axis <- candle_plot +     ema_layer +     bb_layer +     ggplot2$theme(         axis.text.x = ggplot2$element_blank(),         axis.title.x = ggplot2$element_blank()     ) +     ggplot2$labs(         title = paste(ticker, \"- Candlestick, EMA, Bollinger Bands, RSI, MACD, Volume\"),         y = \"Price (USD)\"     )  rsi_plot_minus_x_axis <- rsi_plot +     ggplot2$theme(         axis.text.x = ggplot2$element_blank(),         axis.title.x = ggplot2$element_blank()     ) +     ggplot2$labs(title = NULL, y = \"RSI\")  macd_plot_minus_x_axis <- macd_plot +     ggplot2$theme(         axis.text.x = ggplot2$element_blank(),         axis.title.x = ggplot2$element_blank()     ) +     ggplot2$labs(title = NULL, y = \"MACD\")  gridExtra$grid.arrange(     candle_plot_minus_x_axis,     rsi_plot_minus_x_axis,     macd_plot_minus_x_axis,     volume_plot,     ncol = 1,     heights = c(3, 1, 1, 1) )"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-financial-indicators-with-dmplot.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to financial indicators with dmplot","text":"vignette demonstrated calculate visualise various financial indicators using dmplot package. ’ve covered mathematics behind indicator provided R functions calculate . combining indicators visualisation capabilities dmplot, can create comprehensive insightful financial charts. Remember indicators can powerful tools technical analysis, used conjunction forms analysis relied upon exclusively making investment decisions. advanced usage customisation options, refer individual function documentation dmplot package explore combining multiple indicators create complex trading strategies.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"introduction-and-history","dir":"Articles","previous_headings":"","what":"Introduction and History","title":"Introduction to Monte Carlo Simulations","text":"Monte Carlo simulations, named famous casino Monaco, rich history dating back 1940s. method developed Stanislaw Ulam, mathematician working Manhattan Project, named Nicholas Metropolis, inspired Ulam’s uncle’s interest Monaco’s casinos. Originally used physics simulate neutron diffusion fissile material, Monte Carlo methods quickly found applications various fields, including finance. essence Monte Carlo simulation lies using random sampling solve problems might deterministic principle. finance, approach become invaluable dealing inherent uncertainties markets complex financial instruments. bioinformatics epidemiology, Monte Carlo simulations used model spread diseases predict outcomes.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"licensing","dir":"Articles","previous_headings":"Introduction and History","what":"Licensing","title":"Introduction to Monte Carlo Simulations","text":"dmplot package released MIT license, allowing free use modification. Users must: Cite original author (see LICENSE details). Include license redistribution.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"loading-sample-data","dir":"Articles","previous_headings":"","what":"Loading Sample Data","title":"Introduction to Monte Carlo Simulations","text":"’ll use sample data README:","code":"ticker <- \"BTC/USDT\"  data <- get_market_data(     symbols = ticker,     from = lubridate::now() - lubridate::days(7),     to = lubridate::now(),     frequency = \"1 hour\" ) head(data) #>        symbol            datetime    open    high     low   close   volume #> 4439 BTC/USDT 2024-01-15 05:00:00 42596.6 42814.7 42571.2 42734.3 77.96806 #> 4440 BTC/USDT 2024-01-15 06:00:00 42740.5 42797.0 42613.8 42648.2 68.88966 #> 4441 BTC/USDT 2024-01-15 07:00:00 42648.2 42766.3 42519.8 42709.8 84.02044 #> 4442 BTC/USDT 2024-01-15 08:00:00 42715.1 42772.0 42641.0 42682.8 64.09779 #> 4443 BTC/USDT 2024-01-15 09:00:00 42682.8 42756.6 42593.1 42746.8 65.64199 #> 4444 BTC/USDT 2024-01-15 10:00:00 42746.9 42764.0 42540.6 42562.1 56.32170 #>      turnover #> 4439  3330003 #> 4440  2941701 #> 4441  3582246 #> 4442  2736698 #> 4443  2801211 #> 4444  2401779"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"what-are-monte-carlo-simulations","dir":"Articles","previous_headings":"","what":"What are Monte Carlo Simulations?","title":"Introduction to Monte Carlo Simulations","text":"Monte Carlo simulations computational algorithms rely repeated random sampling obtain numerical results. context finance, ’re used model probability different outcomes process easily predicted due intervention random variables.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"uses-in-finance","dir":"Articles","previous_headings":"","what":"Uses in Finance","title":"Introduction to Monte Carlo Simulations","text":"Monte Carlo simulations numerous applications finance: Asset Pricing: Estimating future value assets portfolios. Risk Management: Assessing potential losses probability different risk scenarios. Derivatives Pricing: Valuing complex derivatives, especially path-dependent payoffs. Portfolio Optimisation: Determining optimal asset allocations various constraints market scenarios. Value Risk (VaR) Calculations: Estimating potential loss value portfolio. Real Options Analysis: Valuing flexibility business investment decisions.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"usage-of-dmplots-montecarlo-class","dir":"Articles","previous_headings":"","what":"Usage of dmplot’s MonteCarlo Class","title":"Introduction to Monte Carlo Simulations","text":"creates new MonteCarlo object, runs 1000 simulations 30 days future, plots resulting price paths.","code":"box::use(dmplot[ MonteCarlo ])  monte <- MonteCarlo$new(data, number_sims = 2500, project_days = 30 * 6)  # run Monte Carlo simulation monte$carlo()  # the results monte$data #>         symbol            datetime    open    high     low   close   volume #>         <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>    1: BTC/USDT 2024-01-15 05:00:00 42596.6 42814.7 42571.2 42734.3 77.96806 #>    2: BTC/USDT 2024-01-15 06:00:00 42740.5 42797.0 42613.8 42648.2 68.88966 #>    3: BTC/USDT 2024-01-15 07:00:00 42648.2 42766.3 42519.8 42709.8 84.02044 #>   ---                                                                       #> 4316: BTC/USDT 2024-07-13 03:00:00 57942.8 57985.0 57787.0 57818.5 24.15110 #> 4317: BTC/USDT 2024-07-13 04:00:00 57818.6 57857.5 57773.5 57779.8 33.79860 #> 4318: BTC/USDT 2024-07-13 05:00:00 57779.9 57967.1 57762.9 57931.7 23.49568 #> 1 variable(s) not shown: [turnover <num>]  # the predicted prices monte$simulation_results #>            close simulation            datetime #>            <num>      <int>              <POSc> #>      1: 57931.70          1 2024-07-13 05:00:00 #>      2: 57486.15          1 2024-07-14 05:00:00 #>      3: 57566.78          1 2024-07-15 05:00:00 #>     ---                                         #> 449998: 62469.40       2500 2025-01-06 05:00:00 #> 449999: 62706.68       2500 2025-01-07 05:00:00 #> 450000: 63334.52       2500 2025-01-08 05:00:00  # the final prices of each simulation monte$end_prices #>          close simulation            datetime #>          <num>      <int>              <POSc> #>    1: 60020.55          1 2025-01-08 05:00:00 #>    2: 65545.35          2 2025-01-08 05:00:00 #>    3: 53832.18          3 2025-01-08 05:00:00 #>   ---                                         #> 2498: 53123.07       2498 2025-01-08 05:00:00 #> 2499: 56955.83       2499 2025-01-08 05:00:00 #> 2500: 63334.52       2500 2025-01-08 05:00:00"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"visualisation","dir":"Articles","previous_headings":"","what":"Visualisation","title":"Introduction to Monte Carlo Simulations","text":"dmplot provides several visualisation methods help interpret results. plot simulated price paths:  can also visualise distribution violin plots help us understand range possible outcomes distribution final prices:  Finally, can combine historical data simulations see modelled scenarios compare reality:  visualisations can provide insights range possible outcomes likelihood different scenarios.","code":"monte$plot_prices() monte$plot_distribution() monte$plot_prices_and_predictions()"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"implementation-and-design","dir":"Articles","previous_headings":"","what":"Implementation and design","title":"Introduction to Monte Carlo Simulations","text":"basic steps implementing Monte Carlo simulation finance : Define parameters inputs model. Generate random scenarios based input parameters. Calculate outcome scenario. Aggregate results scenarios. Analyse distribution outcomes. package makes process extremely accessible three step process MonteCarlo R6 class: Create new MonteCarlo object historical price data. Run simulation desired number simulations projection days. Visualise results using provided plotting methods.","code":"monte <- MonteCarlo$new(     data,     number_sims = 2500,     project_days = 30 * 6 )  monte$carlo()  monte$plot_prices()"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"mathematics-of-monte-carlo-simulations-in-finance","dir":"Articles","previous_headings":"","what":"Mathematics of Monte Carlo Simulations in Finance","title":"Introduction to Monte Carlo Simulations","text":"core Monte Carlo simulations finance often based assumption asset prices follow geometric Brownian motion, described stochastic differential equation: \\[ dS = μSdt + σSdW \\] : S asset price μ drift (expected return) σ volatility dW Wiener process discrete time, can approximated : \\[ S(t+Δt) = S(t) * exp((μ - 0.5σ²)Δt + σ√Δt * ε) \\] ε standard normal random variable. implementation uses formula generate price paths, daily volatility estimated historical data.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"best-practices-and-what-not-to-do","dir":"Articles","previous_headings":"","what":"Best Practices and What Not to Do","title":"Introduction to Monte Carlo Simulations","text":"Monte Carlo simulations powerful, used carefully: : Understand inputs. quality simulation depends heavily quality input parameters. Don’t: Rely solely historical data parameter estimation. Past performance doesn’t guarantee future results. : Run sufficient number simulations. simulations generally lead accurate results, ’s trade-computational time. Don’t: Ignore limitations model. models simplifications reality. : Validate model real-world data possible. Don’t: Forget extreme events. Standard models often underestimate probability extreme events.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"c-implementation-algorithm-explanation","dir":"Articles","previous_headings":"Monte Carlo Simulation Implementation Details","what":"C++ implementation algorithm explanation","title":"Introduction to Monte Carlo Simulations","text":"core Monte Carlo simulation implemented C++ optimal performance. Let’s break monte_carlo function: Initialisation: create vectors store simulated prices (close), simulation indices (sim_idx), final prices (end_price), final simulation indices (end_idx). Simulation Loop: iterate num_sims times, representing complete price path. Price Path Generation: simulation, start seed_price generate num_days price movements. Daily Price Movement: day’s price calculated using formula: implements geometric Brownian motion, : R::rnorm(0, daily_vol) generates random number normal distribution mean 0 standard deviation daily_vol. Multiplying (1 + ...) ensures price changes proportionally. Data Storage: store day’s price corresponding simulation index. Results Compilation: simulations, create two data frames: simulations: Contains simulated prices corresponding simulation indices. end_prices: Contains final price simulation path.","code":"Rcpp::List monte_carlo(double seed_price, double daily_vol, int num_sims, int num_days) {     int total_rows = num_sims * num_days;     Rcpp::NumericVector close(total_rows);     Rcpp::IntegerVector sim_idx(total_rows);     Rcpp::NumericVector end_price(num_sims);     Rcpp::IntegerVector end_idx(num_sims);          int row_index = 0;     for (int i = 0; i < num_sims; ++i) {         double current_price = seed_price;         for (int j = 0; j < num_days; ++j) {             current_price *= (1 + R::rnorm(0, daily_vol));             close[row_index] = current_price;             sim_idx[row_index] = i + 1;             ++row_index;         }          end_price[i] = current_price;         end_idx[i] = i + 1;     }      Rcpp::DataFrame sim_df = Rcpp::DataFrame::create(         Rcpp::_[\"close\"] = close,         Rcpp::_[\"simulation\"] = sim_idx     );      Rcpp::DataFrame end_df = Rcpp::DataFrame::create(         Rcpp::_[\"close\"] = end_price,         Rcpp::_[\"simulation\"] = end_idx     );      return Rcpp::List::create(         Rcpp::_[\"simulations\"] = sim_df,         Rcpp::_[\"end_prices\"] = end_df     ); } current_price *= (1 + R::rnorm(0, daily_vol));"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"implementation-notes","dir":"Articles","previous_headings":"Monte Carlo Simulation Implementation Details > C++ implementation algorithm explanation","what":"Implementation Notes","title":"Introduction to Monte Carlo Simulations","text":"use Rcpp’s random number generator (R::rnorm) consistency R’s random number generation. function optimised speed pre-allocating memory results using loops necessary calculations. results returned R data.frames easy integration R code.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"r6-class-implementation","dir":"Articles","previous_headings":"Monte Carlo Simulation Implementation Details","what":"R6 Class Implementation","title":"Introduction to Monte Carlo Simulations","text":"MonteCarlo R6 class provides user-friendly interface running Monte Carlo simulations analysing results. ’s overview structure functionality: MonteCarlo class organised three main sections: Private fields methods: handle internal data validation preparation. Active bindings: Provide access simulation results. Public fields methods: Allow users configure, run, visualise simulations. key components : Data Preparation: prepare method calculates historical returns volatility input data. Simulation Execution: carlo method calls C++ monte_carlo function processes results. Visualisation: Three methods (plot_prices, plot_distribution, plot_prices_and_predictions) provide different ways visualise simulation results. ’s quick overview public methods available MonteCarlo class:","code":"#' Monte Carlo Simulation R6 Class #' #' @description #' An R6 class for performing Monte Carlo simulations on financial time series data. #' This class provides methods for data preparation, simulation execution, and result visualization. #' #' @details #' The MonteCarlo class uses historical price data to calculate volatility and perform #' Monte Carlo simulations for future price movements. It leverages the C++ implementation #' of the Monte Carlo algorithm for efficiency. #' #' @field data A data.table containing the historical price data. #' @field simulation_results A data.table containing the results of the Monte Carlo simulation. #' @field end_prices A data.table containing the final prices from each simulation path. #' @field log_historical Logical. Whether to use log returns for historical volatility calculation. #' @field number_sims Integer. The number of simulation paths to generate. #' @field project_days Integer. The number of days to project into the future. #' @field start_date POSIXct. The start date for the simulation (last date of historical data). #' @field verbose Logical. Whether to print progress messages. #' #' @export MonteCarlo <- R6::R6Class(     \"MonteCarlo\",     private = list(         validate_data = \\()          prepare = \\(log_historical = FALSE)          seed_price = NA_real_,         daily_vol = NA_real_     ),     active = list(         #' @field results A list containing simulation results and end prices.         results = \\()     ),     public = list(         data = NULL,         simulation_results = NULL,         end_prices = NULL,         log_historical = FALSE,         number_sims = 1000,         project_days = 30,         start_date = NULL,         verbose = FALSE,          #' @description         #' Create a new MonteCarlo object.         #' @param dt A data.table containing historical price data.         #' @param log_historical Logical. Whether to use log returns for historical volatility calculation.         #' @param number_sims Integer. The number of simulation paths to generate.         #' @param project_days Integer. The number of days to project into the future.         #' @param verbose Logical. Whether to print progress messages.         initialize = \\(dt, log_historical = FALSE, number_sims = 1000, project_days = 30, verbose = FALSE)          #' @description         #' Run the Monte Carlo simulation.         carlo = \\()          #' @description         #' Plot the simulated price paths.         #' @return A ggplot object showing the simulated price paths.         plot_prices = \\()          #' @description         #' Plot the distribution of final prices.         #' @return A ggplot object showing the distribution of final prices.         plot_distribution = \\()          #' @description         #' Plot historical prices and simulated future prices.         #' @return A ggplot object showing historical and simulated prices.         plot_prices_and_predictions = \\()     ) )"},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"performance-considerations","dir":"Articles","previous_headings":"","what":"Performance Considerations","title":"Introduction to Monte Carlo Simulations","text":"Monte Carlo simulations can computationally intensive, especially large number simulations complex models. package addresses implementing core simulation logic C++ via Rcpp. results significantly faster execution compared pure R implementations.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/fin_intro-to-monte-carlo-simulations.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to Monte Carlo Simulations","text":"Monte Carlo simulations powerful tool financial analyst’s toolkit. allow us model complex, real-world systems make probabilistic forecasts. However, used judiciously, clear understanding assumptions limitations. package aims make sophisticated techniques accessible efficient, allowing analysts focus interpreting results rather implementation details. Remember, Monte Carlo simulations can provide valuable insights, crystal balls. tools help inform decision-making, predict future certainty.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_review-principal-component-analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Review of Principal Component Analysis (PCA)","text":"Principal Component Analysis (PCA) powerful dimensionality reduction technique widely used data analysis visualisation. vignette provides comprehensive guide understanding PCA using Pca class implemented dmplot. dmplot makes executing relatively simple matter via use Pca Comparison (optional) classes. Prepare data: high-dimensional data (HDD) data.table format features rows samples columns first column must named “feature” contain feature names. Using comparison object automatically filter dataset include samples comparison create plots highlight differences groups. Create Pca object: pass data comparison object (applicable) Pca class perform PCA. Now just execute Pca$prcomp() perform PCA data access plots via Pca$plot_scree() Pca$plot_scatter().","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_review-principal-component-analysis.html","id":"what-is-principal-component-analysis","dir":"Articles","previous_headings":"","what":"What is Principal Component Analysis?","title":"Review of Principal Component Analysis (PCA)","text":"PCA statistical procedure transforms set observations possibly correlated variables set values linearly uncorrelated variables called principal components. transformation defined way first principal component largest possible variance, succeeding component highest variance possible constraint orthogonal preceding components. mean? orthogonal ? accustomed living three dimensional world case using word dimension simply way describe feature something measured. example, dataset 1000 features (genes, financial indicators, etc.) 100 samples (observations) 1000-dimensional dataset. PCA way reduce 1000-dimensional dataset 2-dimensional dataset (3-dimensional prefer) captures important information data. Now orthogonal mean? context, means principal components uncorrelated . important allows us capture maximum amount variance data fewest number principal components.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_review-principal-component-analysis.html","id":"the-mathematics-behind-pca","dir":"Articles","previous_headings":"","what":"The Mathematics Behind PCA","title":"Review of Principal Component Analysis (PCA)","text":"PCA involves several mathematical steps: Standardisation: PCA begins dataset n-dimensions. implementation, genes dimensions samples observations. data standardised, transforming dimension mean 0 standard deviation 1. step crucial PCA sensitive relative scaling original variables. Mathematically, feature x, compute: \\[ x_{standardised} = (x - μ) / σ \\] μ mean σ standard deviation feature. Covariance Matrix Computation: covariance matrix computed. matrix indicates covariance (shared variance) pair dimensions. covariance different dimensions used understand correlation structure original dimensions. dataset X m features, covariance matrix C computed : \\[ C = (1 / (n-1)) * (X^T * X) \\] n number observations X^T transpose X. Eigendecomposition: covariance matrix decomposed eigenvectors eigenvalues. eigenvector represents principal component, linear combination original dimensions. associated eigenvalue represents amount variance explained principal component. solve equation: \\[ C * v = λ * v \\] v eigenvector λ corresponding eigenvalue. eigenvectors ordered corresponding eigenvalues, first principal component (PC1) explains variance, followed PC2, . Selection Principal Components: Depending goal analysis, principal components can selected analysis. ‘elbow method’ commonly used, plot explained variance principal component look ‘elbow’ plot cut-point. Interpretation: ‘top rotations’ context PCA refer features (genes) contribute principal component. ‘rotation’ matrix gives loadings feature onto PC. identifying features large absolute loadings, can understand features drive separation data along principal components.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_review-principal-component-analysis.html","id":"using-the-pca-class","dir":"Articles","previous_headings":"","what":"Using the Pca Class","title":"Review of Principal Component Analysis (PCA)","text":"Pca class dmplot provides methods step PCA process, data preparation visualisation results. ’s use :","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_review-principal-component-analysis.html","id":"creating-a-pca-object","dir":"Articles","previous_headings":"Using the Pca Class","what":"Creating a Pca Object","title":"Review of Principal Component Analysis (PCA)","text":"First, need create Pca object data: case perform generic PCA object without comparison. can see plots show groupings. execute calculations use Pca$prcomp(): want compare groups within data, can provide Comparison object. Providing Comparison object automatically filter data include samples comparison create plots highlight samples group. method standardises data, computes covariance matrix, performs eigendecomposition, stores results.","code":"# Load required packages box::use(dmplot[Pca, Comparison])  data(feature_counts, package = \"dmplot\")  # The data should be a data.table with features as rows and samples as columns # The first column must be named \"feature\" and contain the feature names data <- feature_counts[GeneBiotype == \"protein_coding\", ] colnames(data)[1] <- \"feature\"  # Create a Pca object pca_obj <- Pca$new(data) pca_obj$prcomp()  print(pca_obj) #> PCA object: #> ------------------------------- #> Proportion of Variance Explained by each PC: #>         PC pct_var_explained #>     <fctr>             <num> #>  1:    PC1             93.51 #>  2:    PC2              3.25 #>  3:    PC3              0.78 #> ---                          #> 70:   PC70              0.00 #> 71:   PC71              0.00 #> 72:   PC72              0.00 # Create a comparison table comp_table <- data.frame(    group = c(\"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\"),    sample = c(\"T64552\", \"T64553\", \"T64554\", \"T64555\", \"T64546\", \"T64548\", \"T64549\", \"T64550\") )  # Create a Comparison object comp <- Comparison$new(     comparison_name = \"A_over_B\",     group_order = c(\"B\", \"A\"),     comparison_table = comp_table )  # Create a Pca object with the comparison pca_obj2 <- Pca$new(data, comp)  pca_obj2$prcomp()"},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_review-principal-component-analysis.html","id":"accessing-pca-results","dir":"Articles","previous_headings":"Using the Pca Class","what":"Accessing PCA Results","title":"Review of Principal Component Analysis (PCA)","text":"can access various aspects PCA results:","code":"# View the raw PCA results pca_obj2$prcomp_results #> Standard deviations (1, .., p=8): #> [1] 1.138674e+06 8.773857e+04 6.518402e+04 4.366182e+04 2.366213e+04 #> [6] 2.021359e+04 1.856779e+04 5.074559e-10 #>  #> Rotation (n x k) = (21936 x 9): #>                   feature           PC1           PC2           PC3 #>                    <char>         <num>         <num>         <num> #>     1: ENSMUSG00000051845 -7.096769e-06 -3.435085e-06 -1.311560e-05 #>     2: ENSMUSG00000025374  2.507594e-04  2.327624e-04 -2.263580e-03 #>     3: ENSMUSG00000025609  4.829978e-04  5.629973e-04 -1.712018e-04 #>    ---                                                              #> 21934: ENSMUSG00000063958  1.452822e-07 -1.861195e-06 -1.868383e-06 #> 21935: ENSMUSG00000096294 -3.440474e-07 -2.470131e-06 -1.668852e-06 #> 21936: ENSMUSG00000095261 -2.224891e-07  5.361425e-07  8.268138e-07 #> 5 variable(s) not shown: [PC4 <num>, PC5 <num>, PC6 <num>, PC7 <num>, PC8 <num>] # View the refined PCA results pca_obj2$prcomp_refined #>        PC pct_var_explained        T64555        T64550        T64554 #>    <fctr>             <num>         <num>         <num>         <num> #> 1:    PC1             98.84 -1.095036e+06  1.318588e+06 -1.009661e+06 #> 2:    PC2              0.59 -4.006736e+04 -1.002931e+05  1.444540e+04 #> 3:    PC3              0.32  2.585091e+04 -5.557073e+04  1.229583e+04 #> 4:    PC4              0.15 -6.332709e+04  1.082834e+04  2.228724e+04 #> 5:    PC5              0.04 -3.031154e+04 -1.626517e+04  3.658489e+04 #> 6:    PC6              0.03  1.610595e+04  1.165766e+04  3.180771e+04 #> 7:    PC7              0.03  1.252223e+04 -2.548565e+04 -7.162936e+03 #> 8:    PC8              0.00 -7.304681e-10  1.467666e-10 -7.570011e-10 #> 5 variable(s) not shown: [T64546 <num>, T64548 <num>, T64553 <num>, T64549 <num>, T64552 <num>] # View the top contributors to each PC as.data.frame(pca_obj2$top_rotations) #>                          PC1       PC2       PC3       PC4       PC5       PC6 #> ENSMUSG00000024146 0.9672892 0.6915537 0.5656072 0.2599749 0.3565922 0.3526967 #> ENSMUSG00000022397 0.1567412 0.3600379 0.4217036 0.2594879 0.2230975 0.2379434 #> ENSMUSG00000025537 0.1003282 0.2865109 0.2603293 0.2519562 0.1597955 0.2237858 #>                          PC7        PC8 #> ENSMUSG00000024146 0.3229935 0.99589674 #> ENSMUSG00000022397 0.2872070 0.06659177 #> ENSMUSG00000025537 0.2769927 0.05689562"},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_review-principal-component-analysis.html","id":"visualising-pca-results","dir":"Articles","previous_headings":"Using the Pca Class","what":"Visualising PCA Results","title":"Review of Principal Component Analysis (PCA)","text":"Pca class provides methods creating two common PCA visualisations. scree plot shows proportion variance explained principal component. useful determining many principal components actually contribute possible differences groups. explained earlier ‘elbow method’ commonly used determine number PCs retain. point inflection scree plot explained variance starts level . dmplot provides plot histogram one can nonetheless use calculated values create line plot.  scatter plot shows samples projected onto first two principal components. plot useful visualising relationships samples reduced-dimensional space.  Earlier made two different PCA objects, one comparison one without. can see scatter plot comparison shows samples grouped comparison. plot without comparison; notice samples coloured groups far samples plot. Comparison object provided, data filtered include samples comparison.","code":"pca_obj2$plot_scree() pca_obj2$plot_scatter() pca_obj$plot_scatter()"},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_review-principal-component-analysis.html","id":"customising-plots","dir":"Articles","previous_headings":"Advanced Usage","what":"Customising Plots","title":"Review of Principal Component Analysis (PCA)","text":"plot_scree() plot_scatter() methods accept various parameters customisation. example:  plotting arguments provided ease use one can nonetheless use ggplot2 object customise plot .","code":"scatter_plot <- pca_obj$plot_scatter(    point_size = 4,    point_alpha = 0.8,    point_labels = list(show = TRUE, size = 3, alpha = 0.75, font_face = \"bold\", max_overlaps = 10),    top_contributors = list(show = TRUE, truncate = 20),    title = \"My Custom PCA Plot\" )  print(scatter_plot) box::use(ggplot2)  scatter_plot +    ggplot2$theme_minimal() +    ggplot2$theme(        plot.title = ggplot2$element_text(size = 16, face = \"bold\"),        axis.title = ggplot2$element_text(size = 14),        axis.text = ggplot2$element_text(size = 12)    )"},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_review-principal-component-analysis.html","id":"interpreting-results","dir":"Articles","previous_headings":"Advanced Usage","what":"Interpreting Results","title":"Review of Principal Component Analysis (PCA)","text":"Variance Explained: Look pct_var_explained pca_obj$prcomp_refined understand much total variance PC explains. Sample Clustering: scatter plot, look clusters samples. Samples cluster together similar dimensions first two PCs. Top Contributors: Examine pca_obj$top_rotations understand features contribute PC. features driving differences samples.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_review-principal-component-analysis.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Review of Principal Component Analysis (PCA)","text":"Data Preparation: Ensure data properly normalised performing PCA. Pca class expects data specific format (features rows, samples columns). Handling Missing Data: PCA handle missing values. Ensure data complete use appropriate methods impute missing values PCA. Interpreting Results: Remember PCA unsupervised method. doesn’t know experimental groups. see separation groups PCA plot, suggests largest sources variation data correspond experimental conditions. Number PCs: ’s hard rule many PCs retain. Common methods include looking ‘elbow’ scree plot, retaining enough PCs explain certain percentage (e.g., 80%) total variance. Visualisation: first two PCs commonly plotted, sometimes ’s informative look PCs well, especially PC1 PC2 don’t explain large proportion variance.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_review-principal-component-analysis.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Review of Principal Component Analysis (PCA)","text":"Pca class provides powerful flexible tool performing Principal Component Analysis R. encapsulating entire PCA workflow - data preparation results visualisation - simplifies process exploring high-dimensional data. Whether ’re analysing gene expression data, financial time series, high-dimensional dataset, PCA can provide valuable insights structure data. Pca class makes easy leverage powerful technique analyses.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_the-comparison-class-for-statistics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The Comparison class for statistics","text":"Comparison class fundamental component package, designed facilitate analysis grouped data across various domains, including bioinformatics, finance, general statistical applications. vignette provide comprehensive overview Comparison class, purpose, effectively use analyses.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_the-comparison-class-for-statistics.html","id":"what-is-the-comparison-class","dir":"Articles","previous_headings":"","what":"What is the Comparison Class?","title":"The Comparison class for statistics","text":"Comparison class R6 class represents comparison two groups samples. encapsulates essential information needed perform comparative analyses, including: name comparison order groups compared table containing sample information group structure allows clear organization experimental designs streamlines subsequent analyses.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_the-comparison-class-for-statistics.html","id":"why-is-the-comparison-class-important","dir":"Articles","previous_headings":"","what":"Why is the Comparison Class Important?","title":"The Comparison class for statistics","text":"Comparison class serves several crucial purposes: Experimental Design: provides structured way define groups experiment, crucial many statistical tests (e.g., t-tests, ANOVA). Hypothesis Testing: explicitly defining groups order, clarifies null alternative hypotheses statistical tests. Reproducibility: Encapsulating relevant information comparison enhances reproducibility statistical analyses. Flexibility: can used various statistical contexts, simple two-group comparisons complex experimental designs. Integration: class designed work seamlessly statistical components package, facilitating complex analyses. essence Comparison class formal representation experimental design, providing structured way define work comparisons statistical analyses.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_the-comparison-class-for-statistics.html","id":"creating-a-comparison-object-for-statistical-analysis","dir":"Articles","previous_headings":"","what":"Creating a Comparison Object for Statistical Analysis","title":"The Comparison class for statistics","text":"create Comparison object, need provide three key pieces information: comparison_name: string describes comparison. group_order: vector two group names, specifying order comparison. comparison_table: data.table containing sample information. ’s basic example: want pay close attention language used describing comparison. always use word “” instead “vs” describe comparison. “” descriptive explicit conveying group control baseline group; mathematically speaking control denominator comparison. example, ’re setting comparison “Treatment” group “Control” group, two samples group. created, Comparison object contains several important pieces information: Note Comparison class automatically adds condition column comparison table, designating first group group_order “control” second “test”. crucial many statistical tests one group considered baseline control condition.","code":"box::use(dt = data.table) box::use(dmplot[ Comparison ])  comparison <- Comparison$new(     comparison_name = \"Treatment over Control\",     group_order = c(\"Control\", \"Treatment\"),     comparison_table = dt$data.table(         group = c(\"Control\", \"Control\", \"Treatment\", \"Treatment\"),         sample = c(\"Sample1\", \"Sample2\", \"Sample3\", \"Sample4\")     ) ) print(comparison) #> Comparison R6 object #> ----------------- #> Comparison Name:  Treatment over Control  #> Group Order:  Control, Treatment  #> Comparison Table: #>       group  sample condition #> 1   Control Sample1   control #> 2   Control Sample2   control #> 3 Treatment Sample3      test #> 4 Treatment Sample4      test"},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_the-comparison-class-for-statistics.html","id":"best-practices-for-statistical-applications","dir":"Articles","previous_headings":"","what":"Best Practices for Statistical Applications","title":"The Comparison class for statistics","text":"Clear Hypotheses: Use comparison_name clearly state statistical hypothesis. Group Order: two-group comparisons, typically set control baseline group first group_order. Sample Size: Ensure balanced sample sizes possible robust statistical comparisons. Data Assumptions: Remember Comparison class doesn’t check assumptions statistical tests (e.g., normality t-tests). Always verify separately. Multiple Testing: performing multiple comparisons, consider corrections multiple testing (e.g., Bonferroni correction).","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/stat_the-comparison-class-for-statistics.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"The Comparison class for statistics","text":"Comparison class provides robust flexible framework defining working statistical comparisons across various domains. encapsulating key elements comparison - name, group order, sample information - simplifies process conducting statistical analyses promotes reproducible research practices.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dereck Mezquita. Author, maintainer.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mezquita, D. (2024). dmplot: plotting toolkit financial time series data. package provides algorithms, functions, layers outlines framework working working analysing financial time series data. R package version 1.3.0. https://github.com/dereckmezquita/dmplot DOI: https://github.com/dereckmezquita/dmplot","code":"@Manual{,   title = {dmplot: A plotting toolkit for financial and time series data. The package provides algorithms, functions, layers and outlines a framework for working with working with and analysing financial and time series data.},   author = {Dereck Mezquita},   year = {2024},   note = {R package version 1.3.0},   url = {https://github.com/dereckmezquita/dmplot},   doi = {https://github.com/dereckmezquita/dmplot}, }"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"dmplot","dir":"","previous_headings":"","what":"dmplot","title":"Framework written in high-performance C++ and ggplot2 for financial, bioinformatics, and time series data analysis","text":"R framework written high-performance C++ ggplot2 financial, bioinformatics, time series data analysis. package provides algorithms, functions, ggplot2 layers importantly framework working analysing financial, bioinformatics, time series data. short package condensation accumulation knowledge ’ve gathered years spurred personal curiosity framed need order comprehensive framework.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Framework written in high-performance C++ and ggplot2 for financial, bioinformatics, and time series data analysis","text":"can install dmplot using:","code":"# install.packages(\"remotes\") remotes::install_github(\"dereckmezquita/dmplot\")"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"load-libraries","dir":"","previous_headings":"","what":"Load libraries","title":"Framework written in high-performance C++ and ggplot2 for financial, bioinformatics, and time series data analysis","text":"","code":"box::use(kucoin[ get_market_data ]) box::use(dt = data.table) box::use(ggplot2) box::use(dmplot)"},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"get-financial-data","dir":"","previous_headings":"Getting started - Finance","what":"Get financial data","title":"Framework written in high-performance C++ and ggplot2 for financial, bioinformatics, and time series data analysis","text":"kucoin package interacting kucoin.com API api. can use source financial data long pass variables ggplot2 stat correctly. NOTE: demo dataset included demo/data/ directory.","code":"ticker <- \"BTC/USDT\"  data <- get_market_data(     symbols = ticker,     from = lubridate::now() - lubridate::days(7),     to = lubridate::now(),     frequency = \"1 hour\" ) head(data) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-07-06 05:00:00 56057.9 56485.8 56025.2 56363.1 79.48139 #> 2: BTC/USDT 2024-07-06 06:00:00 56363.1 56573.3 56346.6 56413.8 41.94569 #> 3: BTC/USDT 2024-07-06 07:00:00 56413.7 56672.4 56402.5 56602.2 98.02022 #> 4: BTC/USDT 2024-07-06 08:00:00 56602.2 56655.3 56508.8 56555.8 49.06419 #> 5: BTC/USDT 2024-07-06 09:00:00 56555.9 56767.0 56441.6 56759.9 42.89421 #> 6: BTC/USDT 2024-07-06 10:00:00 56757.4 56887.1 56645.3 56786.6 45.64148 #> 1 variable(s) not shown: [turnover <num>]"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"working-with-and-plotting-financial-data","dir":"","previous_headings":"Getting started - Finance","what":"Working with and plotting financial data","title":"Framework written in high-performance C++ and ggplot2 for financial, bioinformatics, and time series data analysis","text":"demonstrate use stats plotting financial data along theme functions included package: dmplot::stat_candlesticks() dmplot::stat_bollingerbands() dmplot::stat_movingaverages() dmplot::stat_macd() theme functions styling: dmplot::theme_dereck_dark() dmplot::theme_dereck_light() dmplot framework provides number high-performance C++ implementations technical indicators can used directly data.table := operator. allows one leverage power data.table speed C++ calculations. dmplot::bb() - Bollinger Bands dmplot::ema() - Exponential Moving Average, wilder argument dmplot::macd() - Moving Average Convergence Divergence dmplot::mom() - Momentum dmplot::monte_carlo() - Monte Carlo simulation dmplot::roc() - Rate Change dmplot::rsi() - Relative Strength Index dmplot::sma() - Simple Moving Average One can easily use external packages calculate indicators long return list can coerced list. reason want impose use “Tidy Data” principles, convention ggplot2 follows allow us easily build analyses plots layers. information working dmplot see Getting started dmplot framework.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"ema-and-bollinger-bands","dir":"","previous_headings":"Getting started - Finance > Working with and plotting financial data","what":"EMA and Bollinger Bands","title":"Framework written in high-performance C++ and ggplot2 for financial, bioinformatics, and time series data analysis","text":"demonstrate one might use external package calculate indicator EMA (TTR). dmplot also provides high-performance C++ implmentation ema bb can used directly data.table := operator. dmplot framework can build analyses plots layers. First create candlestick plot add EMA Bollinger Bands separate layers. allow us dynamically overlay different indicators analyses.","code":"box::use(TTR[ EMA ])  data2 <- dt$copy(data)  # wrap to return a list ema <- function(x, n, wilder = TRUE) {     return(as.list(as.data.frame(EMA(x, n = n, wilder = wilder)))) }  # calculate the short and long moving averages data2[, ema_short := ema(close, n = 10, wilder = TRUE)] data2[, ema_long := ema(close, n = 50, wilder = TRUE)]  # use dmplot's C++ implementation of bollinger bands data2[,     c(\"bb_lower\", \"bb_mavg\", \"bb_upper\", \"bb_pct\") := dmplot$bb(close, n = 10, sd = 2) ]  tail(data2[, .(datetime, close, ema_short, ema_long, bb_lower, bb_mavg, bb_upper)]) #>               datetime   close ema_short ema_long bb_lower  bb_mavg bb_upper #>                 <POSc>   <num>     <num>    <num>    <num>    <num>    <num> #> 1: 2024-07-13 00:00:00 57835.5  57705.34 57599.07 57373.50 57904.35 58435.20 #> 2: 2024-07-13 01:00:00 57879.7  57722.77 57604.68 57381.80 57870.93 58360.06 #> 3: 2024-07-13 02:00:00 57942.8  57744.78 57611.44 57388.49 57853.82 58319.15 #> 4: 2024-07-13 03:00:00 57818.5  57752.15 57615.58 57402.41 57819.27 58236.13 #> 5: 2024-07-13 04:00:00 57779.8  57754.91 57618.87 57501.74 57767.08 58032.42 #> 6: 2024-07-13 05:00:00 57820.6  57761.48 57622.90 57551.86 57790.19 58028.52 candle_plot <- data2 |>     ggplot2$ggplot(ggplot2$aes(         x = datetime,         open = open,         high = high,         low = low,         close = close     )) +     ## ------------------------------------     dmplot$stat_candlestick() +     ## ------------------------------------     ggplot2$scale_x_datetime(date_breaks = \"1 day\", date_labels = \"%b %d\") +     ggplot2$labs(         title = paste(ticker, \"- Candlestick with EMA and Bollinger Bands\"),         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(axis.text.x = ggplot2$element_text(angle = 45, hjust = 1))  ema_layer <- dmplot$stat_movingaverages(data = data2,         ggplot2$aes(x = datetime, short = ema_short, long = ema_long),         alpha = list(mavg = 0.5),         colour = list(\"cyan\", \"magenta\")     )  bb_layer <- dmplot$stat_bollingerbands(data = data2,         ggplot2$aes(ymin = bb_lower, mavg = bb_mavg, ymax = bb_upper),         colour = list(\"pink\", \"cyan\", \"cyan\")     )  print(candle_plot + ema_layer + bb_layer)"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"macd","dir":"","previous_headings":"Getting started - Finance > Working with and plotting financial data","what":"MACD","title":"Framework written in high-performance C++ and ggplot2 for financial, bioinformatics, and time series data analysis","text":"Plotting MACD (moving average convergence divergence) indicator:  Now let’s plot light theme:","code":"data2 <- dt$copy(data)  data2[, c(\"macd\", \"macd_signal\") := dmplot$macd(close, s = 12, l = 26, k = 9)] data2[, macd_diff := macd - macd_signal]  tail(data2[, .(datetime, close, macd, macd_signal, macd_diff)]) #>               datetime   close      macd macd_signal     macd_diff #>                 <POSc>   <num>     <num>       <num>         <num> #> 1: 2024-07-13 00:00:00 57835.5 0.1416409   0.1010757  0.0405651391 #> 2: 2024-07-13 01:00:00 57879.7 0.1474963   0.1103599  0.0371364367 #> 3: 2024-07-13 02:00:00 57942.8 0.1591054   0.1201090  0.0389964272 #> 4: 2024-07-13 03:00:00 57818.5 0.1492232   0.1259318  0.0232913873 #> 5: 2024-07-13 04:00:00 57779.8 0.1344384   0.1276331  0.0068052725 #> 6: 2024-07-13 05:00:00 57820.6 0.1269544   0.1274974 -0.0005429806 macd_plot <- ggplot2$ggplot(data2, ggplot2$aes(x = datetime)) +     ## ------------------------------------     dmplot$stat_macd(         ggplot2$aes(macd = macd, macd_signal = macd_signal, macd_diff = macd_diff)     ) +     ggplot2$scale_x_datetime(         date_breaks = \"12 hour\", date_labels = \"%Y-%m-%d %H:%M\"     ) +     ggplot2$scale_y_continuous(n.breaks = 15) +     ggplot2$labs(         title = paste(ticker, \"- MACD\"),         x = \"Date\",         y = \"MACD Value\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(         axis.text.x = ggplot2$element_text(angle = 45, hjust = 1),         panel.grid.minor = ggplot2::element_blank()     )  print(macd_plot) macd_plot +     dmplot$theme_dereck_light() +     ggplot2$theme(         axis.text.x = ggplot2$element_text(angle = 45, hjust = 1),         panel.grid.minor = ggplot2::element_blank()     )"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"monte-carlo-simulation","dir":"","previous_headings":"Getting started - Finance","what":"Monte Carlo simulation","title":"Framework written in high-performance C++ and ggplot2 for financial, bioinformatics, and time series data analysis","text":"demonstrate use dmplot::MonteCarlo() R6 class uses C++ hood makes executing Monte Carlo simulation extremely simple. Create MonteCarlo object Run simulation Plot results","code":"box::use(dmplot[ MonteCarlo ])  data2 <- dt$copy(data)  monte <- MonteCarlo$new(data, number_sims = 1500, project_days = 30)  # run Monte Carlo simulation monte$carlo()  monte$plot_prices() monte$plot_distribution() monte$plot_prices_and_predictions()"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"getting-started---bioinformatics","dir":"","previous_headings":"","what":"Getting started - Bioinformatics","title":"Framework written in high-performance C++ and ggplot2 for financial, bioinformatics, and time series data analysis","text":"dmplot offers host functions working bioinformatics data. demonstrate use dmplot::Volcano() R6 class plot volcano plot. dmplot imposes convention standard data expects, exchange offers ease use efficiency plotting analysing data.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"volcano-plot","dir":"","previous_headings":"Getting started - Bioinformatics","what":"Volcano plot","title":"Framework written in high-performance C++ and ggplot2 for financial, bioinformatics, and time series data analysis","text":"volcano plot can generated 3 easy steps.","code":"# 1. load the data data(diff_expr_res, package = \"dmplot\")  head(diff_expr_res) #>       feature     log2FC  p_value      fdr #>        <char>      <num>    <num>    <num> #> 1: nCvahjxZZe -4.4653827 1.84e-12 2.95e-08 #> 2: xokTmQulss -4.1254298 2.77e-10 2.23e-06 #> 3: EsqEEnrrMA -0.7639582 6.92e-10 3.70e-06 #> 4: MesqnUNFSM -1.3692713 1.79e-09 7.20e-06 #> 5: vHRmtdhRnW -0.6481394 3.48e-09 1.12e-05 #> 6: HHvlskYCEL -3.1067641 9.15e-09 2.45e-05  # 2. create the Volcano object volc <- dmplot$Volcano$new(diff_expr_res)  # 3. plot the volcano plot volc$plot_volcano()"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"benchmarking-dmplots-high-performance-c-technical-indicators","dir":"","previous_headings":"","what":"Benchmarking dmplot’s high-performance C++ technical indicators","title":"Framework written in high-performance C++ and ggplot2 for financial, bioinformatics, and time series data analysis","text":"simple demonstration benchmark dmplot’s Bolinger Bands implementation vs TTR package. Note despite using version wrapped return list TTR implementation still significantly slower dmplot’s C++ implementation.","code":"box::use(microbenchmark[ microbenchmark ]) box::use(TTR[ BBands ])  ttr_bb_wrapped <- function(close, n = 2, sd = 2) {     return(as.list(as.data.frame(BBands(close, n = n, sd = sd)))) }  benchmark_reps <- 10L time_interval <- 5L standard_dev <- 2L  single_micro <- microbenchmark(     ttr_bb_naked = BBands(data$close, n = time_interval, sd = standard_dev),     ttr_bb_wrapped = ttr_bb_wrapped(data$close, n = time_interval, sd = standard_dev),     dmplot_bb = dmplot$bb(data$close, n = time_interval, sd = standard_dev),      times = benchmark_reps )   ggplot2$autoplot(single_micro) +     dmplot$theme_dereck_dark() +     ggplot2$geom_violin(ggplot2$aes(fill = expr), linewidth = 0.25) +     ggplot2$scale_fill_manual(         values = c(\"ttr_bb_naked\" = \"red\", \"ttr_bb_wrapped\" = \"red\", \"dmplot_bb\" = \"green\")     ) +     ggplot2$labs(         title = \"dmpplot vs TTR BBands\"     ) +     ggplot2$theme(legend.position = \"none\")"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Comparison Class — Comparison","title":"Comparison Class — Comparison","text":"Comparison Class Comparison Class","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Comparison.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Comparison Class — Comparison","text":"R6 class represents comparison two groups samples. class contains comparison name, group order, comparison table. includes methods initialise, print, validate data.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Comparison.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Comparison Class — Comparison","text":"comparison_name Character. name comparison. group_order Character vector. order groups comparison, length 2.  first element treated \"control\" group, second \"test\" group. comparison_table data.table contains group, sample, condition information comparison.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/reference/Comparison.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Comparison Class — Comparison","text":"Comparison$new() Comparison$print() Comparison$clone()","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Comparison.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Comparison Class — Comparison","text":"Create new Comparison object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Comparison.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison Class — Comparison","text":"","code":"Comparison$new(comparison_name, group_order, comparison_table)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison Class — Comparison","text":"comparison_name character string representing name comparison.  Must length 1 exceed 100 characters. group_order character vector specifying order groups comparison.  Must length 2. comparison_table data.table contains group sample information comparison.         two columns, named \"group\" \"sample\". \"group\" column identifies         clinical group sample belongs, \"sample\" column lists         names/IDs samples. groups table match names specified         `group_order`. Print summary Comparison object.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/reference/Comparison.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison Class — Comparison","text":"","code":"Comparison$print()"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Comparison.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Comparison Class — Comparison","text":"None. method called side effect printing console. Validate Comparison object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Comparison.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Comparison Class — Comparison","text":"objects class cloneable method.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Comparison.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Comparison Class — Comparison","text":"","code":"Comparison$clone(deep = FALSE)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Comparison.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comparison Class — Comparison","text":"deep Whether make deep clone.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Comparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comparison Class — Comparison","text":"","code":"comparison <- Comparison$new(   comparison_name = \"Treatment vs Control\",   group_order = c(\"Control\", \"Treatment\"),   comparison_table = data.table::data.table(     group = c(\"Control\", \"Control\", \"Treatment\", \"Treatment\"),     sample = c(\"Sample1\", \"Sample2\", \"Sample3\", \"Sample4\")   ) ) #> Treatment vs Control: deriving condition \"control\", \"test\" from group_order argument: control - Control, test - Treatment print(comparison) #> Comparison R6 object #> ----------------- #> Comparison Name:  Treatment vs Control  #> Group Order:  Control, Treatment  #> Comparison Table: #>       group  sample condition #> 1   Control Sample1   control #> 2   Control Sample2   control #> 3 Treatment Sample3      test #> 4 Treatment Sample4      test"},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Simulation R6 Class — MonteCarlo","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"R6 class performing Monte Carlo simulations financial time series data. class provides methods data preparation, simulation execution, result visualization.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"MonteCarlo class uses historical price data calculate volatility perform Monte Carlo simulations future price movements. leverages C++ implementation Monte Carlo algorithm efficiency.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"data data.table containing historical price data. simulation_results data.table containing results Monte Carlo simulation. end_prices data.table containing final prices simulation path. log_historical Logical. Whether use log returns historical volatility calculation. number_sims Integer. number simulation paths generate. project_days Integer. number days project future. start_date POSIXct. start date simulation (last date historical data). verbose Logical. Whether print progress messages.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"results list containing simulation results end prices.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"MonteCarlo$new() MonteCarlo$carlo() MonteCarlo$plot_prices() MonteCarlo$plot_distribution() MonteCarlo$plot_prices_and_predictions() MonteCarlo$clone()","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"Create new MonteCarlo object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"","code":"MonteCarlo$new(   dt,   log_historical = FALSE,   number_sims = 1000,   project_days = 30,   verbose = FALSE )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"dt data.table containing historical price data. log_historical Logical. Whether use log returns historical volatility calculation. number_sims Integer. number simulation paths generate. project_days Integer. number days project future. verbose Logical. Whether print progress messages.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"method-carlo-","dir":"Reference","previous_headings":"","what":"Method carlo()","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"Run Monte Carlo simulation.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"","code":"MonteCarlo$carlo()"},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"method-plot-prices-","dir":"Reference","previous_headings":"","what":"Method plot_prices()","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"Plot simulated price paths.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"","code":"MonteCarlo$plot_prices()"},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"ggplot object showing simulated price paths.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"method-plot-distribution-","dir":"Reference","previous_headings":"","what":"Method plot_distribution()","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"Plot distribution final prices.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"","code":"MonteCarlo$plot_distribution()"},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"ggplot object showing distribution final prices.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"method-plot-prices-and-predictions-","dir":"Reference","previous_headings":"","what":"Method plot_prices_and_predictions()","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"Plot historical prices simulated future prices.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"","code":"MonteCarlo$plot_prices_and_predictions()"},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"ggplot object showing historical simulated prices.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"objects class cloneable method.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"","code":"MonteCarlo$clone(deep = FALSE)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/MonteCarlo.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Simulation R6 Class — MonteCarlo","text":"deep Whether make deep clone.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Component Analysis (PCA) Class — Pca","title":"Principal Component Analysis (PCA) Class — Pca","text":"`Pca` class implements Principal Component Analysis, dimensionality reduction technique widely used data analysis visualisation. class provides methods performing PCA dataset, visualising results, interpreting output.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Principal Component Analysis (PCA) Class — Pca","text":"PCA powerful technique analysing high-dimensional data, gene expression data bioinformatics. works transforming data new coordinate system axes (principal components) ordered amount variance explain. PCA process involves several steps: 1. Standardisation:    PCA begins dataset n-dimensions (demonstration, genes    dimensions samples observations). data standardised, transforming    dimension mean 0 standard deviation 1. 2. Covariance Matrix Computation:    covariance matrix computed. matrix indicates covariance    (shared variance) pair dimensions. covariance different    dimensions used understand correlation structure original dimensions. 3. Eigendecomposition:    covariance matrix decomposed eigenvectors eigenvalues.    eigenvector represents principal component, linear combination    original dimensions. associated eigenvalue represents amount variance    explained principal component. eigenvectors ordered corresponding    eigenvalues, first principal component (PC1) explains variance, followed PC2, etc. 4. Selection Principal Components:    Depending goal analysis, principal components can    selected analysis. 'elbow method' commonly used, plot    explained variance principal component look 'elbow' plot cut-point. 5. Interpretation:    'top rotations' context PCA refer features (genes) contribute    principal component. 'rotation' matrix prcomp() gives loadings    feature onto PC. identifying features large absolute loadings, can    understand features drive separation data along principal components.    words, top rotations tell us genes important explaining    variance data along PC. class provides methods step PCA process, data preparation visualisation results. designed work kind high-dimensional numerical data, long data tabular format features rows samples columns. first column must named \"feature\" contain feature names.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Principal Component Analysis (PCA) Class — Pca","text":"data input data PCA, typically data.table features rows samples columns comparison optional Comparison object group comparisons prcomp_results Results stats::prcomp function, containing raw PCA output prcomp_refined Refined PCA results, including percentage variance explained PC top_rotations Top contributors (features) principal component scatter scatter plot first two principal components scree scree plot showing variance explained PC","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Principal Component Analysis (PCA) Class — Pca","text":"Pca$new() Pca$prcomp() Pca$print() Pca$plot_scree() Pca$plot_scatter() Pca$clone()","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Principal Component Analysis (PCA) Class — Pca","text":"Create new Pca object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Component Analysis (PCA) Class — Pca","text":"","code":"Pca$new(data, comparison = NULL)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Component Analysis (PCA) Class — Pca","text":"data data.table containing input data PCA. first column must named \"feature\". comparison optional Comparison object group comparisons","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"method-prcomp-","dir":"Reference","previous_headings":"","what":"Method prcomp()","title":"Principal Component Analysis (PCA) Class — Pca","text":"Perform Principal Component Analysis data","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Component Analysis (PCA) Class — Pca","text":"","code":"Pca$prcomp(...)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Component Analysis (PCA) Class — Pca","text":"... Additional arguments passed stats::prcomp","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Principal Component Analysis (PCA) Class — Pca","text":"NULL (results stored Pca$prcomp_results, Pca$prcomp_refined)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Principal Component Analysis (PCA) Class — Pca","text":"Print summary PCA results","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Component Analysis (PCA) Class — Pca","text":"","code":"Pca$print()"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Principal Component Analysis (PCA) Class — Pca","text":"NULL (prints console)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"method-plot-scree-","dir":"Reference","previous_headings":"","what":"Method plot_scree()","title":"Principal Component Analysis (PCA) Class — Pca","text":"Generate scree plot PCA results","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Component Analysis (PCA) Class — Pca","text":"","code":"Pca$plot_scree(num_pc = 50)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Component Analysis (PCA) Class — Pca","text":"num_pc Number principal components include plot","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Principal Component Analysis (PCA) Class — Pca","text":"ggplot2 object representing scree plot","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"method-plot-scatter-","dir":"Reference","previous_headings":"","what":"Method plot_scatter()","title":"Principal Component Analysis (PCA) Class — Pca","text":"Generate scatter plot first two principal components","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Component Analysis (PCA) Class — Pca","text":"","code":"Pca$plot_scatter(   point_default_colour = \"grey\",   point_size = 3,   point_alpha = 1,   point_labels = list(show = TRUE, size = 4, max_overlaps = 10, alpha = 0.75, font_face =     \"bold\"),   top_contributors = list(show = TRUE, truncate = 30),   title = if (!is.null(self$comparison))     stringr::str_interp(\"${self$comparison$comparison_name}: principal components 1 and 2\")     else \"Principal components 1 and 2\",   subtitle =     stringr::str_interp(\"${nrow(self$prcomp_results$x)} samples, ${ncol(self$prcomp_results$rotation)} principal components, calculated from ${nrow(self$prcomp_results$rotation)} features\"),   caption = if (top_contributors$show)     stringr::str_interp(\"Top contributors to variance:\\nPC1: ${paste0(stringr::str_trunc(names(self$top_rotations$PC1), top_contributors$truncate), collapse = \\\", \\\")}\\nPC2: ${paste0(stringr::str_trunc(names(self$top_rotations$PC2), top_contributors$truncate), collapse = \\\", \\\")}\")     else NULL )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Component Analysis (PCA) Class — Pca","text":"point_default_colour Default colour points comparison provided point_size Size points scatter plot point_alpha Alpha (transparency) points point_labels List parameters point labels top_contributors List parameters displaying top contributors title Title plot subtitle Subtitle plot caption Caption plot","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Principal Component Analysis (PCA) Class — Pca","text":"ggplot2 object representing scatter plot Filter samples based comparison object Refine PCA results easier interpretation Prepare data PCA dropping non-numerical columns","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Principal Component Analysis (PCA) Class — Pca","text":"objects class cloneable method.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Component Analysis (PCA) Class — Pca","text":"","code":"Pca$clone(deep = FALSE)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Component Analysis (PCA) Class — Pca","text":"deep Whether make deep clone.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal Component Analysis (PCA) Class — Pca","text":"","code":"# Load required packages box::use(dmplot[Pca, Comparison])  # Load example data data(feature_counts, package = \"dmplot\")  # Prepare the data data <- feature_counts[GeneBiotype == \"protein_coding\", ] colnames(data)[1] <- \"feature\"  # Create a comparison table comp_table <- data.frame(    group = c(\"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\"),    sample = c(\"T64552\", \"T64553\", \"T64554\", \"T64555\", \"T64546\", \"T64548\", \"T64549\", \"T64550\") )  # Create a Comparison object comp <- Comparison$new(     comparison_name = \"A_over_B\",     group_order = c(\"B\", \"A\"),     comparison_table = comp_table ) #> A_over_B: deriving condition \"control\", \"test\" from group_order argument: control - B, test - A  # Create a Pca object pca_obj <- Pca$new(data, comp)  # Perform PCA pca_obj$prcomp()  # Access PCA results pca_obj$data                # View the input data #>                   feature T64555 T64550 T64554 T64546 T64548 T64553 T64549 #>                    <char>  <num>  <num>  <num>  <num>  <num>  <num>  <num> #>     1: ENSMUSG00000051845     11      4     26      9      6     30     10 #>     2: ENSMUSG00000025374    366   1036    377    933    702    483   1103 #>     3: ENSMUSG00000025609    630   2005    729   1793   1788    587   1571 #>     4: ENSMUSG00000033608   1099    930    960    898   1045   1234    881 #>     5: ENSMUSG00000025916   1198   1179   1474   1227   1219   1302   1111 #>    ---                                                                     #> 21932: ENSMUSG00000079777      0      0      0      0      0      0      0 #> 21933: ENSMUSG00000095325      0      1      0      0      0      0      1 #> 21934: ENSMUSG00000063958      0      1      0      0      0      0      0 #> 21935: ENSMUSG00000096294      0      0      1      0      0      2      0 #> 21936: ENSMUSG00000095261      0      0      2      0      0      0      0 #>        T64552 #>         <num> #>     1:     22 #>     2:    298 #>     3:   1190 #>     4:    992 #>     5:   1224 #>    ---        #> 21932:      0 #> 21933:      0 #> 21934:      0 #> 21935:      0 #> 21936:      0 pca_obj$prcomp_results      # View the raw PCA results #> Standard deviations (1, .., p=8): #> [1] 1.138674e+06 8.773857e+04 6.518402e+04 4.366182e+04 2.366213e+04 #> [6] 2.021359e+04 1.856779e+04 5.074559e-10 #>  #> Rotation (n x k) = (21936 x 9): #>                   feature           PC1           PC2           PC3 #>                    <char>         <num>         <num>         <num> #>     1: ENSMUSG00000051845 -7.096769e-06 -3.435085e-06 -1.311560e-05 #>     2: ENSMUSG00000025374  2.507594e-04  2.327624e-04 -2.263580e-03 #>     3: ENSMUSG00000025609  4.829978e-04  5.629973e-04 -1.712018e-04 #>     4: ENSMUSG00000033608 -5.838886e-05 -4.247061e-04  4.967849e-04 #>     5: ENSMUSG00000025916 -4.793845e-05 -2.682115e-04  4.364476e-04 #>    ---                                                              #> 21932: ENSMUSG00000079777  0.000000e+00  0.000000e+00  0.000000e+00 #> 21933: ENSMUSG00000095325  2.104848e-07  9.823465e-07 -5.164060e-06 #> 21934: ENSMUSG00000063958  1.452822e-07 -1.861195e-06 -1.868383e-06 #> 21935: ENSMUSG00000096294 -3.440474e-07 -2.470131e-06 -1.668852e-06 #> 21936: ENSMUSG00000095261 -2.224891e-07  5.361425e-07  8.268138e-07 #>                  PC4           PC5           PC6           PC7           PC8 #>                <num>         <num>         <num>         <num>         <num> #>     1:  5.189112e-05  1.801555e-04 -1.200291e-04 -5.108678e-05  9.958967e-01 #>     2: -8.527113e-04  7.442109e-04 -1.801072e-04  1.408829e-03  1.440055e-02 #>     3:  3.257467e-03 -4.084275e-03 -2.342402e-04 -1.156612e-03  1.229453e-03 #>     4: -1.161698e-03  1.980618e-04 -3.013515e-03 -1.493341e-03  5.472309e-04 #>     5:  6.001607e-04  3.090540e-03  1.550082e-03 -9.226412e-04 -6.659177e-02 #>    ---                                                                       #> 21932:  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00 #> 21933: -1.229342e-06 -3.660716e-06  3.726451e-06 -7.625355e-06 -8.576584e-09 #> 21934:  8.114471e-07 -4.150045e-06  4.075928e-06 -1.056032e-05 -1.770769e-08 #> 21935: -2.191337e-06  2.016344e-05 -1.332807e-05 -9.622857e-06 -2.664305e-07 #> 21936:  3.340294e-06  1.866922e-05  2.224219e-05 -5.936117e-06 -9.170773e-08 pca_obj$prcomp_refined      # View the refined PCA results #>        PC pct_var_explained        T64555        T64550        T64554 #>    <fctr>             <num>         <num>         <num>         <num> #> 1:    PC1             98.84 -1.095036e+06  1.318588e+06 -1.009661e+06 #> 2:    PC2              0.59 -4.006736e+04 -1.002931e+05  1.444540e+04 #> 3:    PC3              0.32  2.585091e+04 -5.557073e+04  1.229583e+04 #> 4:    PC4              0.15 -6.332709e+04  1.082834e+04  2.228724e+04 #> 5:    PC5              0.04 -3.031154e+04 -1.626517e+04  3.658489e+04 #> 6:    PC6              0.03  1.610595e+04  1.165766e+04  3.180771e+04 #> 7:    PC7              0.03  1.252223e+04 -2.548565e+04 -7.162936e+03 #> 8:    PC8              0.00 -7.304681e-10  1.467666e-10 -7.570011e-10 #>           T64546        T64548        T64553        T64549        T64552 #>            <num>         <num>         <num>         <num>         <num> #> 1:  1.106923e+06  1.171230e+06 -1.056464e+06  5.917810e+05 -1.027361e+06 #> 2: -7.521318e+04  6.485800e+04 -7.377593e+04  1.532282e+05  5.681796e+04 #> 3:  9.713139e+03  1.223412e+05 -3.096599e+04 -9.802232e+04  1.435798e+04 #> 4:  3.058937e+04 -2.366272e+04 -2.576475e+04 -2.723327e+04  7.628288e+04 #> 5:  1.055647e+04  4.748593e+03  2.122058e+04  1.917814e+03 -2.845164e+04 #> 6: -2.616935e+03 -9.385638e+03 -3.496382e+04 -9.995481e+02 -1.160537e+04 #> 7:  3.579439e+04 -1.243312e+04 -8.030147e+03  7.083070e+03 -2.287841e+03 #> 8: -5.251044e-10 -1.228349e-09  1.467524e-09  1.514077e-09  1.135242e-10  # Create visualisations scree_plot <- pca_obj$plot_scree()    # Generate a scree plot scatter_plot <- pca_obj$plot_scatter() # Generate a scatter plot  # Print the scree plot print(scree_plot)   # Print the scatter plot print(scatter_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Volcano Plot R6 Class — Volcano","title":"Volcano Plot R6 Class — Volcano","text":"R6 class creating managing volcano plots differential expression analysis. class provides methods data preparation, plotting, customisation volcano plots.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Volcano Plot R6 Class — Volcano","text":"Volcano class uses differential expression data create volcano plots, highlighting significantly - -regulated features based log2 fold change chosen statistical measure (e.g., FDR p-value).","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Volcano Plot R6 Class — Volcano","text":"data data.table containing differential expression data. statistic Character. statistic used significance (default: \"fdr\"). statistic_cutoff Numeric. cutoff value chosen statistic (default: 0.25). log2_cutoff Numeric. log2 fold change cutoff significance (default: log2(1.5)). head_labels Integer. number top features label plot (default: 10).","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Volcano Plot R6 Class — Volcano","text":"Volcano$new() Volcano$process() Volcano$plot_volcano() Volcano$clone()","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Volcano Plot R6 Class — Volcano","text":"Create new Volcano object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano Plot R6 Class — Volcano","text":"","code":"Volcano$new(   data = data.table(),   statistic = \"fdr\",   statistic_cutoff = 0.25,   log2_cutoff = log2(1.5),   head_labels = 10 )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volcano Plot R6 Class — Volcano","text":"data data.table containing differential expression data. statistic Character. statistic used significance (default: \"fdr\"). statistic_cutoff Numeric. cutoff value chosen statistic (default: 0.25). log2_cutoff Numeric. log2 fold change cutoff significance (default: log2(1.5)). head_labels Integer. number top features label plot (default: 10).","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"method-process-","dir":"Reference","previous_headings":"","what":"Method process()","title":"Volcano Plot R6 Class — Volcano","text":"Process input data plotting.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano Plot R6 Class — Volcano","text":"","code":"Volcano$process()"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"method-plot-volcano-","dir":"Reference","previous_headings":"","what":"Method plot_volcano()","title":"Volcano Plot R6 Class — Volcano","text":"Create volcano plot.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano Plot R6 Class — Volcano","text":"","code":"Volcano$plot_volcano(   plot_title = \"Volcano Plot\",   plot_subtitle = \"\",   plot_caption = \"\",   plot_y_lab = stringr::str_interp(\"-log10(${self$statistic})\"),   plot_x_lab = \"log2(fold change)\",   legend_position = \"bottom\",   plot_theme = \"dark\",   label = TRUE )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volcano Plot R6 Class — Volcano","text":"plot_title Character. Title plot. plot_subtitle Character. Subtitle plot. plot_caption Character. Caption plot. plot_y_lab Character. Label y-axis. plot_x_lab Character. Label x-axis. legend_position Character. Position legend (default: \"bottom\"). plot_theme Character. Theme plot (default: \"dark\"). label Logical. Whether add labels points (default: TRUE).","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Volcano Plot R6 Class — Volcano","text":"ggplot object representing volcano plot.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Volcano Plot R6 Class — Volcano","text":"objects class cloneable method.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano Plot R6 Class — Volcano","text":"","code":"Volcano$clone(deep = FALSE)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/Volcano.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volcano Plot R6 Class — Volcano","text":"deep Whether make deep clone.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/bb.html","id":null,"dir":"Reference","previous_headings":"","what":"Bollinger Bands — bb","title":"Bollinger Bands — bb","text":"Bollinger Bands","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/bb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bollinger Bands — bb","text":"","code":"bb(price, n, sd = 2L)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/bb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bollinger Bands — bb","text":"price numeric vector prices n period moving average sd number standard deviations bands","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/bb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bollinger Bands — bb","text":"list containing lower band, moving average, upper band, percentage B","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/btc_1_year_hourly.html","id":null,"dir":"Reference","previous_headings":"","what":"Bitcoin Hourly Data (One Year) — btc_1_year_hourly","title":"Bitcoin Hourly Data (One Year) — btc_1_year_hourly","text":"dataset containing hourly Bitcoin price volume data one-year period.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/btc_1_year_hourly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bitcoin Hourly Data (One Year) — btc_1_year_hourly","text":"","code":"btc_1_year_hourly"},{"path":"https://dereckmezquita.github.io/dmplot/reference/btc_1_year_hourly.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Bitcoin Hourly Data (One Year) — btc_1_year_hourly","text":"data frame 8756 rows 8 variables: symbol Character. Trading symbol, e.g., 'BTC/USDT' datetime POSIXct. Date time observation open Numeric. Opening price hour high Numeric. Highest price hour low Numeric. Lowest price hour close Numeric. Closing price hour volume Numeric. Trading volume hour turnover Numeric. Trading turnover (USD) hour","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/btc_1_year_hourly.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Bitcoin Hourly Data (One Year) — btc_1_year_hourly","text":"Cryptocurrency exchange data, retrieved using `get_market_data()` function","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/btc_1_year_hourly.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bitcoin Hourly Data (One Year) — btc_1_year_hourly","text":"dataset created using `get_market_data()` function,    fetching data BTC/USDT pair one-year period hourly frequency.   data spans July 14, 2023 July 13, 2024.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/btc_1_year_hourly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bitcoin Hourly Data (One Year) — btc_1_year_hourly","text":"","code":"data(btc_1_year_hourly) head(btc_1_year_hourly) #>      symbol            datetime    open    high     low   close    volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>     <num> #> 1: BTC/USDT 2023-07-14 05:00:00 31391.6 31401.0 31350.7 31361.0  56.62707 #> 2: BTC/USDT 2023-07-14 06:00:00 31360.9 31383.2 31288.1 31296.5  88.97855 #> 3: BTC/USDT 2023-07-14 07:00:00 31296.5 31343.1 31071.6 31099.5 228.04175 #> 4: BTC/USDT 2023-07-14 08:00:00 31099.5 31284.4 31085.0 31245.5 133.14915 #> 5: BTC/USDT 2023-07-14 09:00:00 31245.5 31245.5 31143.0 31192.8  83.95030 #> 6: BTC/USDT 2023-07-14 10:00:00 31192.7 31205.9 31094.4 31174.5  75.78023 #>    turnover #>       <num> #> 1:  1776388 #> 2:  2788156 #> 3:  7117764 #> 4:  4155515 #> 5:  2619031 #> 6:  2360569 summary(btc_1_year_hourly$close) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   25021   29859   43081   46748   63625   73574"},{"path":"https://dereckmezquita.github.io/dmplot/reference/cite_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Print citation information for this package — cite_package","title":"Print citation information for this package — cite_package","text":"Print citation information package","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/cite_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print citation information for this package — cite_package","text":"","code":"cite_package()"},{"path":"https://dereckmezquita.github.io/dmplot/reference/collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a vector into a single string — collapse","title":"Collapse a vector into a single string — collapse","text":"function collapses vector single string, elements separated comma space.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a vector into a single string — collapse","text":"","code":"collapse(x)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse a vector into a single string — collapse","text":"x vector elements collapse.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/collapse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse a vector into a single string — collapse","text":"single string elements vector separated comma space.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/collapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse a vector into a single string — collapse","text":"","code":"collapse(c(\"a\", \"b\", \"c\")) #> Error in collapse(c(\"a\", \"b\", \"c\")): could not find function \"collapse\" # Returns: \"a, b, c\""},{"path":"https://dereckmezquita.github.io/dmplot/reference/diff_expr_res.html","id":null,"dir":"Reference","previous_headings":"","what":"Volcano Differential Expression Data — diff_expr_res","title":"Volcano Differential Expression Data — diff_expr_res","text":"dataset containing differential expression analysis results creating volcano plots.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/diff_expr_res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano Differential Expression Data — diff_expr_res","text":"","code":"diff_expr_res"},{"path":"https://dereckmezquita.github.io/dmplot/reference/diff_expr_res.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Volcano Differential Expression Data — diff_expr_res","text":"data frame rows 4 variables: feature Feature identifier log2FC Log2 fold change p_value P-value fdr False Discovery Rate","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/diff_expr_res.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Volcano Differential Expression Data — diff_expr_res","text":"Differential expression analysis","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/ema.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential Moving Average — ema","title":"Exponential Moving Average — ema","text":"Exponential Moving Average","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/ema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential Moving Average — ema","text":"","code":"ema(price, n, wilder = FALSE)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/ema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential Moving Average — ema","text":"price numeric vector prices n period EMA wilder Whether use Wilder's smoothing","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/ema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential Moving Average — ema","text":"numeric vector containing EMA values","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/feature_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature Counts for Genes — feature_counts","title":"Feature Counts for Genes — feature_counts","text":"dataset containing feature counts various genes across different samples.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/feature_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature Counts for Genes — feature_counts","text":"","code":"feature_counts"},{"path":"https://dereckmezquita.github.io/dmplot/reference/feature_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Feature Counts for Genes — feature_counts","text":"data frame rows variables: GeneID Ensembl gene identifier GeneSymbol Gene symbol GeneBiotype Type gene B24568, B24560, ... Counts sample","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/feature_counts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Feature Counts for Genes — feature_counts","text":"Gene expression study","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/fib.html","id":null,"dir":"Reference","previous_headings":"","what":"Fibonacci Retracement Levels Calculate the Fibonacci retracement levels for a given price range — fib","title":"Fibonacci Retracement Levels Calculate the Fibonacci retracement levels for a given price range — fib","text":"Fibonacci Retracement Levels Calculate Fibonacci retracement levels given price range","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/fib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fibonacci Retracement Levels Calculate the Fibonacci retracement levels for a given price range — fib","text":"","code":"fib(high, low)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/fib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fibonacci Retracement Levels Calculate the Fibonacci retracement levels for a given price range — fib","text":"high high price low low price","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/fib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fibonacci Retracement Levels Calculate the Fibonacci retracement levels for a given price range — fib","text":"list containing retracement levels prices","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/ggplot2-ggproto.html","id":null,"dir":"Reference","previous_headings":"","what":"StatShadedDateRange — StatShadedDateRange","title":"StatShadedDateRange — StatShadedDateRange","text":"StatShadedDateRange","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a character string is empty — is.empty.character","title":"Check if a character string is empty — is.empty.character","text":"function checks character string zero characters.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a character string is empty — is.empty.character","text":"","code":"# S3 method for character is.empty(x)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a character string is empty — is.empty.character","text":"x character string","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a character string is empty — is.empty.character","text":"logical value: TRUE string empty, FALSE otherwise","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a character string is empty — is.empty.character","text":"","code":"str1 <- \"\" is.empty(str1)  # Returns TRUE #> [1] TRUE  str2 <- \"Hello\" is.empty(str2)  # Returns FALSE #> [1] FALSE"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a data.frame is empty — is.empty.data.frame","title":"Check if a data.frame is empty — is.empty.data.frame","text":"function checks data.frame zero rows zero columns.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a data.frame is empty — is.empty.data.frame","text":"","code":"# S3 method for data.frame is.empty(x)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a data.frame is empty — is.empty.data.frame","text":"x data.frame object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a data.frame is empty — is.empty.data.frame","text":"logical value: TRUE data.frame empty, FALSE otherwise","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a data.frame is empty — is.empty.data.frame","text":"","code":"df1 <- data.frame() is.empty(df1)  # Returns TRUE #> [1] TRUE  df2 <- data.frame(a = 1:3, b = letters[1:3]) is.empty(df2)  # Returns FALSE #> [1] FALSE"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default method for is.empty — is.empty.default","title":"Default method for is.empty — is.empty.default","text":"function called .empty applied object class specific method defined.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default method for is.empty — is.empty.default","text":"","code":"# S3 method for default is.empty(x)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default method for is.empty — is.empty.default","text":"x R object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default method for is.empty — is.empty.default","text":"function always throws error","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default method for is.empty — is.empty.default","text":"","code":"if (FALSE) { # This will throw an error is.empty(quote(x)) }"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a factor is empty — is.empty.factor","title":"Check if a factor is empty — is.empty.factor","text":"function checks factor length zero.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a factor is empty — is.empty.factor","text":"","code":"# S3 method for factor is.empty(x)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a factor is empty — is.empty.factor","text":"x factor object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a factor is empty — is.empty.factor","text":"logical value: TRUE factor empty, FALSE otherwise","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a factor is empty — is.empty.factor","text":"","code":"fct1 <- factor(levels = c(\"A\", \"B\")) is.empty(fct1)  # Returns TRUE #> [1] TRUE  fct2 <- factor(c(\"A\", \"B\", \"A\")) is.empty(fct2)  # Returns FALSE #> [1] FALSE"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an object is empty — is.empty","title":"Check if an object is empty — is.empty","text":"function checks object considered empty based class.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an object is empty — is.empty","text":"","code":"is.empty(x)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an object is empty — is.empty","text":"x R object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an object is empty — is.empty","text":"logical value: TRUE object empty, FALSE otherwise","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an object is empty — is.empty","text":"","code":"# Vector vec <- numeric(0) is.empty(vec)  # Returns TRUE #> Error in is.empty.default(vec): is.empty is not defined for objects of class numeric  # List lst <- list() is.empty(lst)  # Returns TRUE #> [1] TRUE  # Data frame df <- data.frame() is.empty(df)  # Returns TRUE #> [1] TRUE"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.list.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a list is empty — is.empty.list","title":"Check if a list is empty — is.empty.list","text":"function checks list length zero.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a list is empty — is.empty.list","text":"","code":"# S3 method for list is.empty(x)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a list is empty — is.empty.list","text":"x list object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a list is empty — is.empty.list","text":"logical value: TRUE list empty, FALSE otherwise","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a list is empty — is.empty.list","text":"","code":"lst1 <- list() is.empty(lst1)  # Returns TRUE #> [1] TRUE  lst2 <- list(a = 1, b = 2) is.empty(lst2)  # Returns FALSE #> [1] FALSE"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a matrix is empty — is.empty.matrix","title":"Check if a matrix is empty — is.empty.matrix","text":"function checks matrix zero rows zero columns.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a matrix is empty — is.empty.matrix","text":"","code":"# S3 method for matrix is.empty(x)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a matrix is empty — is.empty.matrix","text":"x matrix object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a matrix is empty — is.empty.matrix","text":"logical value: TRUE matrix empty, FALSE otherwise","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a matrix is empty — is.empty.matrix","text":"","code":"mat1 <- matrix(nrow = 0, ncol = 5) is.empty(mat1)  # Returns TRUE #> [1] TRUE  mat2 <- matrix(1:6, nrow = 2) is.empty(mat2)  # Returns FALSE #> [1] FALSE"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector is empty — is.empty.vector","title":"Check if a vector is empty — is.empty.vector","text":"function checks vector length zero.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector is empty — is.empty.vector","text":"","code":"# S3 method for vector is.empty(x)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector is empty — is.empty.vector","text":"x vector object","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a vector is empty — is.empty.vector","text":"logical value: TRUE vector empty, FALSE otherwise","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/is.empty.vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a vector is empty — is.empty.vector","text":"","code":"vec1 <- numeric(0) is.empty(vec1)  # Returns TRUE #> Error in is.empty.default(vec1): is.empty is not defined for objects of class numeric  vec2 <- c(1, 2, 3) is.empty(vec2)  # Returns FALSE #> Error in is.empty.default(vec2): is.empty is not defined for objects of class numeric"},{"path":"https://dereckmezquita.github.io/dmplot/reference/macd.html","id":null,"dir":"Reference","previous_headings":"","what":"Moving Average Convergence Divergence (MACD) — macd","title":"Moving Average Convergence Divergence (MACD) — macd","text":"Moving Average Convergence Divergence (MACD)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/macd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moving Average Convergence Divergence (MACD) — macd","text":"","code":"macd(price, s, l, k, percent = TRUE)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/macd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moving Average Convergence Divergence (MACD) — macd","text":"price numeric vector prices s short-term period l long-term period k signal line period percent Whether return MACD percentage","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/macd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moving Average Convergence Divergence (MACD) — macd","text":"list containing MACD signal line values","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/mom.html","id":null,"dir":"Reference","previous_headings":"","what":"Momentum — mom","title":"Momentum — mom","text":"Momentum","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/mom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Momentum — mom","text":"","code":"mom(price, n)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/mom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Momentum — mom","text":"price numeric vector prices n period momentum calculation","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/mom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Momentum — mom","text":"numeric vector containing momentum values","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/monte_carlo.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Simulation in C++ — monte_carlo","title":"Monte Carlo Simulation in C++ — monte_carlo","text":"function performs Monte Carlo simulation price movements using C++.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/monte_carlo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Simulation in C++ — monte_carlo","text":"","code":"monte_carlo(seed_price, daily_vol, num_sims, num_days)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/monte_carlo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Simulation in C++ — monte_carlo","text":"seed_price numeric. starting price simulation. daily_vol numeric. daily volatility price movements. num_sims integer. number simulation paths generate. num_days integer. number days simulate path.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/monte_carlo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Simulation in C++ — monte_carlo","text":"list containing two data frames: simulations data frame columns 'close' (simulated prices) 'simulation' (simulation index) end_prices data frame columns 'close' (final prices) 'simulation' (simulation index)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/monte_carlo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monte Carlo Simulation in C++ — monte_carlo","text":"function uses geometric Brownian motion model simulate price movements. simulation path, generates daily returns using normal distribution mean 0 standard deviation equal provided daily volatility. function implemented C++ improved performance, especially large numbers simulations long time horizons.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/monte_carlo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monte Carlo Simulation in C++ — monte_carlo","text":"","code":"if (FALSE) { results <- monte_carlo(seed_price = 100, daily_vol = 0.02, num_sims = 1000, num_days = 30) head(results$simulations) head(results$end_prices) }"},{"path":"https://dereckmezquita.github.io/dmplot/reference/printCapture.html","id":null,"dir":"Reference","previous_headings":"","what":"Print and capture the output of an object — printCapture","title":"Print and capture the output of an object — printCapture","text":"function prints object captures output string.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/printCapture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print and capture the output of an object — printCapture","text":"","code":"printCapture(obj)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/printCapture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print and capture the output of an object — printCapture","text":"obj object print capture output .","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/printCapture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print and capture the output of an object — printCapture","text":"string representing printed output object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/printCapture.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print and capture the output of an object — printCapture","text":"useful printing data.frames log files etc.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/printCapture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print and capture the output of an object — printCapture","text":"","code":"df <- data.frame(a = 1:3, b = letters[1:3]) printCapture(df) #> [1] \"  a b\\n1 1 a\\n2 2 b\\n3 3 c\" # Returns a string representation of the data frame"},{"path":"https://dereckmezquita.github.io/dmplot/reference/roc.html","id":null,"dir":"Reference","previous_headings":"","what":"Rate of Change (ROC) — roc","title":"Rate of Change (ROC) — roc","text":"Rate Change (ROC)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/roc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rate of Change (ROC) — roc","text":"","code":"roc(price, n, type = \"c\")"},{"path":"https://dereckmezquita.github.io/dmplot/reference/roc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rate of Change (ROC) — roc","text":"price numeric vector prices n period ROC calculation type type ROC calculation: 'c' continuous (default) 'd' discrete","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/roc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rate of Change (ROC) — roc","text":"numeric vector containing ROC values","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/rsi.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative Strength Index (RSI) — rsi","title":"Relative Strength Index (RSI) — rsi","text":"Relative Strength Index (RSI)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/rsi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Strength Index (RSI) — rsi","text":"","code":"rsi(price, n, method = \"e\")"},{"path":"https://dereckmezquita.github.io/dmplot/reference/rsi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Strength Index (RSI) — rsi","text":"price numeric vector prices n period RSI calculation method method average calculation: 'e' EMA (default) 's' SMA","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/rsi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relative Strength Index (RSI) — rsi","text":"numeric vector containing RSI values","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/sma.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Moving Average (SMA) — sma","title":"Simple Moving Average (SMA) — sma","text":"Simple Moving Average (SMA)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/sma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Moving Average (SMA) — sma","text":"","code":"sma(price, n)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/sma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Moving Average (SMA) — sma","text":"price numeric vector prices n period SMA calculation","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/sma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Moving Average (SMA) — sma","text":"numeric vector containing SMA values","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":null,"dir":"Reference","previous_headings":"","what":"Bollinger bands `ggplot2` layer — stat_bollingerbands","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"`stat_bollingerbands` `ggplot2` layer allows plot Bollinger bands `ggplot2` plot either providing function calculate bands providing column names required metrics `ggplot2::aes` argument previously calculated. free use whatever algorithm/function wish long : 1. using function must return named `list` - ordered - following elements: `\"bb_lower\"`, `\"bb_mavg\"`, `\"bb_upper\"`, `\"bb_pct\"`. 2. using previously calculated metrics must provide `ggplot2::aes` values; `aes` must `ymin`, `mavg`, `ymax`. See examples details.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"","code":"stat_bollingerbands(   mapping = NULL,   data = NULL,   geom = \"ribbon\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   alpha = list(ribbon = 0.1, mavg = 0.5),   linetype = list(border = \"dotted\", mavg = 4),   colour = list(ribbon = \"yellow\", border = \"magenta\", mavg = \"magenta\"),   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"mapping `ggplot2::aes` object (required - default `NULL`). data `data.table` object (required - default `NULL`). alpha `list` two elements \"ribbon\" \"mavg\". alpha values ribbon moving average lines (optional - default `list(ribbon = 0.1, mavg = 0.5)`). linetype `list` two elements \"border\" \"mavg\". line types border moving average lines (optional - default `list(border = \"dotted\", mavg = 4)`). ... Additional arguments passed `ggplot2::layer`. linewidth `list` two elements \"border\" \"mavg\". line widths border moving average lines (optional - default `list(border = 1, mavg = 1)`). colours `list` two elements \"ribbon\", \"border\", \"mavg\". colours ribbon, border, moving average lines (optional - default `list(ribbon = \"yellow\", border = \"magenta\", mavg = \"magenta\")`).","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"`ggplot2` layer.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"`ggplot2` extension; used `+` operator adding layer `ggplot2` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"stat_movingaverages understands following aesthetics (required aesthetics bold): x -- datetime (x-axis) ymin -- required lower bounds band (y-axis) ymax -- required upper bounds band (y-axis) mavg -- required center line band (y-axis)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"Dereck Mezquita","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"","code":"# \\donttest{  # get some financial data # kucoin is private package - you can use any data source ticker <- \"BTC/USDT\"  dt <- kucoin::get_market_data(     symbols = ticker,     from = \"2022-11-28 15:29:43 EST\", # lubridate::now() - lubridate::days(7),     to = \"2022-12-05 15:29:31 EST\",# lubridate::now(),     frequency = \"1 hour\" )  dt #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover #>         <num> #>   1:  5301836 #>   2: 13557348 #>   3:  8270203 #>   4:  4082464 #>   5:  3653147 #>  ---          #> 165:  3058929 #> 166:  3447960 #> 167:  1815447 #> 168:  2416907 #> 169:  8630174  # we need a function that calculates the indicator for us # typically I like to write my own functions in C++; in this case we will use TTR's # the stat expects a named list to be returned - we redefine ttr bb <- function(close, n = 10, sd = 2) {     return(as.list(as.data.frame(TTR::BBands(close, n = n, sd = sd)))) }  # calculate the short and long moving averages dt[, c(\"bb_lower\", \"bb_mavg\", \"bb_upper\", \"bb_pct\") := bb(close, n = 10, sd = 2)] #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover bb_lower  bb_mavg bb_upper        bb_pct #>         <num>    <num>    <num>    <num>         <num> #>   1:  5301836       NA       NA       NA            NA #>   2: 13557348       NA       NA       NA            NA #>   3:  8270203       NA       NA       NA            NA #>   4:  4082464       NA       NA       NA            NA #>   5:  3653147       NA       NA       NA            NA #>  ---                                                   #> 165:  3058929 17207.96 17301.26 17394.56  0.5575587312 #> 166:  3447960 17212.50 17302.61 17392.72  0.2330342843 #> 167:  1815447 17229.77 17305.83 17381.89 -0.0004838333 #> 168:  2416907 17201.48 17290.90 17380.32  0.0208028612 #> 169:  8630174 17117.69 17265.48 17413.27 -0.1173496659  dt |>     ggplot2::ggplot(ggplot2::aes(         x = datetime,         open = open,         close = close,         high = high,         low = low,         group = symbol     )) +     ## ------------------------------------     dmplot::stat_candlestick() +     ## ------------------------------------     # provide the colnames to the calculated indicators as aes values     dmplot::stat_bollingerbands(ggplot2::aes(ymin = bb_lower, mavg = bb_mavg, ymax = bb_upper), colour = list(\"pink\", \"cyan\", \"cyan\")) +     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     )  # }"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":null,"dir":"Reference","previous_headings":"","what":"Candlesticks financial `ggplot2` layer — stat_candlestick","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"Candlesticks financial `ggplot2` layer","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"","code":"stat_candlestick(   mapping = NULL,   data = NULL,   geom = \"linerange\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   colours = list(up = \"#55BE8B\", down = \"#ED4D5D\", no_change = \"#535453\"),   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"mapping `ggplot2::aes` object (required - default `NULL`). `x`: x-axis value, usually representing time. `open`: opening price. `close`: closing price. `high`: highest price time range. `low`: lowest price time range. `group`: (optional) grouping variable. data `data.table` object (required - default `NULL`). colours `list` three elements \"\", \"\", \"no_change\". colours candlesticks positive change price action, negative change change respectively. ... Additional arguments passed `ggplot2::layer`.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"`ggplot2::layer` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"`ggplot2` extension; used `+` operator adding layer `ggplot2` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"Dereck Mezquita","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"","code":"# get some financial data # kucoin is a private package - you can use any data source ticker <- \"BTC/USDT\"  dt <- kucoin::get_market_data(     symbols = ticker,     from = \"2022-11-28 15:29:43 EST\", # lubridate::now() - lubridate::days(7),     to = \"2022-12-05 15:29:31 EST\",# lubridate::now(),     frequency = \"1 hour\" )  dt #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover #>         <num> #>   1:  5301836 #>   2: 13557348 #>   3:  8270203 #>   4:  4082464 #>   5:  3653147 #>  ---          #> 165:  3058929 #> 166:  3447960 #> 167:  1815447 #> 168:  2416907 #> 169:  8630174  dt |>     ggplot2::ggplot(ggplot2::aes(         x = datetime,         open = open,         close = close,         high = high,         low = low,         group = symbol     )) +     ## ------------------------------------     dmplot::stat_candlestick() +     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":null,"dir":"Reference","previous_headings":"","what":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"`stat_macd` `ggplot2` layer allows plot `ggplot2` layer moving average convergence divergence (macd) providing column names `ggplot2::aes` previously calculated metrics. free use whatever algorithm desire; result line plot overlayed histogram. use layer provide `ggplot2::aes` values `x` (datetime x-axis) `macd` (y-axis) `macd_signal` (y-axis) `macd_diff` (y-axis). See examples details.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"","code":"stat_macd(   mapping = NULL,   data = NULL,   geom = \"line\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   alpha_lines = 0.75,   alpha_histogram = 0.5,   colour_lines = list(macd = \"blue\", macd_signal = \"red\"),   colour_histogram = list(positive = NA_character_, negative = NA_character_),   fill_histogram = list(positive = \"green\", negative = \"red\"),   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"mapping `ggplot2::aes` object (required - default `NULL`). data `data.table` object (required - default `NULL`). alpha_lines `numeric` vector length one; alpha lines (optional - default `0.75`). alpha_histogram `numeric` vector length one; alpha histogram (optional - default `0.5`). colour_lines named unnamed `list` two elements \"macd\" \"macd_signal\" (optional - default `list(macd = \"blue\", macd_signal = \"red\")`). colour_histogram named unnamed `list` two elements \"positive\" \"negative\" (optional - default `list(positive = NA_character_, negative = NA_character_)`). fill_histogram named unnamed `list` two elements \"positive\" \"negative\" (optional - default `list(positive = \"green\", negative = \"red\")`). linewidth `numeric` vector length one; linewidth line (optional - default `1.75`).","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"`ggplot2::layer` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"`ggplot2` extension; used `+` operator adding layer `ggplot2` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"stat_movingaverages understands following aesthetics (required aesthetics bold): x -- datetime (x-axis) macd -- y-axis macd_signal -- y-axis macd_diff -- y-axis","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"Dereck Mezquita","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"","code":"# get some financial data # kucoin is private package - you can use any data source ticker <- \"BTC/USDT\"  dt <- kucoin::get_market_data(     symbols = ticker,     from = \"2022-11-28 15:29:43 EST\", # lubridate::now() - lubridate::days(7),     to = \"2022-12-05 15:29:31 EST\",# lubridate::now(),     frequency = \"1 hour\" )  dt #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover #>         <num> #>   1:  5301836 #>   2: 13557348 #>   3:  8270203 #>   4:  4082464 #>   5:  3653147 #>  ---          #> 165:  3058929 #> 166:  3447960 #> 167:  1815447 #> 168:  2416907 #> 169:  8630174  # we need a function that calculates the indicator for us # typically I like to write my own functions in C++; in this case we will use TTR's # the stat expects a named list to be returned - we redefine ttr macd <- function(x, s = 12, l = 26, k = 9) {as.list(as.data.frame(TTR::MACD(x, s, l, k)))}  # macd(dt$close) dt[, c(\"macd\", \"macd_signal\") := macd(close, s = 12, l = 26, k = 9)] #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover      macd macd_signal #>         <num>     <num>       <num> #>   1:  5301836        NA          NA #>   2: 13557348        NA          NA #>   3:  8270203        NA          NA #>   4:  4082464        NA          NA #>   5:  3653147        NA          NA #>  ---                                #> 165:  3058929 0.4731906   0.4505607 #> 166:  3447960 0.4303121   0.4465110 #> 167:  1815447 0.3803542   0.4332796 #> 168:  2416907 0.3255538   0.4117344 #> 169:  8630174 0.2223466   0.3738569 dt[, macd_diff := macd - macd_signal] #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover      macd macd_signal   macd_diff #>         <num>     <num>       <num>       <num> #>   1:  5301836        NA          NA          NA #>   2: 13557348        NA          NA          NA #>   3:  8270203        NA          NA          NA #>   4:  4082464        NA          NA          NA #>   5:  3653147        NA          NA          NA #>  ---                                            #> 165:  3058929 0.4731906   0.4505607  0.02262998 #> 166:  3447960 0.4303121   0.4465110 -0.01619881 #> 167:  1815447 0.3803542   0.4332796 -0.05292542 #> 168:  2416907 0.3255538   0.4117344 -0.08618062 #> 169:  8630174 0.2223466   0.3738569 -0.15151027  na.omit(dt) |>     ggplot2::ggplot(ggplot2::aes(x = datetime)) +     dmplot::stat_macd(ggplot2::aes(macd = macd, macd_signal = macd_signal, macd_diff = macd_diff)) +     ## ------------------------------------     # provide the colnames to the calculated indicators as aes values     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":null,"dir":"Reference","previous_headings":"","what":"Moving averages `ggplot2` layer — stat_movingaverages","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"`stat_movingaverages` `ggplot2` layer allows plot moving averages `ggplot2` plot either providing column names `ggplot2::aes` previously calculated metrics. free use whatever algorithm desire; result two line plots one short moving average one long moving average. use layer provide `ggplot2::aes` values `x` (datetime x-axis) `short` `long` (y-axis). See examples details.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"","code":"stat_movingaverages(   mapping = NULL,   data = NULL,   geom = \"line\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   linewidth = 1.75,   alpha = 0.75,   colour = list(short = \"yellow\", long = \"purple\"),   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"mapping `ggplot2::aes` object (required - default `NULL`). data `data.table` object (required - default `NULL`). linewidth `numeric` vector length one; width line (optional - default `1.75`). alpha `numeric` vector length one; alpha line (optional - default `0.75`). colour named unnamed `list` three elements \"short\" \"long\". colours short long moving averages (optional - default `list(short = \"red\", long = \"blue\")`).","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"`ggplot2::layer` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"`ggplot2` extension; used `+` operator adding layer `ggplot2` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"stat_movingaverages understands following aesthetics (required aesthetics bold): x -- datetime (x-axis) short -- values short moving average (y-axis). long -- values long moving average (y-axis)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"Dereck Mezquita","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"","code":"# get some financial data # kucoin is private package - you can use any data source ticker <- \"BTC/USDT\"  dt <- kucoin::get_market_data(     symbols = ticker,     from = \"2022-11-28 15:29:43 EST\", # lubridate::now() - lubridate::days(7),     to = \"2022-12-05 15:29:31 EST\", # lubridate::now(),     frequency = \"1 hour\" )  dt #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover #>         <num> #>   1:  5301836 #>   2: 13557348 #>   3:  8270203 #>   4:  4082464 #>   5:  3653147 #>  ---          #> 165:  3058929 #> 166:  3447960 #> 167:  1815447 #> 168:  2416907 #> 169:  8630174  # we need a function that calculates the indicator for us # typically I like to write my own functions in C++; in this case we will use TTR's # the stat expects a named list to be returned - we redefine ttr ema <- function(close, n = 2, wilder = TRUE) {     return(as.list(as.data.frame(TTR::EMA(close, n = n, wilder = wilder)))) }  # calculate the short and long moving averages dt[, ema_short := ema(close, n = 10, wilder = TRUE)] #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover ema_short #>         <num>     <num> #>   1:  5301836        NA #>   2: 13557348        NA #>   3:  8270203        NA #>   4:  4082464        NA #>   5:  3653147        NA #>  ---                    #> 165:  3058929  17226.35 #> 166:  3447960  17229.17 #> 167:  1815447  17229.22 #> 168:  2416907  17226.82 #> 169:  8630174  17212.44 dt[, ema_long := ema(close, n = 50, wilder = TRUE)] #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover ema_short ema_long #>         <num>     <num>    <num> #>   1:  5301836        NA       NA #>   2: 13557348        NA       NA #>   3:  8270203        NA       NA #>   4:  4082464        NA       NA #>   5:  3653147        NA       NA #>  ---                             #> 165:  3058929  17226.35 17017.34 #> 166:  3447960  17229.17 17022.08 #> 167:  1815447  17229.22 17026.23 #> 168:  2416907  17226.82 17029.81 #> 169:  8630174  17212.44 17030.88  dt |>     ggplot2::ggplot(ggplot2::aes(         x = datetime,         open = open,         close = close,         high = high,         low = low,         group = symbol     )) +     ## ------------------------------------     dmplot::stat_candlestick() +     ## ------------------------------------     # provide the colnames to the calculated indicators as aes values     dmplot::stat_movingaverages(ggplot2::aes(short = ema_short, long = ema_long), alpha = list(mavg = 0.5)) +     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"function creates ggplot2 layer shades date ranges based grouped data. particularly useful highlighting specific periods time series data.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"","code":"stat_shade_ranges(   mapping = NULL,   data = NULL,   geom = \"linerange\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"mapping Set aesthetic mappings created aes. Must include `x` dates `group` categorizing ranges. data data displayed layer. NULL, default, data inherited plot data specified call ggplot. geom geometric object use display data. Default \"linerange\". position Position adjustment, either string, result call position adjustment function. Default \"identity\". na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. inherit.aes FALSE, overrides default aesthetics, rather combining . ... arguments passed layer. often aesthetics, used set aesthetic fixed value.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"ggplot2 layer object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"","code":"if (FALSE) { library(ggplot2) library(data.table)  # Create sample data dt <- data.table(     datetime = seq(as.POSIXct(\"2023-01-01\"), as.POSIXct(\"2023-12-31\"), by = \"day\"),     close = runif(365, 100, 200),     call = sample(c(\"buy\", \"sell\", \"none\"), 365, replace = TRUE, prob = c(0.3, 0.3, 0.4)) )  # Create plot with shaded ranges ggplot(dt, aes(x = datetime)) +     geom_line(aes(y = close), linewidth = 1.5, colour = \"white\") +     stat_shade_ranges(aes(group = call, fill = call), alpha = 0.25) +     scale_fill_manual(         name = \"Call\",         values = c(\"buy\" = \"green\", \"sell\" = \"red\", \"none\" = \"gray\")     ) +     theme_minimal() +     labs(title = \"Stock Price with Buy/Sell Signals\", x = \"Date\", y = \"Price\") }"},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_dark.html","id":null,"dir":"Reference","previous_headings":"","what":"Dereck's ggplot theme (dark) — theme_dereck_dark","title":"Dereck's ggplot theme (dark) — theme_dereck_dark","text":"Dereck's ggplot theme (dark)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_dark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dereck's ggplot theme (dark) — theme_dereck_dark","text":"","code":"theme_dereck_dark(base_size = 12, base_family = \"\")"},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_dark.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dereck's ggplot theme (dark) — theme_dereck_dark","text":"Dereck Mezquita function allows add derecksnotes theme ggplot graphics.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_dark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dereck's ggplot theme (dark) — theme_dereck_dark","text":"","code":"iris |>     ggplot2::ggplot(ggplot2::aes(x = Sepal.Length, y = Sepal.Width)) +     ggplot2::geom_point(ggplot2::aes(color = Species, shape = Species)) +     ggplot2::labs(title = \"Iris data\", subtitle = \"Classic data\", x = \"Sepal Length\", y = \"Sepal Width\") +     ggplot2::facet_grid(~Species) +     dmplot::theme_dereck_dark()   data.frame(year = time(nhtemp), tmps = as.matrix(nhtemp)) |>     ggplot2::ggplot(ggplot2::aes(x = year, y = tmps)) +     ggplot2::geom_line() +     # geom_hline(yintercept = 0, size = 1, colour = \"#333333\") +     ggplot2::labs(title = \"New Hampshire yearly temperatures\", subtitle = \"Collected between 1912 and 1971\", x = \"Year\", y = \"Average temperature\") +     dmplot::theme_dereck_dark() #> Don't know how to automatically pick scale for object of type <ts>. Defaulting #> to continuous."},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_light.html","id":null,"dir":"Reference","previous_headings":"","what":"Dereck's ggplot theme (light) — theme_dereck_light","title":"Dereck's ggplot theme (light) — theme_dereck_light","text":"Dereck's ggplot theme (light)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dereck's ggplot theme (light) — theme_dereck_light","text":"","code":"theme_dereck_light(base_size = 11, base_family = \"\")"},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_light.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dereck's ggplot theme (light) — theme_dereck_light","text":"Dereck Mezquita function allows add derecksnotes theme ggplot graphics.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_light.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dereck's ggplot theme (light) — theme_dereck_light","text":"","code":"iris |>     ggplot2::ggplot(ggplot2::aes(x = Sepal.Length, y = Sepal.Width)) +     ggplot2::geom_point(ggplot2::aes(color = Species, shape = Species)) +     ggplot2::labs(title = \"Iris data\", subtitle = \"Classic data\", x = \"Sepal Length\", y = \"Sepal Width\") +     ggplot2::facet_grid(~Species) +     dmplot::theme_dereck_light()   data.frame(year = time(nhtemp), tmps = as.matrix(nhtemp)) |>     ggplot2::ggplot(ggplot2::aes(x = year, y = tmps)) +     ggplot2::geom_line() +     # geom_hline(yintercept = 0, size = 1, colour = \"#333333\") +     ggplot2::labs(title = \"New Hampshire yearly temperatures\", subtitle = \"Collected between 1912 and 1971\", x = \"Year\", y = \"Average temperature\") +     dmplot::theme_dereck_light() #> Don't know how to automatically pick scale for object of type <ts>. Defaulting #> to continuous."},{"path":"https://dereckmezquita.github.io/dmplot/reference/to.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data.table to a data.frame — to.data.frame","title":"Convert a data.table to a data.frame — to.data.frame","text":"function converts data.table data.frame, optionally setting row names specified column.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/to.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data.table to a data.frame — to.data.frame","text":"","code":"to.data.frame(x, id.col = NULL, drop.id.col = TRUE)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/to.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data.table to a data.frame — to.data.frame","text":"x data.table object convert. id.col name column use row names. NULL, row names set. Default NULL. drop.id.col Logical. TRUE id.col specified, id column removed setting row names. Default TRUE.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/to.data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data.table to a data.frame — to.data.frame","text":"data.frame converted input data.table.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/to.data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data.table to a data.frame — to.data.frame","text":"","code":"library(data.table) dt <- data.table(id = letters[1:3], value = 1:3) to.data.frame(dt, id.col = \"id\") #>   value #> a     1 #> b     2 #> c     3 # Returns a data.frame with row names set to \"a\", \"b\", \"c\" and \"id\" column removed"},{"path":"https://dereckmezquita.github.io/dmplot/reference/valueCoordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Find coordinates of a specific value in an object — valueCoordinates","title":"Find coordinates of a specific value in an object — valueCoordinates","text":"function finds coordinates (row column indices) specific value object. value provided, finds coordinates NA values.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/valueCoordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find coordinates of a specific value in an object — valueCoordinates","text":"","code":"valueCoordinates(obj, value = NA)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/valueCoordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find coordinates of a specific value in an object — valueCoordinates","text":"obj object find value . matrix data frame. value value find object. Default NA.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/valueCoordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find coordinates of a specific value in an object — valueCoordinates","text":"data frame column row indices value object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/valueCoordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find coordinates of a specific value in an object — valueCoordinates","text":"","code":"mat <- matrix(1:9, nrow = 3) mat[2, 2] <- NA valueCoordinates(mat) #>    column   row #>     <int> <int> #> 1:      2     2 # Returns a data frame with the coordinates of NA valueCoordinates(mat, 5) #> Empty data.table (0 rows and 2 cols): column,row # Returns a data frame with the coordinates of the value 5"}]
