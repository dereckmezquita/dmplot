[{"path":"https://dereckmezquita.github.io/dmplot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dereck Mezquita. Author, maintainer.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mezquita D (2024). dmplot: plotting tool kit financial time series data. R package version 1.2.0, https://github.com/dereckmezquita/dmplot.","code":"@Manual{,   title = {dmplot: A plotting tool kit for financial and time series data},   author = {Dereck Mezquita},   year = {2024},   note = {R package version 1.2.0},   url = {https://github.com/dereckmezquita/dmplot}, }"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"dmplot","dir":"","previous_headings":"","what":"dmplot","title":"A plotting tool kit for financial and time series data","text":"Dereck’s library plotting financial time series data well helper functions plotting style Dereck.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A plotting tool kit for financial and time series data","text":"can install development version dmplot using:","code":"# install.packages(\"remotes\") remotes::install_github(\"dereckmezquita/dmplot\")"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"financial-data","dir":"","previous_headings":"","what":"Financial data","title":"A plotting tool kit for financial and time series data","text":"must provide function calculates indicators returns list can plotted.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"get-financial-data","dir":"","previous_headings":"Financial data","what":"Get financial data","title":"A plotting tool kit for financial and time series data","text":"Shown kucoin package interacting KuCoin api. can use source financial data long pass variables stat correctly. Note demonstration dataset included demo/data/ directory.","code":"ticker <- \"BTC/USDT\"  dt <- kucoin::get_market_data(     symbols = ticker,     from = \"2022-11-28 15:29:43 EST\", # lubridate::now() - lubridate::days(7),     to = \"2022-12-05 15:29:31 EST\",# lubridate::now(),     frequency = \"1 hour\" )  dt #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>  ---                                                                       #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #> 1 variable(s) not shown: [turnover <num>]"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"plot-financial-data","dir":"","previous_headings":"Financial data","what":"Plot financial data","title":"A plotting tool kit for financial and time series data","text":"demonstrate use stats plotting financial data along theme functions included package: dmplot::stat_candlesticks() dmplot::stat_bollingerbands() dmplot::stat_movingaverages() dmplot::stat_macd() theme functions styling: dmplot::theme_dereck_dark() dmplot::theme_dereck_light()  Plotting MACD (moving average convergence divergence) indicator:  Now let’s plot light theme:","code":"## ------ # redifine our function to return a list ema <- function(x, n, wilder = TRUE) {     return(as.list(as.data.frame(TTR::EMA(x, n = n, wilder = wilder)))) }  bb <- function(close, n = 2, sd = 2) {     return(as.list(as.data.frame(TTR::BBands(close, n = n, sd = sd)))) }  # calculate the short and long moving averages dt[, ema_short := ema(close, n = 10, wilder = TRUE)] dt[, ema_long := ema(close, n = 50, wilder = TRUE)]  # calculate the bollinger bands dt[, c(\"bb_lower\", \"bb_mavg\", \"bb_upper\", \"bb_pct\") := bb(close, n = 10, sd = 2)]  ## ------ # plot p <- dt |>     ggplot2::ggplot(ggplot2::aes(         x = datetime,         open = open,         close = close,         high = high,         low = low,         group = symbol     )) +     ## ------------------------------------     dmplot::stat_candlestick() +     ## ------------------------------------     # moving averages     dmplot::stat_movingaverages(ggplot2::aes(         short = ema_short,         long = ema_long     ), alpha = list(mavg = 0.5)) +     dmplot::stat_bollingerbands(ggplot2::aes(         ymin = bb_lower,         mavg = bb_mavg,         ymax = bb_upper     ), colour = list(\"pink\", \"cyan\", \"cyan\")) +     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     )  p macd <- function(x, s = 12, l = 26, k = 9) {     return(as.list(as.data.frame(TTR::MACD(x, s, l, k)))) }  # calculate the macd dt[, c(\"macd\", \"macd_signal\") := macd(close, s = 12, l = 26, k = 9)] dt[, macd_diff := macd - macd_signal]  na.omit(dt) |>     ggplot2::ggplot(ggplot2::aes(x = datetime)) +     ## ------------------------------------     dmplot::stat_macd(ggplot2::aes(macd = macd, macd_signal = macd_signal, macd_diff = macd_diff)) +     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     ) p + dmplot::theme_dereck_light() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/ggplot2-ggproto.html","id":null,"dir":"Reference","previous_headings":"","what":"StatShadedDateRange — StatShadedDateRange","title":"StatShadedDateRange — StatShadedDateRange","text":"StatShadedDateRange","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":null,"dir":"Reference","previous_headings":"","what":"Bollinger bands `ggplot2` layer — stat_bollingerbands","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"`stat_bollingerbands` `ggplot2` layer allows plot Bollinger bands `ggplot2` plot either providing function calculate bands providing column names required metrics `ggplot2::aes` argument previously calculated. free use whatever algorithm/function wish long : 1. using function must return named `list` - ordered - following elements: `\"bb_lower\"`, `\"bb_mavg\"`, `\"bb_upper\"`, `\"bb_pct\"`. 2. using previously calculated metrics must provide `ggplot2::aes` values; `aes` must `ymin`, `mavg`, `ymax`. See examples details.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"","code":"stat_bollingerbands(   mapping = NULL,   data = NULL,   geom = \"ribbon\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   alpha = list(ribbon = 0.1, mavg = 0.5),   linetype = list(border = \"dotted\", mavg = 4),   colour = list(ribbon = \"yellow\", border = \"magenta\", mavg = \"magenta\"),   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"mapping `ggplot2::aes` object (required - default `NULL`). data `data.table` object (required - default `NULL`). alpha `list` two elements \"ribbon\" \"mavg\". alpha values ribbon moving average lines (optional - default `list(ribbon = 0.1, mavg = 0.5)`). linetype `list` two elements \"border\" \"mavg\". line types border moving average lines (optional - default `list(border = \"dotted\", mavg = 4)`). ... Additional arguments passed `ggplot2::layer`. linewidth `list` two elements \"border\" \"mavg\". line widths border moving average lines (optional - default `list(border = 1, mavg = 1)`). colours `list` two elements \"ribbon\", \"border\", \"mavg\". colours ribbon, border, moving average lines (optional - default `list(ribbon = \"yellow\", border = \"magenta\", mavg = \"magenta\")`).","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"`ggplot2` layer.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"`ggplot2` extension; used `+` operator adding layer `ggplot2` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"stat_movingaverages understands following aesthetics (required aesthetics bold): x – datetime (x-axis) ymin – required lower bounds band (y-axis) ymax – required upper bounds band (y-axis) mavg – required center line band (y-axis)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"Dereck Mezquita","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"","code":"# \\donttest{  # get some financial data # kucoin is private package - you can use any data source ticker <- \"BTC/USDT\"  dt <- kucoin::get_market_data(     symbols = ticker,     from = \"2022-11-28 15:29:43 EST\", # lubridate::now() - lubridate::days(7),     to = \"2022-12-05 15:29:31 EST\",# lubridate::now(),     frequency = \"1 hour\" ) #> Error in loadNamespace(x): there is no package called ‘kucoin’  dt #> function (x, df, ncp, log = FALSE)  #> { #>     if (missing(ncp))  #>         .Call(C_dt, x, df, log) #>     else .Call(C_dnt, x, df, ncp, log) #> } #> <bytecode: 0x5622dd4de9a0> #> <environment: namespace:stats>  # we need a function that calculates the indicator for us # typically I like to write my own functions in C++; in this case we will use TTR's # the stat expects a named list to be returned - we redefine ttr bb <- function(close, n = 10, sd = 2) {     return(as.list(as.data.frame(TTR::BBands(close, n = n, sd = sd)))) }  # calculate the short and long moving averages dt[, c(\"bb_lower\", \"bb_mavg\", \"bb_upper\", \"bb_pct\") := bb(close, n = 10, sd = 2)] #> Error in `:=`(c(\"bb_lower\", \"bb_mavg\", \"bb_upper\", \"bb_pct\"), bb(close,     n = 10, sd = 2)): could not find function \":=\"  dt |>     ggplot2::ggplot(ggplot2::aes(         x = datetime,         open = open,         close = close,         high = high,         low = low,         group = symbol     )) +     ## ------------------------------------     dmplot::stat_candlestick() +     ## ------------------------------------     # provide the colnames to the calculated indicators as aes values     dmplot::stat_bollingerbands(ggplot2::aes(ymin = bb_lower, mavg = bb_mavg, ymax = bb_upper), colour = list(\"pink\", \"cyan\", \"cyan\")) +     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     ) #> Error in ggplot2::ggplot(dt, ggplot2::aes(x = datetime, open = open, close = close,     high = high, low = low, group = symbol)): `data` cannot be a function. #> ℹ Have you misspelled the `data` argument in `ggplot()` # }"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":null,"dir":"Reference","previous_headings":"","what":"Candlesticks financial `ggplot2` layer — stat_candlestick","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"Candlesticks financial `ggplot2` layer","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"","code":"stat_candlestick(   mapping = NULL,   data = NULL,   geom = \"linerange\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   colours = list(up = \"#55BE8B\", down = \"#ED4D5D\", no_change = \"#535453\"),   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"mapping `ggplot2::aes` object (required - default `NULL`). `x`: x-axis value, usually representing time. `open`: opening price. `close`: closing price. `high`: highest price time range. `low`: lowest price time range. `group`: (optional) grouping variable. data `data.table` object (required - default `NULL`). colours `list` three elements \"\", \"\", \"no_change\". colours candlesticks positive change price action, negative change change respectively. ... Additional arguments passed `ggplot2::layer`.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"`ggplot2::layer` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"`ggplot2` extension; used `+` operator adding layer `ggplot2` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"Dereck Mezquita","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"","code":"# get some financial data # kucoin is a private package - you can use any data source ticker <- \"BTC/USDT\"  dt <- kucoin::get_market_data(     symbols = ticker,     from = \"2022-11-28 15:29:43 EST\", # lubridate::now() - lubridate::days(7),     to = \"2022-12-05 15:29:31 EST\",# lubridate::now(),     frequency = \"1 hour\" ) #> Error in loadNamespace(x): there is no package called ‘kucoin’  dt #> function (x, df, ncp, log = FALSE)  #> { #>     if (missing(ncp))  #>         .Call(C_dt, x, df, log) #>     else .Call(C_dnt, x, df, ncp, log) #> } #> <bytecode: 0x5622dd4de9a0> #> <environment: namespace:stats>  dt |>     ggplot2::ggplot(ggplot2::aes(         x = datetime,         open = open,         close = close,         high = high,         low = low,         group = symbol     )) +     ## ------------------------------------     dmplot::stat_candlestick() +     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     ) #> Error in ggplot2::ggplot(dt, ggplot2::aes(x = datetime, open = open, close = close,     high = high, low = low, group = symbol)): `data` cannot be a function. #> ℹ Have you misspelled the `data` argument in `ggplot()`"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":null,"dir":"Reference","previous_headings":"","what":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"`stat_macd` `ggplot2` layer allows plot `ggplot2` layer moving average convergence divergence (macd) providing column names `ggplot2::aes` previously calculated metrics. free use whatever algorithm desire; result line plot overlayed histogram. use layer provide `ggplot2::aes` values `x` (datetime x-axis) `macd` (y-axis) `macd_signal` (y-axis) `macd_diff` (y-axis). See examples details.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"","code":"stat_macd(   mapping = NULL,   data = NULL,   geom = \"line\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   alpha_lines = 0.75,   alpha_histogram = 0.5,   colour_lines = list(macd = \"blue\", macd_signal = \"red\"),   colour_histogram = list(positive = NA_character_, negative = NA_character_),   fill_histogram = list(positive = \"green\", negative = \"red\"),   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"mapping `ggplot2::aes` object (required - default `NULL`). data `data.table` object (required - default `NULL`). alpha_lines `numeric` vector length one; alpha lines (optional - default `0.75`). alpha_histogram `numeric` vector length one; alpha histogram (optional - default `0.5`). colour_lines named unnamed `list` two elements \"macd\" \"macd_signal\" (optional - default `list(macd = \"blue\", macd_signal = \"red\")`). colour_histogram named unnamed `list` two elements \"positive\" \"negative\" (optional - default `list(positive = NA_character_, negative = NA_character_)`). fill_histogram named unnamed `list` two elements \"positive\" \"negative\" (optional - default `list(positive = \"green\", negative = \"red\")`). linewidth `numeric` vector length one; linewidth line (optional - default `1.75`).","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"`ggplot2::layer` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"`ggplot2` extension; used `+` operator adding layer `ggplot2` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"stat_movingaverages understands following aesthetics (required aesthetics bold): x – datetime (x-axis) macd – y-axis macd_signal – y-axis macd_diff – y-axis","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"Dereck Mezquita","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"","code":"# get some financial data # kucoin is private package - you can use any data source ticker <- \"BTC/USDT\"  dt <- kucoin::get_market_data(     symbols = ticker,     from = \"2022-11-28 15:29:43 EST\", # lubridate::now() - lubridate::days(7),     to = \"2022-12-05 15:29:31 EST\",# lubridate::now(),     frequency = \"1 hour\" ) #> Error in loadNamespace(x): there is no package called ‘kucoin’  dt #> function (x, df, ncp, log = FALSE)  #> { #>     if (missing(ncp))  #>         .Call(C_dt, x, df, log) #>     else .Call(C_dnt, x, df, ncp, log) #> } #> <bytecode: 0x5622dd4de9a0> #> <environment: namespace:stats>  # we need a function that calculates the indicator for us # typically I like to write my own functions in C++; in this case we will use TTR's # the stat expects a named list to be returned - we redefine ttr macd <- function(x, s = 12, l = 26, k = 9) {as.list(as.data.frame(TTR::MACD(x, s, l, k)))}  # macd(dt$close) dt[, c(\"macd\", \"macd_signal\") := macd(close, s = 12, l = 26, k = 9)] #> Error in `:=`(c(\"macd\", \"macd_signal\"), macd(close, s = 12, l = 26, k = 9)): could not find function \":=\" dt[, macd_diff := macd - macd_signal] #> Error in `:=`(macd_diff, macd - macd_signal): could not find function \":=\"  na.omit(dt) |>     ggplot2::ggplot(ggplot2::aes(x = datetime)) +     dmplot::stat_macd(ggplot2::aes(macd = macd, macd_signal = macd_signal, macd_diff = macd_diff)) +     ## ------------------------------------     # provide the colnames to the calculated indicators as aes values     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     ) #> Error in ggplot2::ggplot(na.omit(dt), ggplot2::aes(x = datetime)): `data` cannot be a function. #> ℹ Have you misspelled the `data` argument in `ggplot()`"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":null,"dir":"Reference","previous_headings":"","what":"Moving averages `ggplot2` layer — stat_movingaverages","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"`stat_movingaverages` `ggplot2` layer allows plot moving averages `ggplot2` plot either providing column names `ggplot2::aes` previously calculated metrics. free use whatever algorithm desire; result two line plots one short moving average one long moving average. use layer provide `ggplot2::aes` values `x` (datetime x-axis) `short` `long` (y-axis). See examples details.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"","code":"stat_movingaverages(   mapping = NULL,   data = NULL,   geom = \"line\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   linewidth = 1.75,   alpha = 0.75,   colour = list(short = \"yellow\", long = \"purple\"),   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"mapping `ggplot2::aes` object (required - default `NULL`). data `data.table` object (required - default `NULL`). linewidth `numeric` vector length one; width line (optional - default `1.75`). alpha `numeric` vector length one; alpha line (optional - default `0.75`). colour named unnamed `list` three elements \"short\" \"long\". colours short long moving averages (optional - default `list(short = \"red\", long = \"blue\")`).","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"`ggplot2::layer` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"`ggplot2` extension; used `+` operator adding layer `ggplot2` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"stat_movingaverages understands following aesthetics (required aesthetics bold): x – datetime (x-axis) short – values short moving average (y-axis). long – values long moving average (y-axis)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"Dereck Mezquita","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"","code":"# get some financial data # kucoin is private package - you can use any data source ticker <- \"BTC/USDT\"  dt <- kucoin::get_market_data(     symbols = ticker,     from = \"2022-11-28 15:29:43 EST\", # lubridate::now() - lubridate::days(7),     to = \"2022-12-05 15:29:31 EST\", # lubridate::now(),     frequency = \"1 hour\" ) #> Error in loadNamespace(x): there is no package called ‘kucoin’  dt #> function (x, df, ncp, log = FALSE)  #> { #>     if (missing(ncp))  #>         .Call(C_dt, x, df, log) #>     else .Call(C_dnt, x, df, ncp, log) #> } #> <bytecode: 0x5622dd4de9a0> #> <environment: namespace:stats>  # we need a function that calculates the indicator for us # typically I like to write my own functions in C++; in this case we will use TTR's # the stat expects a named list to be returned - we redefine ttr ema <- function(close, n = 2, wilder = TRUE) {     return(as.list(as.data.frame(TTR::EMA(close, n = n, wilder = wilder)))) }  # calculate the short and long moving averages dt[, ema_short := ema(close, n = 10, wilder = TRUE)] #> Error in `:=`(ema_short, ema(close, n = 10, wilder = TRUE)): could not find function \":=\" dt[, ema_long := ema(close, n = 50, wilder = TRUE)] #> Error in `:=`(ema_long, ema(close, n = 50, wilder = TRUE)): could not find function \":=\"  dt |>     ggplot2::ggplot(ggplot2::aes(         x = datetime,         open = open,         close = close,         high = high,         low = low,         group = symbol     )) +     ## ------------------------------------     dmplot::stat_candlestick() +     ## ------------------------------------     # provide the colnames to the calculated indicators as aes values     dmplot::stat_movingaverages(ggplot2::aes(short = ema_short, long = ema_long), alpha = list(mavg = 0.5)) +     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     ) #> Error in ggplot2::ggplot(dt, ggplot2::aes(x = datetime, open = open, close = close,     high = high, low = low, group = symbol)): `data` cannot be a function. #> ℹ Have you misspelled the `data` argument in `ggplot()`"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"function creates ggplot2 layer shades date ranges based grouped data. particularly useful highlighting specific periods time series data.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"","code":"stat_shade_ranges(   mapping = NULL,   data = NULL,   geom = \"linerange\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"mapping Set aesthetic mappings created aes. Must include `x` dates `group` categorizing ranges. data data displayed layer. NULL, default, data inherited plot data specified call ggplot. geom geometric object use display data. Default \"linerange\". position Position adjustment, either string, result call position adjustment function. Default \"identity\". na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. inherit.aes FALSE, overrides default aesthetics, rather combining . ... arguments passed layer. often aesthetics, used set aesthetic fixed value.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"ggplot2 layer object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"","code":"if (FALSE) { # \\dontrun{ library(ggplot2) library(data.table)  # Create sample data dt <- data.table(     datetime = seq(as.POSIXct(\"2023-01-01\"), as.POSIXct(\"2023-12-31\"), by = \"day\"),     close = runif(365, 100, 200),     call = sample(c(\"buy\", \"sell\", \"none\"), 365, replace = TRUE, prob = c(0.3, 0.3, 0.4)) )  # Create plot with shaded ranges ggplot(dt, aes(x = datetime)) +     geom_line(aes(y = close), linewidth = 1.5, colour = \"white\") +     stat_shade_ranges(aes(group = call, fill = call), alpha = 0.25) +     scale_fill_manual(         name = \"Call\",         values = c(\"buy\" = \"green\", \"sell\" = \"red\", \"none\" = \"gray\")     ) +     theme_minimal() +     labs(title = \"Stock Price with Buy/Sell Signals\", x = \"Date\", y = \"Price\") } # }"},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_dark.html","id":null,"dir":"Reference","previous_headings":"","what":"Dereck's ggplot theme (dark) — theme_dereck_dark","title":"Dereck's ggplot theme (dark) — theme_dereck_dark","text":"Dereck's ggplot theme (dark)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_dark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dereck's ggplot theme (dark) — theme_dereck_dark","text":"","code":"theme_dereck_dark(base_size = 12, base_family = \"\")"},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_dark.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dereck's ggplot theme (dark) — theme_dereck_dark","text":"Dereck Mezquita function allows add derecksnotes theme ggplot graphics.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_dark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dereck's ggplot theme (dark) — theme_dereck_dark","text":"","code":"iris |>     ggplot2::ggplot(ggplot2::aes(x = Sepal.Length, y = Sepal.Width)) +     ggplot2::geom_point(ggplot2::aes(color = Species, shape = Species)) +     ggplot2::labs(title = \"Iris data\", subtitle = \"Classic data\", x = \"Sepal Length\", y = \"Sepal Width\") +     ggplot2::facet_grid(~Species) +     dmplot::theme_dereck_dark()   data.frame(year = time(nhtemp), tmps = as.matrix(nhtemp)) |>     ggplot2::ggplot(ggplot2::aes(x = year, y = tmps)) +     ggplot2::geom_line() +     # geom_hline(yintercept = 0, size = 1, colour = \"#333333\") +     ggplot2::labs(title = \"New Hampshire yearly temperatures\", subtitle = \"Collected between 1912 and 1971\", x = \"Year\", y = \"Average temperature\") +     dmplot::theme_dereck_dark() #> Don't know how to automatically pick scale for object of type <ts>. Defaulting #> to continuous."},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_light.html","id":null,"dir":"Reference","previous_headings":"","what":"Dereck's ggplot theme (light) — theme_dereck_light","title":"Dereck's ggplot theme (light) — theme_dereck_light","text":"Dereck's ggplot theme (light)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dereck's ggplot theme (light) — theme_dereck_light","text":"","code":"theme_dereck_light(base_size = 11, base_family = \"\")"},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_light.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dereck's ggplot theme (light) — theme_dereck_light","text":"Dereck Mezquita function allows add derecksnotes theme ggplot graphics.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_light.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dereck's ggplot theme (light) — theme_dereck_light","text":"","code":"iris |>     ggplot2::ggplot(ggplot2::aes(x = Sepal.Length, y = Sepal.Width)) +     ggplot2::geom_point(ggplot2::aes(color = Species, shape = Species)) +     ggplot2::labs(title = \"Iris data\", subtitle = \"Classic data\", x = \"Sepal Length\", y = \"Sepal Width\") +     ggplot2::facet_grid(~Species) +     dmplot::theme_dereck_light()   data.frame(year = time(nhtemp), tmps = as.matrix(nhtemp)) |>     ggplot2::ggplot(ggplot2::aes(x = year, y = tmps)) +     ggplot2::geom_line() +     # geom_hline(yintercept = 0, size = 1, colour = \"#333333\") +     ggplot2::labs(title = \"New Hampshire yearly temperatures\", subtitle = \"Collected between 1912 and 1971\", x = \"Year\", y = \"Average temperature\") +     dmplot::theme_dereck_light() #> Don't know how to automatically pick scale for object of type <ts>. Defaulting #> to continuous."}]
