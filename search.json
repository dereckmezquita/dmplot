[{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"C++ high-performance technical indicators","text":"dmplot package provides set high-performance technical indicators commonly used financial analysis. indicators implemented C++ achieve maximum computational efficiency, making suitable large-scale data analysis high-frequency trading applications. document, focus specifically discussing C++ Implementation algorithm. mathematics behind indicator, please refer documentation: dmplot documentation.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"licensing","dir":"Articles","previous_headings":"Introduction","what":"Licensing","title":"C++ high-performance technical indicators","text":"dmplot package released MIT license, allowing free use modification. Users must: Cite original author (see LICENSE details). Include license redistribution.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"c-implementation-and-performance","dir":"Articles","previous_headings":"","what":"C++ Implementation and Performance","title":"C++ high-performance technical indicators","text":"technical indicator functions dmplot implemented C++ using Rcpp framework. approach offers several advantages: Speed: C++ significantly faster pure R code, especially computationally intensive tasks. Memory efficiency: C++ allows efficient memory management, crucial dealing large datasets. Vectorisation: implementations take advantage C++’s ability efficiently process vectors data. function carefully optimised benchmarked ensure best possible performance. Users can expect implementations outperform equivalent R code setting. can beat performance C++ implementations, please open issue GitHub repository ’d love hear ! Now, let’s explore indicator, focusing mathematical foundation optimised C++ implementation.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"bollinger-bands-bb","dir":"Articles","previous_headings":"","what":"Bollinger Bands (BB)","title":"C++ high-performance technical indicators","text":"","code":"Rcpp::List bb(std::vector<double> price, int n, int sd = 2) {     // calculate the simple moving average     std::vector<double> mavg = sma(price, n);      // pre-allocate std::vector with 0 values for the standard deviation     std::vector<double> std_dev(price.size(), 0);      // calculate the standard deviation     for (int i = n - 1; i < price.size(); i++) {         // population standard deviation is used         // delta = sqrt(sum((x_i - mean) * (x_i - mean)) / n)         double sum = 0;         for (int j = i - n + 1; j <= i; j++) {             sum += std::pow(price[j] - mavg[i], 2);         }         std_dev[i] = std::sqrt(sum / (double) n);     }      // calculate the upper and lower bands     std::vector<double> upper_bound(price.size(), 0);     std::vector<double> lower_bound(price.size(), 0);     std::vector<double> pct(price.size(), 0);      for (int i = 0; i < mavg.size(); i++) {         upper_bound[i] = mavg[i] + sd * std_dev[i];         lower_bound[i] = mavg[i] - sd * std_dev[i];         pct[i] = (price[i] - lower_bound[i]) / (upper_bound[i] - lower_bound[i]);     }      List result = List::create(         _[\"bb_lower\"] = lower_bound,         _[\"bb_mavg\"] = mavg,         _[\"bb_upper\"] = upper_bound,         _[\"bb_pct\"] = pct     );      return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation","dir":"Articles","previous_headings":"Bollinger Bands (BB)","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Bollinger Bands algorithm implemented C++ using following steps: Calculate simple moving average (SMA) price data. Compute standard deviation point using rolling window. Calculate upper lower bands adding/subtracting standard deviation multiplied factor. Determine percentage B, indicates price relation bands.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance","dir":"Articles","previous_headings":"Bollinger Bands (BB)","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Optimise rolling calculations: Implement sliding window approach SMA standard deviation calculations reduce redundant computations. Parallelise computations: Utilise OpenMP std::thread perform calculations different sections data concurrently. Use SIMD instructions: Implement SIMD (Single Instruction, Multiple Data) operations vectorised calculations, especially standard deviation computation. Precompute squares: Calculate store squares price differences mean avoid repeated power operations. Memory efficiency: Consider using -place calculations possible reduce memory usage. Optimise data structures: Evaluate use efficient data structures memory layouts improved cache performance.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"exponential-moving-average-ema","dir":"Articles","previous_headings":"","what":"Exponential Moving Average (EMA)","title":"C++ high-performance technical indicators","text":"","code":"std::vector<double> ema(std::vector<double> price, int n, bool wilder = false) {     // define beta     // for EMA, wilder=FALSE (the default) uses an exponential smoothing ratio of 2/(n+1), while wilder=TRUE uses Welles Wilder's exponential smoothing ratio of 1/n     double beta = wilder ? 1.0 / n : 2.0 / ((double) n + 1.0);      // pre-allocate the vector with NA values     std::vector<double> result(price.size(), NA_REAL);      // check for non-leading NAs and get first non-NA location     int first_non_na = 0;     for (int i = 0; i < price.size(); i++) {         if (!std::isnan(price[i])) {             first_non_na = i;             break;         }     }      // if first value larger than n then throw error     if (n + first_non_na > price.size()) {         stop(\"Not enough non-NA values\");     }      // calculate the first value as the average of the first n values     double seed = 0.0;     for (int i = first_non_na; i < first_non_na + n; i++) {         // std::cout << price[i] << std::endl;         seed += price[i] / (double) n;     }      result[first_non_na + n - 1] = seed;      // calculate the ema     for (int i = first_non_na + n; i < price.size(); i++) {         result[i] = beta * price[i] + (1.0 - beta) * result[i - 1];     }          return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation-1","dir":"Articles","previous_headings":"Exponential Moving Average (EMA)","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Exponential Moving Average (EMA) algorithm implemented C++ using following steps: Calculate smoothing factor (beta) based period whether Wilder’s method used. Handle non-leading NA values input data. Compute initial seed value simple average first n non-NA values. Calculate EMA recursively remaining data points.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance-1","dir":"Articles","previous_headings":"Exponential Moving Average (EMA)","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Optimise NA handling: Consider using efficient method find first non-NA value, std::find_if. Vectorise calculations: Implement SIMD operations EMA calculation loop process multiple data points simultaneously. Memory efficiency: Use -place calculations possible reduce memory usage. Parallelise computations: large datasets, consider parallelising EMA calculations different segments data. Precompute constants: Calculate store constant values (e.g., 1.0 - beta) outside main loop. Optimise error handling: Implement efficient error checking handling mechanisms. Consider alternative data structures: Evaluate use cache-friendly data structures improved performance.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"moving-average-convergence-divergence-macd","dir":"Articles","previous_headings":"","what":"Moving Average Convergence Divergence (MACD)","title":"C++ high-performance technical indicators","text":"","code":"List macd(std::vector<double> price, int s, int l, int k, bool percent = true) {     std::vector<double> mavg_fast = ema(price, s);     std::vector<double> mavg_slow = ema(price, l);      // calculate the macd as the difference between mavg_fast and mavg_slow     std::vector<double> macd_res;      // we use a for loop here     for (int i = 0; i < mavg_fast.size(); i++) {         if (percent) {             macd_res.push_back(100 * (mavg_fast[i] / mavg_slow[i] - 1));         } else {             macd_res.push_back(mavg_fast[i] - mavg_slow[i]);         }     }      std::vector<double> signal = ema(macd_res, k);      List result = List::create(_[\"macd\"] = macd_res, _[\"signal\"] = signal);      return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation-2","dir":"Articles","previous_headings":"Moving Average Convergence Divergence (MACD)","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Moving Average Convergence Divergence (MACD) algorithm implemented C++ using following steps: Calculate fast slow Exponential Moving Averages (EMA) using provided periods. Compute MACD line either taking difference percentage difference fast slow EMAs. Calculate signal line applying EMA MACD line. Return MACD line signal line list.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance-2","dir":"Articles","previous_headings":"Moving Average Convergence Divergence (MACD)","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Vectorise calculations: Implement SIMD operations MACD calculation loop process multiple data points simultaneously. Optimise memory allocation: Pre-allocate macd_res vector avoid multiple reallocations push_back operations. Parallel processing: large datasets, consider parallelising MACD calculations different segments data. Inline EMA calculations: possible, inline EMA calculations within MACD function reduce function call overhead. Use references: Pass large vectors reference avoid unnecessary copying. Optimise conditional statements: Consider using ternary operator template specialisation handle percent flag efficiently. Memory efficiency: Evaluate possibility -place calculations reduce memory usage. Cache optimisation: Analyse optimise data access patterns better cache utilisation.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"momentum","dir":"Articles","previous_headings":"","what":"Momentum","title":"C++ high-performance technical indicators","text":"","code":"std::vector<double> mom(std::vector<double> price, int n) {     std::vector<double> result(price.size(), NA_REAL);     for (int i = n; i < price.size(); i++) {         result[i] = price[i] - price[i - n];     }     return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation-3","dir":"Articles","previous_headings":"Momentum","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Momentum algorithm implemented C++ using following steps: Pre-allocate result vector NA_REAL values handle missing data points. Iterate price vector, calculating difference current price price n periods ago. Store calculated momentum values result vector. straightforward implementation uses efficient vector operations minimises memory allocations. use NA_REAL ensures R receives valid NA values initial n-1 periods momentum calculated.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance-3","dir":"Articles","previous_headings":"Momentum","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Vectorisation: Implement SIMD instructions calculate multiple momentum values simultaneously. Parallel processing: large datasets, consider using OpenMP std::thread parallelize momentum calculations. Memory access optimisation: Analyse memory access pattern consider cache-friendly data structures algorithms. Inline expansion: function called frequently, consider making inline reduce function call overhead. Error handling: Add input validation ensure n larger price vector size. Optimise specific n values: common n values (e.g., 1, 5, 10), consider creating specialised implementations. Use iterator-based approach: Consider using iterators instead indexing, might efficient compilers. Precision control: lower precision acceptable, consider using float instead double faster calculations.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"rate-of-change-roc","dir":"Articles","previous_headings":"","what":"Rate of Change (ROC)","title":"C++ high-performance technical indicators","text":"","code":"std::vector<double> roc(std::vector<double> price, int n, char type = 'c') {     std::vector<double> result(price.size(), NA_REAL);      for (int i = n; i < price.size(); i++) {         if (type == 'c') {             result[i] = std::log(price[i]) - std::log(price[i - n]);         } else {             result[i] = (price[i] - price[i - n]) / price[i - n];         }     }      return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation-4","dir":"Articles","previous_headings":"Rate of Change (ROC)","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Rate Change (ROC) algorithm implemented C++ using following steps: Pre-allocate result vector NA_REAL values handle missing data points. Iterate price vector, starting nth element. type ‘c’ (continuous), calculate difference logarithms. Otherwise, calculate percentage change. Store calculated ROC values result vector. implementation allows two types ROC calculations: continuous (logarithmic) discrete (percentage). use NA_REAL ensures R receives valid NA values initial n-1 periods ROC calculated.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance-4","dir":"Articles","previous_headings":"Rate of Change (ROC)","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Vectorisation: Implement SIMD instructions calculate multiple ROC values simultaneously, especially arithmetic operations. Branch prediction optimisation: Consider reordering -else statement based common use case improve branch prediction. Parallel processing: large datasets, use OpenMP std::thread parallelise ROC calculations. Precompute logarithms: memory constraint, consider precomputing logarithms ‘c’ type avoid redundant calculations. Memory access optimisation: Analyse memory access pattern consider cache-friendly data structures algorithms. Inline expansion: function called frequently, consider making inline reduce function call overhead. Error handling: Add input validation ensure n larger price vector size type valid. Template specialisation: Create specialised implementations ‘c’ non-‘c’ types avoid runtime conditional check. Precision control: lower precision acceptable, consider using float instead double faster calculations.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"relative-strength-index-rsi","dir":"Articles","previous_headings":"","what":"Relative Strength Index (RSI)","title":"C++ high-performance technical indicators","text":"","code":"std::vector<double> rsi(std::vector<double> price, int n, char method = 'e') {     int price_length = price.size();     // create result vectors     std::vector<double> up(price_length, 0.0);     std::vector<double> down(price_length, 0.0);      for (int i = 1; i < price_length; i++) {         double price_diff = price[i] - price[i - 1];         if (price_diff > 0) {             up[i] = price[i] - price[i - 1];         } else {             down[i] = price[i - 1] - price[i];         }     }      // smoothed averages     std::vector<double> smoothed_average_gain(price_length, NA_REAL);     std::vector<double> smoothed_average_loss(price_length, NA_REAL);      if (method == 'e') {         smoothed_average_gain = ema(up, n, true);         smoothed_average_loss = ema(down, n, true);     } else if (method == 's') {         smoothed_average_gain = sma(up, n);         smoothed_average_loss = sma(down, n);     } else {         // throw c++ error         throw std::invalid_argument(\"method must be 'e' or 's'\");     }      // calculate the relative strength     std::vector<double> result(price_length, NA_REAL);      for (int i = 0; i < price_length; i++) {         double relative_strength_value = smoothed_average_gain[i] / smoothed_average_loss[i];         result[i] = 100.0 - 100.0 / (1.0 + relative_strength_value);     }      return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation-5","dir":"Articles","previous_headings":"Relative Strength Index (RSI)","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Relative Strength Index (RSI) algorithm implemented C++ using following steps: Calculate price differences separate ‘’ ‘’ movements. Compute smoothed averages gains losses using either Exponential Moving Average (EMA) Simple Moving Average (SMA), based specified method. Calculate relative strength ratio average gain average loss. Compute RSI values using formula: RSI = 100 - (100 / (1 + RS)). implementation allows flexibility choosing EMA SMA methods calculating average gains losses. leverages previously implemented EMA SMA functions efficiency code reuse.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance-5","dir":"Articles","previous_headings":"Relative Strength Index (RSI)","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Vectorisation: Implement SIMD instructions calculate multiple RSI values simultaneously, especially arithmetic operations. Optimise branching: Consider using template specialisation function pointers avoid method check function call. Parallel processing: large datasets, use OpenMP std::thread parallelise RSI calculations. Memory optimisation: Consider using -place calculations movements reduce memory usage. Precompute constants: Calculate store constant values (e.g., 100.0, 1.0) outside loops. Inline expansion: function called frequently, consider making inline reduce function call overhead. Error handling: Implement robust error checking handling mechanisms. Precision control: lower precision acceptable, consider using float instead double faster calculations. Cache optimisation: Analyse optimise data access patterns better cache utilisation. Optimise division operations: Consider using reciprocal multiplication instead division applicable.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"simple-moving-average-sma","dir":"Articles","previous_headings":"","what":"Simple Moving Average (SMA)","title":"C++ high-performance technical indicators","text":"","code":"std::vector<double> sma(std::vector<double> price, int n) {     // pre-allocate the vector with NA values     std::vector<double> result(price.size(), NA_REAL);      // calculate the first value as the average of the first n values     double first_val = 0;     for (int i = 0; i < n; i++) {         first_val += price[i] / (double) n;     }      // proof dividing in the for loop is correct     // 1+2+3+4+5+6+7+8+9+10 = 55 / 10 = 5.5     // (1/10)+(2/10)+(3/10)+(4/10)+(5/10)+(6/10)+(7/10)+(8/10)+(9/10)+(10/10) = 5.5     // first_val /= (double) n;      result[n - 1] = first_val;      // iterate over every position of the result array     // each are calculated from all values in window of size n     for (int i = n; i <= price.size(); i++) {         // iterate over the window of size n and calculate the sum / n         // values are initially set to NA so we must do initial value at 0         double sum = 0;         for (int j = i - n; j < i; j++) {             sum += price[j];         }         result[i - 1] = sum / (double) n;     }          // cast to NumericVector     return result; }"},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"brief-explanation-of-c-implementation-6","dir":"Articles","previous_headings":"Simple Moving Average (SMA)","what":"Brief Explanation of C++ Implementation","title":"C++ high-performance technical indicators","text":"Simple Moving Average (SMA) algorithm implemented C++ using following steps: Pre-allocate result vector NA_REAL values handle missing data points. Calculate first SMA value averaging first n elements price vector. Iterate remaining price data, calculating SMA window size n. Store calculated SMA values result vector. implementation uses efficient rolling sum algorithm minimise redundant calculations, resulting O(n) time complexity. use NA_REAL ensures R receives valid NA values initial n-1 periods SMA calculated.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"potential-improvements-for-performance-6","dir":"Articles","previous_headings":"Simple Moving Average (SMA)","what":"Potential Improvements for Performance","title":"C++ high-performance technical indicators","text":"Optimise rolling sum: Implement sliding window approach avoid recalculating entire sum window. Vectorisation: Use SIMD instructions calculate multiple sums divisions simultaneously. Parallel processing: large datasets, consider using OpenMP std::thread parallelise SMA calculations. Memory access optimisation: Analyse memory access pattern consider cache-friendly data structures algorithms. Precision control: lower precision acceptable, consider using float instead double faster calculations. Precompute reciprocals: Store 1/n replace division multiplication main loop. Error handling: Add input validation ensure n larger price vector size. Inline expansion: function called frequently, consider making inline reduce function call overhead. Optimise specific n values: common n values (e.g., 5, 10, 20), consider creating specialised implementations. Use iterators: Consider using iterators instead indexing, might efficient compilers.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"performance-discussion","dir":"Articles","previous_headings":"","what":"Performance Discussion","title":"C++ high-performance technical indicators","text":"implementing technical analysis algorithms C++ use R via Rcpp, several performance considerations optimisation strategies come play. section discusses general performance aspects Rcpp-specific optimisations can enhance efficiency package.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"general-c-optimisations","dir":"Articles","previous_headings":"Performance Discussion","what":"General C++ Optimisations","title":"C++ high-performance technical indicators","text":"Vectorisation: Utilise SIMD (Single Instruction, Multiple Data) operations possible. Modern C++ compilers can auto-vectorise loops, explicit use libraries like Eigen Boost.SIMD can yield improvements. Memory Management: Minimise dynamic allocations. Pre-allocate vectors sizes known advance. Consider using reserve() vectors grow. Loop Optimisation: Unroll small loops, consider loop fusion applicable. mindful cache-friendly access patterns. Inline Functions: Use inline functions small, frequently called functions reduce function call overhead. Const Correctness: Use const wherever possible allow compiler optimisations. Move Semantics: Utilise C++11 move semantics reduce unnecessary copying large objects.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"rcpp-specific-optimisations","dir":"Articles","previous_headings":"Performance Discussion","what":"Rcpp-Specific Optimisations","title":"C++ high-performance technical indicators","text":"RcppArmadillo: linear algebra operations, consider using RcppArmadillo, provides efficient matrix vector operations. Rcpp Sugar: Leverage Rcpp Sugar vectorised operations. provides R-like syntax C++ performance. Rcpp Attributes: Use Rcpp attributes seamless R C++ integration, reducing boilerplate code. Avoid R API Loops: Minimise calls R API functions inside loops, can expensive. Use Appropriate R Data Types: Match C++ types appropriate R types (e.g., NumericVector double vectors) efficient data transfer R C++. Parallel Processing: Utilise OpenMP parallelisation, supported Rcpp.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"r-integration-considerations","dir":"Articles","previous_headings":"Performance Discussion","what":"R Integration Considerations","title":"C++ high-performance technical indicators","text":"Minimise R-C++ Context Switching: Batch operations C++ possible reduce overhead switching R C++ contexts. Efficient Data Passing: Pass large datasets reference using Rcpp::Reference class avoid copying. Use RcppParallel: embarrassingly parallel tasks, consider using RcppParallel leverage multi-core processors. Profiling: Use Rcpp’s microbenchmark package profile C++ code identify bottlenecks. Memory Management R: aware R’s garbage collection. Properly scope Rcpp objects ensure timely cleanup.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"algorithm-specific-optimisations","dir":"Articles","previous_headings":"Performance Discussion","what":"Algorithm-Specific Optimisations","title":"C++ high-performance technical indicators","text":"Rolling Window Calculations: Implement efficient rolling window algorithms avoid redundant calculations moving averages similar indicators. Lookup Tables: functions discrete inputs (e.g., small integer ranges), consider using lookup tables instead repeated calculations. Approximations: appropriate, use fast approximations complex functions (e.g., fast log approximations certain calculations). Specialised Implementations: common parameter values (e.g., specific lookback periods), consider creating specialised, optimised implementations.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"future-optimisations","dir":"Articles","previous_headings":"Performance Discussion","what":"Future Optimisations","title":"C++ high-performance technical indicators","text":"GPU Acceleration: large datasets compute-intensive algorithms, consider GPU acceleration using libraries like RcppCUDA. Adaptive Algorithms: Implement algorithms can adapt different data sizes, potentially switching different implementations based input size. Code Generation: highly repetitive code patterns, consider using template metaprogramming code generation techniques create optimised implementations. applying optimisations consistently profiling code, can ensure Rcpp-based technical analysis package maintains high performance providing seamless integration R. Remember always benchmark profile optimisations ensure changes actually improve performance real-world scenarios.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/cpp-high-performance-technical-indicators.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"C++ high-performance technical indicators","text":"dmplot package provides set high-performance technical indicators implemented C++. leveraging speed efficiency C++, functions offer superior performance compared equivalent R implementations, especially large datasets high-frequency calculations. combination mathematical rigor optimised C++ code makes dmplot excellent choice financial analysts, quantitative traders, researchers working large-scale financial data requiring real-time analysis capabilities. Future developments continue focus performance optimisations expanding range available indicators, always emphasis C++ implementation maximum efficiency.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/donate.html","id":"support-my-work","dir":"Articles","previous_headings":"","what":"Support my work","title":"Donate","text":"find package useful, please consider supporting work cryptocurrency donation.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/donate.html","id":"bitcoin","dir":"Articles","previous_headings":"Support my work","what":"Bitcoin","title":"Donate","text":"bc1qgs4f6hhnzj8m2j05axgsf53k67kugps92qzr2k Copy","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/donate.html","id":"monero","dir":"Articles","previous_headings":"Support my work","what":"Monero","title":"Donate","text":"41wSUfpnhVUW5GnTKCyBBwVuokhkjMeepAVkKT1qv3HDhcZhTSQx1UaTaibEukndQrCPLVMcRt1LVFpVSq3YrdRjENBtMkG Copy","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/getting-started-with-the-dmplot-framwork.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started with the dmplot framework","text":"vignette explain conventions dmplot design choices - guide working data effectively leveraging dmplot ggplot2 framework derive insight analyses. dmplot limited financial data, indeed ’s conventions design choices applicable time series data. However, package indeed focus financial data analysis visualisation.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/getting-started-with-the-dmplot-framwork.html","id":"licensing","dir":"Articles","previous_headings":"Introduction","what":"Licensing","title":"Getting started with the dmplot framework","text":"dmplot package released MIT license, allowing free use modification. Users must: Cite original author (see LICENSE details). Include license redistribution.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/getting-started-with-the-dmplot-framwork.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Getting started with the dmplot framework","text":"Let’s install necessary libraries. often use following packages: data.table working large datasets. dmplot plotting financial time series datasets. kucoin interacting KuCoin API - getting cryptocurrency financial data. ggplot2 plotting. box loading modules R. strongly recommend using data.table work finance. indeed one primary reasons data.table created - work large datasets efficiently. installing data.table M1 MacOS consult guide building source: gist.github.com/dereckmezquita/ed860601138a46cf591a1bdcc95db0a2 Now, let’s load required libraries:","code":"install.packages(\"data.table\", type = \"source\") install.packages(\"TTR\") install.packages(\"ggplot2\") install.packages(\"box\")  remotes::install_github(\"dereckmezquita/dmplot\") remotes::install_github(\"dereckmezquita/kucoin\") box::use(kucoin) box::use(dt = data.table)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/getting-started-with-the-dmplot-framwork.html","id":"dmplot-and-tidy-data-for-financial-data-analysis-and-visualization","dir":"Articles","previous_headings":"","what":"dmplot and “Tidy Data” for Financial Data Analysis and Visualization","title":"Getting started with the dmplot framework","text":"dmplot package provides toolkit plotting financial time series datasets ggplot2 framework. includes functions plotting candlestick charts, moving averages, Bollinger Bands, MACD, RSI, Stochastic Oscillator. order best leverage ggplot2 , thus visualise financial analyses must adhere “tidy data” convention. Whereby column variable, row observation, cell single value. format dmplot expects. Thus, calculated indicators added new columns dataset dmplot expects. offer two points guidance: Use data.table. Functions must return named list values. reason first point data.table powerful package working large datasets highly efficient. second point return named list values can easily use function within data.table create new columns. can see sticking convention allows us easily efficiently leverage data.table framework calculate new columns thus new indicators.","code":"petal_ratios <- function(petal_length, petal_width, sepal_length, sepal_width) {     petal_ratio <- petal_length / petal_width     sepal_ratio <- sepal_length / sepal_width     return(list(petal_ratio = petal_ratio, sepal_ratio = sepal_ratio)) }  iris2 <- dt$as.data.table(iris)  head(iris2) #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <num>       <num>        <num>       <num>  <fctr> #> 1:          5.1         3.5          1.4         0.2  setosa #> 2:          4.9         3.0          1.4         0.2  setosa #> 3:          4.7         3.2          1.3         0.2  setosa #> 4:          4.6         3.1          1.5         0.2  setosa #> 5:          5.0         3.6          1.4         0.2  setosa #> 6:          5.4         3.9          1.7         0.4  setosa  iris2[,     c(\"petal_ratio\", \"sepal_ratio\") := petal_ratios(         Petal.Length,         Petal.Width,         Sepal.Length,         Sepal.Width     ) ]  head(iris2) #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species petal_ratio #>           <num>       <num>        <num>       <num>  <fctr>       <num> #> 1:          5.1         3.5          1.4         0.2  setosa        7.00 #> 2:          4.9         3.0          1.4         0.2  setosa        7.00 #> 3:          4.7         3.2          1.3         0.2  setosa        6.50 #> 4:          4.6         3.1          1.5         0.2  setosa        7.50 #> 5:          5.0         3.6          1.4         0.2  setosa        7.00 #> 6:          5.4         3.9          1.7         0.4  setosa        4.25 #> 1 variable(s) not shown: [sepal_ratio <num>]"},{"path":"https://dereckmezquita.github.io/dmplot/articles/getting-started-with-the-dmplot-framwork.html","id":"loading-sample-data","dir":"Articles","previous_headings":"","what":"Loading Sample Data","title":"Getting started with the dmplot framework","text":"’ll use sample data README:","code":"ticker <- \"BTC/USDT\"  dt <- kucoin$get_market_data(     symbols = ticker,     from = \"2024-06-30 11:34:17 EST\", # lubridate::now() - lubridate::days(7),     to = \"2024-07-07 11:34:12 EST\", # lubridate::now(),     frequency = \"1 hour\" )  head(dt) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-06-30 11:00:00 61540.9 61665.8 61518.7 61553.3 43.87309 #> 2: BTC/USDT 2024-06-30 12:00:00 61553.3 61654.9 61333.0 61490.7 63.42409 #> 3: BTC/USDT 2024-06-30 13:00:00 61490.8 61740.9 61451.1 61711.7 52.80176 #> 4: BTC/USDT 2024-06-30 14:00:00 61711.7 61846.7 61526.1 61581.7 89.92135 #> 5: BTC/USDT 2024-06-30 15:00:00 61581.7 61775.6 61580.9 61717.4 34.02352 #> 6: BTC/USDT 2024-06-30 16:00:00 61719.7 61749.6 61578.4 61601.8 27.14692 #> 1 variable(s) not shown: [turnover <num>]"},{"path":"https://dereckmezquita.github.io/dmplot/articles/getting-started-with-the-dmplot-framwork.html","id":"calculating-financial-indicators","dir":"Articles","previous_headings":"","what":"Calculating Financial Indicators","title":"Getting started with the dmplot framework","text":"provide host functions calculating financial indicators dmplot package. functions designed used within data.table framework return named list values. However, find need use outside functions can easily wrap function returns named list values. demonstrate TTT::EMA TTT::BBands:","code":"box::use(TTR[EMA, BBands])  # redifine our function to return a list ema <- function(x, n, wilder = TRUE) {     return(as.list(as.data.frame(EMA(x, n = n, wilder = wilder)))) }  bb <- function(close, n = 2, sd = 2) {     return(as.list(as.data.frame(BBands(close, n = n, sd = sd)))) }  # calculate the short and long moving averages dt[, ema_short := ema(close, n = 10, wilder = TRUE)] dt[, ema_long := ema(close, n = 50, wilder = TRUE)]  # calculate the bollinger bands dt[,     c(\"bb_lower\", \"bb_mavg\", \"bb_upper\", \"bb_pct\") := bb(         close, n = 10,         sd = 2     ) ]  head(dt) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-06-30 11:00:00 61540.9 61665.8 61518.7 61553.3 43.87309 #> 2: BTC/USDT 2024-06-30 12:00:00 61553.3 61654.9 61333.0 61490.7 63.42409 #> 3: BTC/USDT 2024-06-30 13:00:00 61490.8 61740.9 61451.1 61711.7 52.80176 #> 4: BTC/USDT 2024-06-30 14:00:00 61711.7 61846.7 61526.1 61581.7 89.92135 #> 5: BTC/USDT 2024-06-30 15:00:00 61581.7 61775.6 61580.9 61717.4 34.02352 #> 6: BTC/USDT 2024-06-30 16:00:00 61719.7 61749.6 61578.4 61601.8 27.14692 #> 7 variable(s) not shown: [turnover <num>, ema_short <num>, ema_long <num>, bb_lower <num>, bb_mavg <num>, bb_upper <num>, bb_pct <num>]"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to financial indicators with dmplot","text":"vignette explains calculate interpret common financial indicators used technical analysis. ’ll cover mathematics behind indicator demonstrate functions used calculate well leverage provided dmplot. Finally, ’ll demonstrate visualise indicators using dmplot package.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"licensing","dir":"Articles","previous_headings":"Introduction","what":"Licensing","title":"Introduction to financial indicators with dmplot","text":"dmplot package released MIT license, allowing free use modification. Users must: Cite original author (see LICENSE details). Include license redistribution.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Introduction to financial indicators with dmplot","text":"See getting started installing recommended libraries: Getting Started dmplot Framework","code":"box::use(kucoin) box::use(dt = data.table) box::use(ggplot2) box::use(dmplot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"loading-sample-data","dir":"Articles","previous_headings":"","what":"Loading Sample Data","title":"Introduction to financial indicators with dmplot","text":"’ll use sample data README:","code":"ticker <- \"BTC/USDT\"  data <- kucoin$get_market_data(     symbols = ticker,     from = \"2024-06-30 11:34:17 EST\", # lubridate::now() - lubridate::days(7),     to = \"2024-07-07 11:34:12 EST\", # lubridate::now(),     frequency = \"1 hour\" )  head(data) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-06-30 11:00:00 61540.9 61665.8 61518.7 61553.3 43.87309 #> 2: BTC/USDT 2024-06-30 12:00:00 61553.3 61654.9 61333.0 61490.7 63.42409 #> 3: BTC/USDT 2024-06-30 13:00:00 61490.8 61740.9 61451.1 61711.7 52.80176 #> 4: BTC/USDT 2024-06-30 14:00:00 61711.7 61846.7 61526.1 61581.7 89.92135 #> 5: BTC/USDT 2024-06-30 15:00:00 61581.7 61775.6 61580.9 61717.4 34.02352 #> 6: BTC/USDT 2024-06-30 16:00:00 61719.7 61749.6 61578.4 61601.8 27.14692 #> 1 variable(s) not shown: [turnover <num>]"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"calculating-and-visualising-financial-indicators","dir":"Articles","previous_headings":"","what":"Calculating and Visualising Financial Indicators","title":"Introduction to financial indicators with dmplot","text":"adhere “Tidy Data” principles ggplot2 framework can easily calculate build visualisations layers. first set create set base layers reuse throughout visualisations.","code":""},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"candlestick-chart","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators > Base Layers","what":"Candlestick Chart","title":"Introduction to financial indicators with dmplot","text":"candlestick chart type financial chart used represent price movements security. candlestick typically shows open, high, low, close prices specific period.","code":"candle_plot <- data |>     ggplot2$ggplot(ggplot2$aes(         x = datetime,         open = open,         high = high,         low = low,         close = close     )) +     ## ------------------------------------     dmplot$stat_candlestick() +     ## ------------------------------------     ggplot2$scale_x_datetime(date_breaks = \"1 day\", date_labels = \"%b %d\") +     ggplot2$labs(         title = paste(ticker, \"- Candlestick with EMA and Bollinger Bands\"),         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(axis.text.x = ggplot2$element_text(angle = 45, hjust = 1))  print(candle_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"line-chart","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators > Base Layers","what":"Line Chart","title":"Introduction to financial indicators with dmplot","text":"Sometimes may want visualise single indicator price movement time. line chart simple effective way .","code":"line_plot <- data |>     ggplot2$ggplot(ggplot2$aes(         x = datetime,         y = close     )) +     ggplot2$geom_line(         colour = \"cyan\",         linewidth = 1.25,         alpha = 0.5,         na.rm = TRUE     ) +     ggplot2$scale_x_datetime(date_breaks = \"1 day\", date_labels = \"%b %d\") +     ggplot2$labs(         title = paste(ticker, \"- Closing Price\"),         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(axis.text.x = ggplot2$element_text(angle = 45, hjust = 1))  print(line_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"volume","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators > Base Layers","what":"Volume","title":"Introduction to financial indicators with dmplot","text":"volume indicator financial indicator per se, commonly used conjunction indicators confirm price trends.","code":"volume_plot <- data |>     ggplot2$ggplot(ggplot2$aes(         x = datetime,         y = volume,         group = symbol     )) +     ggplot2$geom_bar(         stat = \"identity\",         ggplot2$aes(fill = ifelse(close > open, \"green\", \"red\")),         linewidth = 1,         alpha = 1,         na.rm = TRUE     ) +     ggplot2$scale_x_datetime(         date_breaks = \"1 day\",         date_minor_breaks = \"1 hour\",         date_labels = \"%d %b\"     ) +     ggplot2$scale_fill_identity() +     ggplot2$labs(         x = ggplot2$element_blank(),         y = \"Volume\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(         axis.text.x = ggplot2$element_text(angle = 45, hjust = 1),         panel.grid.minor = ggplot2::element_blank()     )  print(volume_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"simple-moving-average-sma","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"1. Simple Moving Average (SMA)","title":"Introduction to financial indicators with dmplot","text":"Simple Moving Average (SMA) average security’s price specified number periods. Mathematics: series Y, SMA time t calculated : \\[ SMA(t) = \\frac{Y(t) + Y(t-1) + ... + Y(t-n+1)}{n} \\] n number periods. Now using candlestick plot created earlier, can add SMA layer visualise moving averages.","code":"sma <- function(x, n) {     return(as.list(as.data.frame(TTR::SMA(x, n = n)))) }  data2 <- dt$copy(data)  data2[, sma_short := sma(close, n = 20)[[1]]] data2[, sma_long := sma(close, n = 50)[[1]]]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-06-30 11:00:00 61540.9 61665.8 61518.7 61553.3 43.87309 #> 2: BTC/USDT 2024-06-30 12:00:00 61553.3 61654.9 61333.0 61490.7 63.42409 #> 3: BTC/USDT 2024-06-30 13:00:00 61490.8 61740.9 61451.1 61711.7 52.80176 #> 4: BTC/USDT 2024-06-30 14:00:00 61711.7 61846.7 61526.1 61581.7 89.92135 #> 5: BTC/USDT 2024-06-30 15:00:00 61581.7 61775.6 61580.9 61717.4 34.02352 #> 6: BTC/USDT 2024-06-30 16:00:00 61719.7 61749.6 61578.4 61601.8 27.14692 #> 3 variable(s) not shown: [turnover <num>, sma_short <num>, sma_long <num>] sma_layer <- dmplot$stat_movingaverages(data = data2,         ggplot2$aes(x = datetime, short = sma_short, long = sma_long),         alpha = list(mavg = 0.5)     )  print(candle_plot + sma_layer)"},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"exponential-moving-average-ema","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"1. Exponential Moving Average (EMA)","title":"Introduction to financial indicators with dmplot","text":"EMA gives weight recent prices, making responsive new information simple moving average. Mathematics: series Y, EMA time t calculated : \\[ EMA(t) = α * Y(t) + (1 - α) * EMA(t-1) \\] α = 2 / (N + 1), N number periods.","code":"ema <- function(x, n, wilder = TRUE) {     as.list(as.data.frame(TTR::EMA(x, n = n, wilder = wilder))) }  data2 <- dt$copy(data)  data2[, `:=`(     ema_short = ema(close, n = 10, wilder = TRUE)[[1]],     ema_long = ema(close, n = 50, wilder = TRUE)[[1]] )]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-06-30 11:00:00 61540.9 61665.8 61518.7 61553.3 43.87309 #> 2: BTC/USDT 2024-06-30 12:00:00 61553.3 61654.9 61333.0 61490.7 63.42409 #> 3: BTC/USDT 2024-06-30 13:00:00 61490.8 61740.9 61451.1 61711.7 52.80176 #> 4: BTC/USDT 2024-06-30 14:00:00 61711.7 61846.7 61526.1 61581.7 89.92135 #> 5: BTC/USDT 2024-06-30 15:00:00 61581.7 61775.6 61580.9 61717.4 34.02352 #> 6: BTC/USDT 2024-06-30 16:00:00 61719.7 61749.6 61578.4 61601.8 27.14692 #> 3 variable(s) not shown: [turnover <num>, ema_short <num>, ema_long <num>] ema_layer <- dmplot$stat_movingaverages(data = data2,         ggplot2$aes(x = datetime, short = ema_short, long = ema_long),         alpha = list(mavg = 0.5),         colour = list(\"cyan\", \"magenta\")     )  print(candle_plot + ema_layer)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"bollinger-bands","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"2. Bollinger Bands","title":"Introduction to financial indicators with dmplot","text":"Bollinger Bands consist middle band (usually simple moving average) upper lower band standard deviations away middle band. Mathematics: \\[ Middle Band = SMA(n) \\] \\[ Upper Band = SMA(n) + k * σ(n) \\] \\[ Lower Band = SMA(n) - k * σ(n) \\] SMA(n) n-period simple moving average, σ(n) n-period standard deviation, k number standard deviations (usually 2). can see plot Bolllinger Bands great way visualise price volatility see security overbought oversold.","code":"bb <- function(close, n = 20, sd = 2) {     as.list(as.data.frame(TTR::BBands(close, n = n, sd = sd))) }  data2 <- dt$copy(data)  data2[, c(\"bb_lower\", \"bb_mavg\", \"bb_upper\", \"bb_pct\") := bb(close, n = 10, sd = 2)]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-06-30 11:00:00 61540.9 61665.8 61518.7 61553.3 43.87309 #> 2: BTC/USDT 2024-06-30 12:00:00 61553.3 61654.9 61333.0 61490.7 63.42409 #> 3: BTC/USDT 2024-06-30 13:00:00 61490.8 61740.9 61451.1 61711.7 52.80176 #> 4: BTC/USDT 2024-06-30 14:00:00 61711.7 61846.7 61526.1 61581.7 89.92135 #> 5: BTC/USDT 2024-06-30 15:00:00 61581.7 61775.6 61580.9 61717.4 34.02352 #> 6: BTC/USDT 2024-06-30 16:00:00 61719.7 61749.6 61578.4 61601.8 27.14692 #> 5 variable(s) not shown: [turnover <num>, bb_lower <num>, bb_mavg <num>, bb_upper <num>, bb_pct <num>] bb_layer <- dmplot$stat_bollingerbands(data = data2,         ggplot2$aes(ymin = bb_lower, mavg = bb_mavg, ymax = bb_upper),         colour = list(\"pink\", \"cyan\", \"cyan\")     )  print(candle_plot + bb_layer)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"moving-average-convergence-divergence-macd","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"3. Moving Average Convergence Divergence (MACD)","title":"Introduction to financial indicators with dmplot","text":"MACD trend-following momentum indicator shows relationship two moving averages security’s price. Mathematics: \\[ MACD Line = EMA(12) - EMA(26) \\] \\[ Signal Line = EMA(9) MACD Line \\] \\[ MACD Histogram = MACD Line - Signal Line \\] MACD Line difference short-term EMA (12 periods) long-term EMA (26 periods). Signal Line EMA MACD Line (usually 9 periods). MACD Line crosses Signal Line, considered bullish signal. MACD Line crosses Signal Line, considered bearish signal. can see plot , MACD indicator great way visualise relationship two moving averages identify potential buy sell signals. plot shows two moving averages MACD histogram; histogram difference MACD Line Signal Line.","code":"macd <- function(x, fast = 12, slow = 26, signal = 9) {     as.list(as.data.frame(TTR::MACD(x, fast, slow, signal))) }  data2 <- dt$copy(data)  data2[, c(\"macd\", \"macd_signal\") := macd(close, fast = 12, slow = 26, signal = 9)] data2[, macd_diff := macd - macd_signal]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-06-30 11:00:00 61540.9 61665.8 61518.7 61553.3 43.87309 #> 2: BTC/USDT 2024-06-30 12:00:00 61553.3 61654.9 61333.0 61490.7 63.42409 #> 3: BTC/USDT 2024-06-30 13:00:00 61490.8 61740.9 61451.1 61711.7 52.80176 #> 4: BTC/USDT 2024-06-30 14:00:00 61711.7 61846.7 61526.1 61581.7 89.92135 #> 5: BTC/USDT 2024-06-30 15:00:00 61581.7 61775.6 61580.9 61717.4 34.02352 #> 6: BTC/USDT 2024-06-30 16:00:00 61719.7 61749.6 61578.4 61601.8 27.14692 #> 4 variable(s) not shown: [turnover <num>, macd <num>, macd_signal <num>, macd_diff <num>] macd_plot <- data2 |>     ggplot2$ggplot(ggplot2$aes(x = datetime)) +     dmplot$stat_macd(data = data2,         ggplot2$aes(macd = macd, macd_signal = macd_signal, macd_diff = macd_diff)     ) +     dmplot$theme_dereck_dark() +     ggplot2$scale_x_datetime(date_breaks = \"1 day\", date_labels = \"%b %d\") +     ggplot2$labs(         title = paste(ticker, \"- MACD\"),         x = \"Date\",         y = \"MACD Value\"     ) +     ggplot2$theme(axis.text.x = ggplot2$element_text(angle = 45, hjust = 1))  print(macd_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"relative-strength-index-rsi","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"4. Relative Strength Index (RSI)","title":"Introduction to financial indicators with dmplot","text":"RSI momentum oscillator measures speed change price movements. Mathematics: \\[ RSI = 100 - (100 / (1 + RS)) \\] RS = Average Gain / Average Loss \\[ Average Gain = [(previous avg. gain) x 13 + current gain] / 14 \\] \\[ Average Loss = [(previous avg. loss) x 13 + current loss] / 14 \\] RSI provides visual representation strength security’s price movement. often used identify overbought oversold conditions.","code":"rsi <- function(x, n = 14) {     as.list(as.data.frame(TTR::RSI(x, n = n))) }  data2 <- dt$copy(data)  data2[, rsi := rsi(close, n = 14)[[1]]]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-06-30 11:00:00 61540.9 61665.8 61518.7 61553.3 43.87309 #> 2: BTC/USDT 2024-06-30 12:00:00 61553.3 61654.9 61333.0 61490.7 63.42409 #> 3: BTC/USDT 2024-06-30 13:00:00 61490.8 61740.9 61451.1 61711.7 52.80176 #> 4: BTC/USDT 2024-06-30 14:00:00 61711.7 61846.7 61526.1 61581.7 89.92135 #> 5: BTC/USDT 2024-06-30 15:00:00 61581.7 61775.6 61580.9 61717.4 34.02352 #> 6: BTC/USDT 2024-06-30 16:00:00 61719.7 61749.6 61578.4 61601.8 27.14692 #> 2 variable(s) not shown: [turnover <num>, rsi <num>] rsi_plot <- na.omit(data2) |>     ggplot2$ggplot(ggplot2$aes(x = datetime)) +     ggplot2$geom_line(ggplot2$aes(y = rsi, colour = \"RSI\")) +     ggplot2$geom_hline(         yintercept = c(30, 70),         linetype = \"dashed\",         colour = \"yellow\"     ) +     ggplot2$scale_x_datetime(date_breaks = \"1 day\", date_labels = \"%b %d\") +     ggplot2$scale_y_continuous(limits = c(0, 100)) +     ggplot2$scale_color_manual(values = c(\"RSI\" = \"cyan\")) +     ggplot2$labs(         title = paste(ticker, \"- RSI\"),         x = \"Date\",         y = \"RSI Value\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(         axis.text.x = ggplot2$element_text(angle = 45, hjust = 1),         legend.position = \"none\"     )  print(rsi_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"rate-of-change-roc-momentum","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"5. Rate of Change (ROC) / Momentum","title":"Introduction to financial indicators with dmplot","text":"Rate Change (ROC) indicator measures percentage change price current price price n periods ago. Mathematics: \\[ ROC = \\frac{Close - Close_{n}}{Close_{n}} \\] n number periods. often used momentum indicator identify overbought oversold conditions. Notice execute second calculation normalise momentum values -1 1. \\[ Momentum = \\frac{ROC}{max(|ROC|)} \\] Momentum indicator simple way visualise rate change price specified number periods.","code":"data2 <- dt$copy(data)  data2[, mom := TTR::ROC(close, n = 2L)] data2[, mom := mom / max(abs(mom), na.rm = TRUE)]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-06-30 11:00:00 61540.9 61665.8 61518.7 61553.3 43.87309 #> 2: BTC/USDT 2024-06-30 12:00:00 61553.3 61654.9 61333.0 61490.7 63.42409 #> 3: BTC/USDT 2024-06-30 13:00:00 61490.8 61740.9 61451.1 61711.7 52.80176 #> 4: BTC/USDT 2024-06-30 14:00:00 61711.7 61846.7 61526.1 61581.7 89.92135 #> 5: BTC/USDT 2024-06-30 15:00:00 61581.7 61775.6 61580.9 61717.4 34.02352 #> 6: BTC/USDT 2024-06-30 16:00:00 61719.7 61749.6 61578.4 61601.8 27.14692 #> 2 variable(s) not shown: [turnover <num>, mom <num>] mom <- data2 |>     ggplot2$ggplot(ggplot2$aes(         x = datetime,         y = mom,         group = symbol     )) +     ## ------------------------------------     # momentum     ggplot2$geom_line(         colour = \"yellow\",         linewidth = 1.25,         alpha = 0.5,         na.rm = TRUE     ) +     ## ------------------------------------     # zero line     ggplot2$geom_hline(         yintercept = 0, colour = \"grey\", size = 1, linetype = \"dashed\"     ) +     ggplot2$scale_x_datetime(         date_breaks = \"1 day\", date_minor_breaks = \"1 hour\", date_labels = \"%d %b\"     ) +     ggplot2$labs(         x = ggplot2::element_blank(),         y = \"Momentum\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(         axis.text.x = ggplot2$element_text(angle = 90),         panel.grid.minor = ggplot2$element_blank()     )  print(mom)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"stochastic-oscillator","dir":"Articles","previous_headings":"Calculating and Visualising Financial Indicators","what":"5. Stochastic Oscillator","title":"Introduction to financial indicators with dmplot","text":"Stochastic Oscillator momentum indicator shows location close relative high-low range set number periods. Mathematics: \\[ %K = (Current Close - Lowest Low)/(Highest High - Lowest Low) * 100 \\] \\[ %D = 3-day SMA %K \\] Stochastic Oscillator used identify overbought oversold conditions. %K line crosses %D line, considered buy signal. %K line crosses %D line, considered sell signal. Dotted yellow lines represent overbought (80) oversold (20) levels. Purple line represents Fast %K line; represents current close relative high-low range last 14 periods. Yellow line represents Slow %D line; 3-day SMA Fast %K line. Fast %K line crosses Slow %D line, considered buy signal. Fast %K line crosses Slow %D line, considered sell signal.","code":"stoch <- function(high, low, close, n = 14, k = 3, d = 3) {     as.list(as.data.frame(TTR::stoch(HLC = data.frame(high, low, close), nFastK = n, nFastD = k, nSlowD = d))) }  data2 <- dt$copy(data)  data2[,     c(\"fastK\", \"fastD\", \"slowD\") := stoch(high, low, close, n = 14, k = 3, d = 3) ]  # similarly to the momentum indicator, we normalise the values between 0 and 100 data2[, fastK := fastK / max(abs(fastK), na.rm = TRUE) * 100] data2[, fastD := fastD / max(abs(fastD), na.rm = TRUE) * 100] data2[, slowD := slowD / max(abs(slowD), na.rm = TRUE) * 100]  head(data2) #>      symbol            datetime    open    high     low   close   volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #> 1: BTC/USDT 2024-06-30 11:00:00 61540.9 61665.8 61518.7 61553.3 43.87309 #> 2: BTC/USDT 2024-06-30 12:00:00 61553.3 61654.9 61333.0 61490.7 63.42409 #> 3: BTC/USDT 2024-06-30 13:00:00 61490.8 61740.9 61451.1 61711.7 52.80176 #> 4: BTC/USDT 2024-06-30 14:00:00 61711.7 61846.7 61526.1 61581.7 89.92135 #> 5: BTC/USDT 2024-06-30 15:00:00 61581.7 61775.6 61580.9 61717.4 34.02352 #> 6: BTC/USDT 2024-06-30 16:00:00 61719.7 61749.6 61578.4 61601.8 27.14692 #> 4 variable(s) not shown: [turnover <num>, fastK <num>, fastD <num>, slowD <num>] stoch_plot <- na.omit(data2) |>     ggplot2$ggplot(ggplot2$aes(x = datetime)) +     ggplot2$geom_line(ggplot2$aes(y = fastK, colour = \"Fast %K\")) +     ggplot2$geom_line(ggplot2$aes(y = slowD, colour = \"Slow %D\")) +     ggplot2$geom_hline(         yintercept = c(20, 80),         linetype = \"dashed\",         colour = \"yellow\"     ) +     ggplot2$scale_x_datetime(date_breaks = \"1 day\", date_labels = \"%b %d\") +     ggplot2$scale_y_continuous(limits = c(0, 100)) +     ggplot2$scale_color_manual(values = c(\"Fast %K\" = \"magenta\", \"Slow %D\" = \"yellow\")) +     ggplot2$labs(         title = paste(ticker, \"- Stochastic Oscillator\"),         x = \"Date\",         y = \"Value\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(axis.text.x = ggplot2$element_text(angle = 45, hjust = 1))  print(stoch_plot)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"pulling-it-all-together","dir":"Articles","previous_headings":"","what":"Pulling it all together","title":"Introduction to financial indicators with dmplot","text":"Now built individual layers, can combine single plot visualise indicators together. use gridExtra package arrange plots grid layout.","code":"box::use(gridExtra)"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"candlestick-chart-rsi-volume","dir":"Articles","previous_headings":"Pulling it all together","what":"Candlestick Chart + RSI + Volume","title":"Introduction to financial indicators with dmplot","text":"Now fun combine candlestick chart, RSI, volume plots single layout.  Challenge: can adjust left padding plots y-axis labels align?","code":"candle_plot_minus_x_axis <- candle_plot +     ema_layer +     bb_layer +     ggplot2$theme(         axis.text.x = ggplot2$element_blank(),         axis.title.x = ggplot2$element_blank()     ) +     ggplot2$labs(         title = paste(ticker, \"- Candlestick, EMA, Bollinger Bands, RSI, MACD, Volume\"),         y = \"Price (USD)\"     )  rsi_plot_minus_x_axis <- rsi_plot +     ggplot2$theme(         axis.text.x = ggplot2$element_blank(),         axis.title.x = ggplot2$element_blank()     ) +     ggplot2$labs(title = NULL, y = \"RSI\")  macd_plot_minus_x_axis <- macd_plot +     ggplot2$theme(         axis.text.x = ggplot2$element_blank(),         axis.title.x = ggplot2$element_blank()     ) +     ggplot2$labs(title = NULL, y = \"MACD\")  gridExtra$grid.arrange(     candle_plot_minus_x_axis,     rsi_plot_minus_x_axis,     macd_plot_minus_x_axis,     volume_plot,     ncol = 1,     heights = c(3, 1, 1, 1) )"},{"path":"https://dereckmezquita.github.io/dmplot/articles/intro-to-financial-indicators-with-dmplot.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to financial indicators with dmplot","text":"vignette demonstrated calculate visualise various financial indicators using dmplot package. ’ve covered mathematics behind indicator provided R functions calculate . combining indicators visualisation capabilities dmplot, can create comprehensive insightful financial charts. Remember indicators can powerful tools technical analysis, used conjunction forms analysis relied upon exclusively making investment decisions. advanced usage customisation options, refer individual function documentation dmplot package explore combining multiple indicators create complex trading strategies.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dereck Mezquita. Author, maintainer.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mezquita, D. (2024). dmplot: plotting toolkit financial time series data. package provides algorithms, functions, layers outlines framework working working analysing financial time series data. R package version 1.3.0. https://github.com/dereckmezquita/dmplot DOI: https://github.com/dereckmezquita/dmplot","code":"@Manual{,   title = {dmplot: A plotting toolkit for financial and time series data. The package provides algorithms, functions, layers and outlines a framework for working with working with and analysing financial and time series data.},   author = {Dereck Mezquita},   year = {2024},   note = {R package version 1.3.0},   url = {https://github.com/dereckmezquita/dmplot},   doi = {https://github.com/dereckmezquita/dmplot}, }"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"dmplot","dir":"","previous_headings":"","what":"dmplot","title":"A Framework and Toolkit for Financial and Time Series Data","text":"R framework written high-performance C++ ggplot2 financial time series data analysis. package provides algorithms, functions, ggplot2 layers importantly framework working analysing financial time series data.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Framework and Toolkit for Financial and Time Series Data","text":"can install dmplot using:","code":"# install.packages(\"remotes\") remotes::install_github(\"dereckmezquita/dmplot\")"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"load-libraries","dir":"","previous_headings":"","what":"Load libraries","title":"A Framework and Toolkit for Financial and Time Series Data","text":"","code":"box::use(kucoin[ get_market_data ]) box::use(dt = data.table) box::use(ggplot2) box::use(dmplot)"},{"path":[]},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"get-financial-data","dir":"","previous_headings":"Getting started","what":"Get financial data","title":"A Framework and Toolkit for Financial and Time Series Data","text":"kucoin package interacting kucoin api. can use source financial data long pass variables ggplot2 stat correctly. NOTE: demo dataset included demo/data/ directory.","code":"ticker <- \"BTC/USDT\"  data <- get_market_data(     symbols = ticker,     from = \"2024-07-01 10:36:50 EST\", # lubridate::now() - lubridate::days(7),     to = \"2024-07-08 10:36:53 EST\", # lubridate::now(),     frequency = \"1 hour\" )  head(data) #>      symbol            datetime    open    high     low   close    volume #>      <char>              <POSc>   <num>   <num>   <num>   <num>     <num> #> 1: BTC/USDT 2024-07-01 10:00:00 62942.7 62978.1 62779.0 62851.0  52.82884 #> 2: BTC/USDT 2024-07-01 11:00:00 62850.9 62862.5 62599.7 62663.7  81.03310 #> 3: BTC/USDT 2024-07-01 12:00:00 62663.8 62914.7 62643.8 62880.5  69.31822 #> 4: BTC/USDT 2024-07-01 13:00:00 62880.6 63084.0 62520.6 62687.4 125.46135 #> 5: BTC/USDT 2024-07-01 14:00:00 62687.5 62941.5 62605.0 62822.6 111.57547 #> 6: BTC/USDT 2024-07-01 15:00:00 62818.8 63147.5 62817.9 63126.9  79.18494 #> 1 variable(s) not shown: [turnover <num>]"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"working-with-and-plotting-financial-data","dir":"","previous_headings":"Getting started","what":"Working with and plotting financial data","title":"A Framework and Toolkit for Financial and Time Series Data","text":"demonstrate use stats plotting financial data along theme functions included package: dmplot::stat_candlesticks() dmplot::stat_bollingerbands() dmplot::stat_movingaverages() dmplot::stat_macd() theme functions styling: dmplot::theme_dereck_dark() dmplot::theme_dereck_light() dmplot framework provides number high-performance C++ implementations technical indicators can used directly data.table := operator. allows one leverage power data.table speed C++ calculations. dmplot::bb() - Bollinger Bands dmplot::ema() - Exponential Moving Average, wilder argument dmplot::macd() - Moving Average Convergence Divergence dmplot::mom() - Momentum dmplot::monte_carlo() - Monte Carlo simulation dmplot::roc() - Rate Change dmplot::rsi() - Relative Strength Index dmplot::sma() - Simple Moving Average One can easily use external packages calculate indicators long return list can coerced list. reason want impose use “Tidy Data” principles, convention ggplot2 follows allow us easily build analyses plots layers. information working dmplot see Getting started dmplot framework.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"ema-and-bollinger-bands","dir":"","previous_headings":"Getting started > Working with and plotting financial data","what":"EMA and Bollinger Bands","title":"A Framework and Toolkit for Financial and Time Series Data","text":"demonstrate one might use external package calculate indicator EMA (TTR). dmplot also provides high-performance C++ implmentation ema bb can used directly data.table := operator. dmplot framework can build analyses plots layers. First create candlestick plot add EMA Bollinger Bands separate layers. allow us dynamically overlay different indicators analyses.","code":"box::use(TTR[ EMA ])  data2 <- dt$copy(data)  # wrap to return a list ema <- function(x, n, wilder = TRUE) {     return(as.list(as.data.frame(EMA(x, n = n, wilder = wilder)))) }  # calculate the short and long moving averages data2[, ema_short := ema(close, n = 10, wilder = TRUE)] data2[, ema_long := ema(close, n = 50, wilder = TRUE)]  # use dmplot's C++ implementation of bollinger bands data2[,     c(\"bb_lower\", \"bb_mavg\", \"bb_upper\", \"bb_pct\") := dmplot$bb(close, n = 10, sd = 2) ]  tail(data2[, .(datetime, close, ema_short, ema_long, bb_lower, bb_mavg, bb_upper)]) #>               datetime   close ema_short ema_long bb_lower  bb_mavg bb_upper #>                 <POSc>   <num>     <num>    <num>    <num>    <num>    <num> #> 1: 2024-07-08 05:00:00 55479.1  56208.32 57477.51 54344.97 55769.94 57194.91 #> 2: 2024-07-08 06:00:00 55629.8  56150.47 57440.56 54589.01 55606.22 56623.43 #> 3: 2024-07-08 07:00:00 55843.9  56119.81 57408.62 54726.81 55531.58 56336.35 #> 4: 2024-07-08 08:00:00 57773.6  56285.19 57415.92 54157.92 55669.65 57181.38 #> 5: 2024-07-08 09:00:00 57514.7  56408.14 57417.90 53958.81 55835.80 57712.79 #> 6: 2024-07-08 10:00:00 56817.6  56449.09 57405.89 54113.75 56006.43 57899.11 candle_plot <- data2 |>     ggplot2$ggplot(ggplot2$aes(         x = datetime,         open = open,         high = high,         low = low,         close = close     )) +     ## ------------------------------------     dmplot$stat_candlestick() +     ## ------------------------------------     ggplot2$scale_x_datetime(date_breaks = \"1 day\", date_labels = \"%b %d\") +     ggplot2$labs(         title = paste(ticker, \"- Candlestick with EMA and Bollinger Bands\"),         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(axis.text.x = ggplot2$element_text(angle = 45, hjust = 1))  ema_layer <- dmplot$stat_movingaverages(data = data2,         ggplot2$aes(x = datetime, short = ema_short, long = ema_long),         alpha = list(mavg = 0.5),         colour = list(\"cyan\", \"magenta\")     )  bb_layer <- dmplot$stat_bollingerbands(data = data2,         ggplot2$aes(ymin = bb_lower, mavg = bb_mavg, ymax = bb_upper),         colour = list(\"pink\", \"cyan\", \"cyan\")     )  print(candle_plot + ema_layer + bb_layer)"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"macd","dir":"","previous_headings":"Getting started > Working with and plotting financial data","what":"MACD","title":"A Framework and Toolkit for Financial and Time Series Data","text":"Plotting MACD (moving average convergence divergence) indicator:  Now let’s plot light theme:","code":"data2 <- dt$copy(data)  data2[, c(\"macd\", \"macd_signal\") := dmplot$macd(close, s = 12, l = 26, k = 9)] data2[, macd_diff := macd - macd_signal]  tail(data2[, .(datetime, close, macd, macd_signal, macd_diff)]) #>               datetime   close       macd macd_signal   macd_diff #>                 <POSc>   <num>      <num>       <num>       <num> #> 1: 2024-07-08 05:00:00 55479.1 -0.9768488  -0.7276772 -0.24917161 #> 2: 2024-07-08 06:00:00 55629.8 -0.9398049  -0.7701027 -0.16970222 #> 3: 2024-07-08 07:00:00 55843.9 -0.8695678  -0.7899957 -0.07957204 #> 4: 2024-07-08 08:00:00 57773.6 -0.5298231  -0.7379612  0.20813814 #> 5: 2024-07-08 09:00:00 57514.7 -0.2950758  -0.6493841  0.35430831 #> 6: 2024-07-08 10:00:00 56817.6 -0.2066996  -0.5608472  0.35414763 macd_plot <- ggplot2$ggplot(data2, ggplot2$aes(x = datetime)) +     ## ------------------------------------     dmplot$stat_macd(         ggplot2$aes(macd = macd, macd_signal = macd_signal, macd_diff = macd_diff)     ) +     ggplot2$scale_x_datetime(         date_breaks = \"12 hour\", date_labels = \"%Y-%m-%d %H:%M\"     ) +     ggplot2$scale_y_continuous(n.breaks = 15) +     ggplot2$labs(         title = paste(ticker, \"- MACD\"),         x = \"Date\",         y = \"MACD Value\"     ) +     dmplot$theme_dereck_dark() +     ggplot2$theme(         axis.text.x = ggplot2$element_text(angle = 45, hjust = 1),         panel.grid.minor = ggplot2::element_blank()     )  print(macd_plot) macd_plot +     dmplot$theme_dereck_light() +     ggplot2$theme(         axis.text.x = ggplot2$element_text(angle = 45, hjust = 1),         panel.grid.minor = ggplot2::element_blank()     )"},{"path":"https://dereckmezquita.github.io/dmplot/index.html","id":"benchmarking-dmplots-high-performance-c-technical-indicators","dir":"","previous_headings":"Getting started","what":"Benchmarking dmplot’s high-performance C++ technical indicators","title":"A Framework and Toolkit for Financial and Time Series Data","text":"simple demonstration benchmark dmplot’s Bolinger Bands implementation vs TTR package. Note despite using version wrapped return list TTR implementation still significantly slower dmplot’s C++ implementation.","code":"box::use(microbenchmark[ microbenchmark ]) box::use(TTR[ BBands ])  ttr_bb_wrapped <- function(close, n = 2, sd = 2) {     return(as.list(as.data.frame(BBands(close, n = n, sd = sd)))) }  benchmark_reps <- 10L time_interval <- 5L standard_dev <- 2L  single_micro <- microbenchmark(     ttr_bb_naked = BBands(data$close, n = time_interval, sd = standard_dev),     ttr_bb_wrapped = ttr_bb_wrapped(data$close, n = time_interval, sd = standard_dev),     dmplot_bb = dmplot$bb(data$close, n = time_interval, sd = standard_dev),      times = benchmark_reps )   ggplot2$autoplot(single_micro) +     dmplot$theme_dereck_dark() +     ggplot2$geom_violin(ggplot2$aes(fill = expr), linewidth = 0.25) +     ggplot2$scale_fill_manual(         values = c(\"ttr_bb_naked\" = \"red\", \"ttr_bb_wrapped\" = \"red\", \"dmplot_bb\" = \"green\")     ) +     ggplot2$labs(         title = \"dmpplot vs TTR BBands\"     ) +     ggplot2$theme(legend.position = \"none\")"},{"path":"https://dereckmezquita.github.io/dmplot/reference/bb.html","id":null,"dir":"Reference","previous_headings":"","what":"Bollinger Bands — bb","title":"Bollinger Bands — bb","text":"Bollinger Bands","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/bb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bollinger Bands — bb","text":"","code":"bb(price, n, sd = 2L)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/bb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bollinger Bands — bb","text":"price numeric vector prices n period moving average sd number standard deviations bands","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/bb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bollinger Bands — bb","text":"list containing lower band, moving average, upper band, percentage B","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/cite_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Print citation information for this package — cite_package","title":"Print citation information for this package — cite_package","text":"Print citation information package","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/cite_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print citation information for this package — cite_package","text":"","code":"cite_package()"},{"path":"https://dereckmezquita.github.io/dmplot/reference/ema.html","id":null,"dir":"Reference","previous_headings":"","what":"Exponential Moving Average — ema","title":"Exponential Moving Average — ema","text":"Exponential Moving Average","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/ema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exponential Moving Average — ema","text":"","code":"ema(price, n, wilder = FALSE)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/ema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exponential Moving Average — ema","text":"price numeric vector prices n period EMA wilder Whether use Wilder's smoothing","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/ema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exponential Moving Average — ema","text":"numeric vector containing EMA values","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/fib.html","id":null,"dir":"Reference","previous_headings":"","what":"Fibonacci Retracement Levels Calculate the Fibonacci retracement levels for a given price range — fib","title":"Fibonacci Retracement Levels Calculate the Fibonacci retracement levels for a given price range — fib","text":"Fibonacci Retracement Levels Calculate Fibonacci retracement levels given price range","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/fib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fibonacci Retracement Levels Calculate the Fibonacci retracement levels for a given price range — fib","text":"","code":"fib(high, low)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/fib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fibonacci Retracement Levels Calculate the Fibonacci retracement levels for a given price range — fib","text":"high high price low low price","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/fib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fibonacci Retracement Levels Calculate the Fibonacci retracement levels for a given price range — fib","text":"list containing retracement levels prices","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/ggplot2-ggproto.html","id":null,"dir":"Reference","previous_headings":"","what":"StatShadedDateRange — StatShadedDateRange","title":"StatShadedDateRange — StatShadedDateRange","text":"StatShadedDateRange","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/ichimoku_cloud.html","id":null,"dir":"Reference","previous_headings":"","what":"Ichimoku Cloud Calculate the Ichimoku Cloud for a given price series — ichimoku_cloud","title":"Ichimoku Cloud Calculate the Ichimoku Cloud for a given price series — ichimoku_cloud","text":"Ichimoku Cloud Calculate Ichimoku Cloud given price series","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/ichimoku_cloud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ichimoku Cloud Calculate the Ichimoku Cloud for a given price series — ichimoku_cloud","text":"","code":"ichimoku_cloud(   high,   low,   close,   tenkan_period = 9L,   kijun_period = 26L,   senkou_period = 52L )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/ichimoku_cloud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ichimoku Cloud Calculate the Ichimoku Cloud for a given price series — ichimoku_cloud","text":"high high prices low low prices close closing prices tenkan_period period Tenkan-sen (Conversion Line) kijun_period period Kijun-sen (Base Line) senkou_period period Senkou Span B (Leading Span B)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/ichimoku_cloud.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ichimoku Cloud Calculate the Ichimoku Cloud for a given price series — ichimoku_cloud","text":"list containing Ichimoku Cloud components","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/macd.html","id":null,"dir":"Reference","previous_headings":"","what":"Moving Average Convergence Divergence (MACD) — macd","title":"Moving Average Convergence Divergence (MACD) — macd","text":"Moving Average Convergence Divergence (MACD)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/macd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moving Average Convergence Divergence (MACD) — macd","text":"","code":"macd(price, s, l, k, percent = TRUE)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/macd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moving Average Convergence Divergence (MACD) — macd","text":"price numeric vector prices s short-term period l long-term period k signal line period percent Whether return MACD percentage","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/macd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moving Average Convergence Divergence (MACD) — macd","text":"list containing MACD signal line values","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/mom.html","id":null,"dir":"Reference","previous_headings":"","what":"Momentum — mom","title":"Momentum — mom","text":"Momentum","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/mom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Momentum — mom","text":"","code":"mom(price, n)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/mom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Momentum — mom","text":"price numeric vector prices n period momentum calculation","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/mom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Momentum — mom","text":"numeric vector containing momentum values","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/monte_carlo.html","id":null,"dir":"Reference","previous_headings":"","what":"Monte Carlo Simulation — monte_carlo","title":"Monte Carlo Simulation — monte_carlo","text":"Monte Carlo Simulation","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/monte_carlo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monte Carlo Simulation — monte_carlo","text":"","code":"monte_carlo(seed_price, daily_vol, num_sims, num_days)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/monte_carlo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monte Carlo Simulation — monte_carlo","text":"seed_price starting price daily_vol daily volatility num_sims number simulations run num_days number days simulate","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/monte_carlo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monte Carlo Simulation — monte_carlo","text":"list containing simulation results end prices","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/roc.html","id":null,"dir":"Reference","previous_headings":"","what":"Rate of Change (ROC) — roc","title":"Rate of Change (ROC) — roc","text":"Rate Change (ROC)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/roc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rate of Change (ROC) — roc","text":"","code":"roc(price, n, type = \"c\")"},{"path":"https://dereckmezquita.github.io/dmplot/reference/roc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rate of Change (ROC) — roc","text":"price numeric vector prices n period ROC calculation type type ROC calculation: 'c' continuous (default) 'd' discrete","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/roc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rate of Change (ROC) — roc","text":"numeric vector containing ROC values","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/rsi.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative Strength Index (RSI) — rsi","title":"Relative Strength Index (RSI) — rsi","text":"Relative Strength Index (RSI)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/rsi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative Strength Index (RSI) — rsi","text":"","code":"rsi(price, n, method = \"e\")"},{"path":"https://dereckmezquita.github.io/dmplot/reference/rsi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative Strength Index (RSI) — rsi","text":"price numeric vector prices n period RSI calculation method method average calculation: 'e' EMA (default) 's' SMA","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/rsi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relative Strength Index (RSI) — rsi","text":"numeric vector containing RSI values","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/sma.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple Moving Average (SMA) — sma","title":"Simple Moving Average (SMA) — sma","text":"Simple Moving Average (SMA)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/sma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple Moving Average (SMA) — sma","text":"","code":"sma(price, n)"},{"path":"https://dereckmezquita.github.io/dmplot/reference/sma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple Moving Average (SMA) — sma","text":"price numeric vector prices n period SMA calculation","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/sma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple Moving Average (SMA) — sma","text":"numeric vector containing SMA values","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":null,"dir":"Reference","previous_headings":"","what":"Bollinger bands `ggplot2` layer — stat_bollingerbands","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"`stat_bollingerbands` `ggplot2` layer allows plot Bollinger bands `ggplot2` plot either providing function calculate bands providing column names required metrics `ggplot2::aes` argument previously calculated. free use whatever algorithm/function wish long : 1. using function must return named `list` - ordered - following elements: `\"bb_lower\"`, `\"bb_mavg\"`, `\"bb_upper\"`, `\"bb_pct\"`. 2. using previously calculated metrics must provide `ggplot2::aes` values; `aes` must `ymin`, `mavg`, `ymax`. See examples details.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"","code":"stat_bollingerbands(   mapping = NULL,   data = NULL,   geom = \"ribbon\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   alpha = list(ribbon = 0.1, mavg = 0.5),   linetype = list(border = \"dotted\", mavg = 4),   colour = list(ribbon = \"yellow\", border = \"magenta\", mavg = \"magenta\"),   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"mapping `ggplot2::aes` object (required - default `NULL`). data `data.table` object (required - default `NULL`). alpha `list` two elements \"ribbon\" \"mavg\". alpha values ribbon moving average lines (optional - default `list(ribbon = 0.1, mavg = 0.5)`). linetype `list` two elements \"border\" \"mavg\". line types border moving average lines (optional - default `list(border = \"dotted\", mavg = 4)`). ... Additional arguments passed `ggplot2::layer`. linewidth `list` two elements \"border\" \"mavg\". line widths border moving average lines (optional - default `list(border = 1, mavg = 1)`). colours `list` two elements \"ribbon\", \"border\", \"mavg\". colours ribbon, border, moving average lines (optional - default `list(ribbon = \"yellow\", border = \"magenta\", mavg = \"magenta\")`).","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"`ggplot2` layer.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"`ggplot2` extension; used `+` operator adding layer `ggplot2` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"stat_movingaverages understands following aesthetics (required aesthetics bold): x -- datetime (x-axis) ymin -- required lower bounds band (y-axis) ymax -- required upper bounds band (y-axis) mavg -- required center line band (y-axis)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"Dereck Mezquita","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_bollingerbands.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bollinger bands `ggplot2` layer — stat_bollingerbands","text":"","code":"# \\donttest{  # get some financial data # kucoin is private package - you can use any data source ticker <- \"BTC/USDT\"  dt <- kucoin::get_market_data(     symbols = ticker,     from = \"2022-11-28 15:29:43 EST\", # lubridate::now() - lubridate::days(7),     to = \"2022-12-05 15:29:31 EST\",# lubridate::now(),     frequency = \"1 hour\" )  dt #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover #>         <num> #>   1:  5301836 #>   2: 13557348 #>   3:  8270203 #>   4:  4082464 #>   5:  3653147 #>  ---          #> 165:  3058929 #> 166:  3447960 #> 167:  1815447 #> 168:  2416907 #> 169:  8630174  # we need a function that calculates the indicator for us # typically I like to write my own functions in C++; in this case we will use TTR's # the stat expects a named list to be returned - we redefine ttr bb <- function(close, n = 10, sd = 2) {     return(as.list(as.data.frame(TTR::BBands(close, n = n, sd = sd)))) }  # calculate the short and long moving averages dt[, c(\"bb_lower\", \"bb_mavg\", \"bb_upper\", \"bb_pct\") := bb(close, n = 10, sd = 2)] #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover bb_lower  bb_mavg bb_upper        bb_pct #>         <num>    <num>    <num>    <num>         <num> #>   1:  5301836       NA       NA       NA            NA #>   2: 13557348       NA       NA       NA            NA #>   3:  8270203       NA       NA       NA            NA #>   4:  4082464       NA       NA       NA            NA #>   5:  3653147       NA       NA       NA            NA #>  ---                                                   #> 165:  3058929 17207.96 17301.26 17394.56  0.5575587312 #> 166:  3447960 17212.50 17302.61 17392.72  0.2330342843 #> 167:  1815447 17229.77 17305.83 17381.89 -0.0004838333 #> 168:  2416907 17201.48 17290.90 17380.32  0.0208028612 #> 169:  8630174 17117.69 17265.48 17413.27 -0.1173496659  dt |>     ggplot2::ggplot(ggplot2::aes(         x = datetime,         open = open,         close = close,         high = high,         low = low,         group = symbol     )) +     ## ------------------------------------     dmplot::stat_candlestick() +     ## ------------------------------------     # provide the colnames to the calculated indicators as aes values     dmplot::stat_bollingerbands(ggplot2::aes(ymin = bb_lower, mavg = bb_mavg, ymax = bb_upper), colour = list(\"pink\", \"cyan\", \"cyan\")) +     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     )  # }"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":null,"dir":"Reference","previous_headings":"","what":"Candlesticks financial `ggplot2` layer — stat_candlestick","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"Candlesticks financial `ggplot2` layer","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"","code":"stat_candlestick(   mapping = NULL,   data = NULL,   geom = \"linerange\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   colours = list(up = \"#55BE8B\", down = \"#ED4D5D\", no_change = \"#535453\"),   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"mapping `ggplot2::aes` object (required - default `NULL`). `x`: x-axis value, usually representing time. `open`: opening price. `close`: closing price. `high`: highest price time range. `low`: lowest price time range. `group`: (optional) grouping variable. data `data.table` object (required - default `NULL`). colours `list` three elements \"\", \"\", \"no_change\". colours candlesticks positive change price action, negative change change respectively. ... Additional arguments passed `ggplot2::layer`.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"`ggplot2::layer` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"`ggplot2` extension; used `+` operator adding layer `ggplot2` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"Dereck Mezquita","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_candlestick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Candlesticks financial `ggplot2` layer — stat_candlestick","text":"","code":"# get some financial data # kucoin is a private package - you can use any data source ticker <- \"BTC/USDT\"  dt <- kucoin::get_market_data(     symbols = ticker,     from = \"2022-11-28 15:29:43 EST\", # lubridate::now() - lubridate::days(7),     to = \"2022-12-05 15:29:31 EST\",# lubridate::now(),     frequency = \"1 hour\" )  dt #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover #>         <num> #>   1:  5301836 #>   2: 13557348 #>   3:  8270203 #>   4:  4082464 #>   5:  3653147 #>  ---          #> 165:  3058929 #> 166:  3447960 #> 167:  1815447 #> 168:  2416907 #> 169:  8630174  dt |>     ggplot2::ggplot(ggplot2::aes(         x = datetime,         open = open,         close = close,         high = high,         low = low,         group = symbol     )) +     ## ------------------------------------     dmplot::stat_candlestick() +     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":null,"dir":"Reference","previous_headings":"","what":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"`stat_macd` `ggplot2` layer allows plot `ggplot2` layer moving average convergence divergence (macd) providing column names `ggplot2::aes` previously calculated metrics. free use whatever algorithm desire; result line plot overlayed histogram. use layer provide `ggplot2::aes` values `x` (datetime x-axis) `macd` (y-axis) `macd_signal` (y-axis) `macd_diff` (y-axis). See examples details.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"","code":"stat_macd(   mapping = NULL,   data = NULL,   geom = \"line\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   alpha_lines = 0.75,   alpha_histogram = 0.5,   colour_lines = list(macd = \"blue\", macd_signal = \"red\"),   colour_histogram = list(positive = NA_character_, negative = NA_character_),   fill_histogram = list(positive = \"green\", negative = \"red\"),   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"mapping `ggplot2::aes` object (required - default `NULL`). data `data.table` object (required - default `NULL`). alpha_lines `numeric` vector length one; alpha lines (optional - default `0.75`). alpha_histogram `numeric` vector length one; alpha histogram (optional - default `0.5`). colour_lines named unnamed `list` two elements \"macd\" \"macd_signal\" (optional - default `list(macd = \"blue\", macd_signal = \"red\")`). colour_histogram named unnamed `list` two elements \"positive\" \"negative\" (optional - default `list(positive = NA_character_, negative = NA_character_)`). fill_histogram named unnamed `list` two elements \"positive\" \"negative\" (optional - default `list(positive = \"green\", negative = \"red\")`). linewidth `numeric` vector length one; linewidth line (optional - default `1.75`).","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"`ggplot2::layer` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"`ggplot2` extension; used `+` operator adding layer `ggplot2` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"stat_movingaverages understands following aesthetics (required aesthetics bold): x -- datetime (x-axis) macd -- y-axis macd_signal -- y-axis macd_diff -- y-axis","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"Dereck Mezquita","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_macd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moving average convergence divergence (macd) `ggplot2` layer — stat_macd","text":"","code":"# get some financial data # kucoin is private package - you can use any data source ticker <- \"BTC/USDT\"  dt <- kucoin::get_market_data(     symbols = ticker,     from = \"2022-11-28 15:29:43 EST\", # lubridate::now() - lubridate::days(7),     to = \"2022-12-05 15:29:31 EST\",# lubridate::now(),     frequency = \"1 hour\" )  dt #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover #>         <num> #>   1:  5301836 #>   2: 13557348 #>   3:  8270203 #>   4:  4082464 #>   5:  3653147 #>  ---          #> 165:  3058929 #> 166:  3447960 #> 167:  1815447 #> 168:  2416907 #> 169:  8630174  # we need a function that calculates the indicator for us # typically I like to write my own functions in C++; in this case we will use TTR's # the stat expects a named list to be returned - we redefine ttr macd <- function(x, s = 12, l = 26, k = 9) {as.list(as.data.frame(TTR::MACD(x, s, l, k)))}  # macd(dt$close) dt[, c(\"macd\", \"macd_signal\") := macd(close, s = 12, l = 26, k = 9)] #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover      macd macd_signal #>         <num>     <num>       <num> #>   1:  5301836        NA          NA #>   2: 13557348        NA          NA #>   3:  8270203        NA          NA #>   4:  4082464        NA          NA #>   5:  3653147        NA          NA #>  ---                                #> 165:  3058929 0.4731906   0.4505607 #> 166:  3447960 0.4303121   0.4465110 #> 167:  1815447 0.3803542   0.4332796 #> 168:  2416907 0.3255538   0.4117344 #> 169:  8630174 0.2223466   0.3738569 dt[, macd_diff := macd - macd_signal] #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover      macd macd_signal   macd_diff #>         <num>     <num>       <num>       <num> #>   1:  5301836        NA          NA          NA #>   2: 13557348        NA          NA          NA #>   3:  8270203        NA          NA          NA #>   4:  4082464        NA          NA          NA #>   5:  3653147        NA          NA          NA #>  ---                                            #> 165:  3058929 0.4731906   0.4505607  0.02262998 #> 166:  3447960 0.4303121   0.4465110 -0.01619881 #> 167:  1815447 0.3803542   0.4332796 -0.05292542 #> 168:  2416907 0.3255538   0.4117344 -0.08618062 #> 169:  8630174 0.2223466   0.3738569 -0.15151027  na.omit(dt) |>     ggplot2::ggplot(ggplot2::aes(x = datetime)) +     dmplot::stat_macd(ggplot2::aes(macd = macd, macd_signal = macd_signal, macd_diff = macd_diff)) +     ## ------------------------------------     # provide the colnames to the calculated indicators as aes values     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":null,"dir":"Reference","previous_headings":"","what":"Moving averages `ggplot2` layer — stat_movingaverages","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"`stat_movingaverages` `ggplot2` layer allows plot moving averages `ggplot2` plot either providing column names `ggplot2::aes` previously calculated metrics. free use whatever algorithm desire; result two line plots one short moving average one long moving average. use layer provide `ggplot2::aes` values `x` (datetime x-axis) `short` `long` (y-axis). See examples details.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"","code":"stat_movingaverages(   mapping = NULL,   data = NULL,   geom = \"line\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   linewidth = 1.75,   alpha = 0.75,   colour = list(short = \"yellow\", long = \"purple\"),   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"mapping `ggplot2::aes` object (required - default `NULL`). data `data.table` object (required - default `NULL`). linewidth `numeric` vector length one; width line (optional - default `1.75`). alpha `numeric` vector length one; alpha line (optional - default `0.75`). colour named unnamed `list` three elements \"short\" \"long\". colours short long moving averages (optional - default `list(short = \"red\", long = \"blue\")`).","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"`ggplot2::layer` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"`ggplot2` extension; used `+` operator adding layer `ggplot2` object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"stat_movingaverages understands following aesthetics (required aesthetics bold): x -- datetime (x-axis) short -- values short moving average (y-axis). long -- values long moving average (y-axis)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"Dereck Mezquita","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_movingaverages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moving averages `ggplot2` layer — stat_movingaverages","text":"","code":"# get some financial data # kucoin is private package - you can use any data source ticker <- \"BTC/USDT\"  dt <- kucoin::get_market_data(     symbols = ticker,     from = \"2022-11-28 15:29:43 EST\", # lubridate::now() - lubridate::days(7),     to = \"2022-12-05 15:29:31 EST\", # lubridate::now(),     frequency = \"1 hour\" )  dt #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover #>         <num> #>   1:  5301836 #>   2: 13557348 #>   3:  8270203 #>   4:  4082464 #>   5:  3653147 #>  ---          #> 165:  3058929 #> 166:  3447960 #> 167:  1815447 #> 168:  2416907 #> 169:  8630174  # we need a function that calculates the indicator for us # typically I like to write my own functions in C++; in this case we will use TTR's # the stat expects a named list to be returned - we redefine ttr ema <- function(close, n = 2, wilder = TRUE) {     return(as.list(as.data.frame(TTR::EMA(close, n = n, wilder = wilder)))) }  # calculate the short and long moving averages dt[, ema_short := ema(close, n = 10, wilder = TRUE)] #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover ema_short #>         <num>     <num> #>   1:  5301836        NA #>   2: 13557348        NA #>   3:  8270203        NA #>   4:  4082464        NA #>   5:  3653147        NA #>  ---                    #> 165:  3058929  17226.35 #> 166:  3447960  17229.17 #> 167:  1815447  17229.22 #> 168:  2416907  17226.82 #> 169:  8630174  17212.44 dt[, ema_long := ema(close, n = 50, wilder = TRUE)] #>        symbol            datetime    open    high     low   close   volume #>        <char>              <POSc>   <num>   <num>   <num>   <num>    <num> #>   1: BTC/USDT 2022-11-28 15:00:00 16215.3 16233.6 16126.0 16144.1 327.8979 #>   2: BTC/USDT 2022-11-28 16:00:00 16144.1 16382.6 16000.0 16305.9 837.5801 #>   3: BTC/USDT 2022-11-28 17:00:00 16305.9 16382.0 16195.4 16205.4 507.8351 #>   4: BTC/USDT 2022-11-28 18:00:00 16206.1 16230.7 16146.5 16162.6 252.3387 #>   5: BTC/USDT 2022-11-28 19:00:00 16161.7 16253.3 16150.1 16220.9 225.4121 #>  ---                                                                       #> 165: BTC/USDT 2022-12-05 11:00:00 17295.2 17314.3 17283.8 17312.0 176.8633 #> 166: BTC/USDT 2022-12-05 12:00:00 17312.0 17318.6 17230.5 17254.5 199.6922 #> 167: BTC/USDT 2022-12-05 13:00:00 17254.5 17282.5 17208.1 17229.7 105.2655 #> 168: BTC/USDT 2022-12-05 14:00:00 17229.8 17241.4 17175.1 17205.2 140.4375 #> 169: BTC/USDT 2022-12-05 15:00:00 17205.1 17205.1 17021.6 17083.0 504.9158 #>      turnover ema_short ema_long #>         <num>     <num>    <num> #>   1:  5301836        NA       NA #>   2: 13557348        NA       NA #>   3:  8270203        NA       NA #>   4:  4082464        NA       NA #>   5:  3653147        NA       NA #>  ---                             #> 165:  3058929  17226.35 17017.34 #> 166:  3447960  17229.17 17022.08 #> 167:  1815447  17229.22 17026.23 #> 168:  2416907  17226.82 17029.81 #> 169:  8630174  17212.44 17030.88  dt |>     ggplot2::ggplot(ggplot2::aes(         x = datetime,         open = open,         close = close,         high = high,         low = low,         group = symbol     )) +     ## ------------------------------------     dmplot::stat_candlestick() +     ## ------------------------------------     # provide the colnames to the calculated indicators as aes values     dmplot::stat_movingaverages(ggplot2::aes(short = ema_short, long = ema_long), alpha = list(mavg = 0.5)) +     ## ------------------------------------     ggplot2::scale_x_continuous(n.breaks = 25, labels = \\(x) {         lubridate::floor_date(lubridate::as_datetime(x), \"hours\")     }) +     ggplot2::scale_y_continuous(n.breaks = 25) +     ggplot2::labs(         title = ticker,         x = \"Date\",         y = \"Price (USD)\"     ) +     dmplot::theme_dereck_dark() +     ggplot2::theme(         axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),         panel.grid.minor = ggplot2::element_blank()     )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"function creates ggplot2 layer shades date ranges based grouped data. particularly useful highlighting specific periods time series data.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"","code":"stat_shade_ranges(   mapping = NULL,   data = NULL,   geom = \"linerange\",   position = \"identity\",   na.rm = TRUE,   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"mapping Set aesthetic mappings created aes. Must include `x` dates `group` categorizing ranges. data data displayed layer. NULL, default, data inherited plot data specified call ggplot. geom geometric object use display data. Default \"linerange\". position Position adjustment, either string, result call position adjustment function. Default \"identity\". na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. inherit.aes FALSE, overrides default aesthetics, rather combining . ... arguments passed layer. often aesthetics, used set aesthetic fixed value.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"ggplot2 layer object.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/stat_shade_ranges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shaded Date Ranges ggplot2 layer — stat_shade_ranges","text":"","code":"if (FALSE) { library(ggplot2) library(data.table)  # Create sample data dt <- data.table(     datetime = seq(as.POSIXct(\"2023-01-01\"), as.POSIXct(\"2023-12-31\"), by = \"day\"),     close = runif(365, 100, 200),     call = sample(c(\"buy\", \"sell\", \"none\"), 365, replace = TRUE, prob = c(0.3, 0.3, 0.4)) )  # Create plot with shaded ranges ggplot(dt, aes(x = datetime)) +     geom_line(aes(y = close), linewidth = 1.5, colour = \"white\") +     stat_shade_ranges(aes(group = call, fill = call), alpha = 0.25) +     scale_fill_manual(         name = \"Call\",         values = c(\"buy\" = \"green\", \"sell\" = \"red\", \"none\" = \"gray\")     ) +     theme_minimal() +     labs(title = \"Stock Price with Buy/Sell Signals\", x = \"Date\", y = \"Price\") }"},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_dark.html","id":null,"dir":"Reference","previous_headings":"","what":"Dereck's ggplot theme (dark) — theme_dereck_dark","title":"Dereck's ggplot theme (dark) — theme_dereck_dark","text":"Dereck's ggplot theme (dark)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_dark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dereck's ggplot theme (dark) — theme_dereck_dark","text":"","code":"theme_dereck_dark(base_size = 12, base_family = \"\")"},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_dark.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dereck's ggplot theme (dark) — theme_dereck_dark","text":"Dereck Mezquita function allows add derecksnotes theme ggplot graphics.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_dark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dereck's ggplot theme (dark) — theme_dereck_dark","text":"","code":"iris |>     ggplot2::ggplot(ggplot2::aes(x = Sepal.Length, y = Sepal.Width)) +     ggplot2::geom_point(ggplot2::aes(color = Species, shape = Species)) +     ggplot2::labs(title = \"Iris data\", subtitle = \"Classic data\", x = \"Sepal Length\", y = \"Sepal Width\") +     ggplot2::facet_grid(~Species) +     dmplot::theme_dereck_dark()   data.frame(year = time(nhtemp), tmps = as.matrix(nhtemp)) |>     ggplot2::ggplot(ggplot2::aes(x = year, y = tmps)) +     ggplot2::geom_line() +     # geom_hline(yintercept = 0, size = 1, colour = \"#333333\") +     ggplot2::labs(title = \"New Hampshire yearly temperatures\", subtitle = \"Collected between 1912 and 1971\", x = \"Year\", y = \"Average temperature\") +     dmplot::theme_dereck_dark() #> Don't know how to automatically pick scale for object of type <ts>. Defaulting #> to continuous."},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_light.html","id":null,"dir":"Reference","previous_headings":"","what":"Dereck's ggplot theme (light) — theme_dereck_light","title":"Dereck's ggplot theme (light) — theme_dereck_light","text":"Dereck's ggplot theme (light)","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_light.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dereck's ggplot theme (light) — theme_dereck_light","text":"","code":"theme_dereck_light(base_size = 11, base_family = \"\")"},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_light.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dereck's ggplot theme (light) — theme_dereck_light","text":"Dereck Mezquita function allows add derecksnotes theme ggplot graphics.","code":""},{"path":"https://dereckmezquita.github.io/dmplot/reference/theme_dereck_light.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dereck's ggplot theme (light) — theme_dereck_light","text":"","code":"iris |>     ggplot2::ggplot(ggplot2::aes(x = Sepal.Length, y = Sepal.Width)) +     ggplot2::geom_point(ggplot2::aes(color = Species, shape = Species)) +     ggplot2::labs(title = \"Iris data\", subtitle = \"Classic data\", x = \"Sepal Length\", y = \"Sepal Width\") +     ggplot2::facet_grid(~Species) +     dmplot::theme_dereck_light()   data.frame(year = time(nhtemp), tmps = as.matrix(nhtemp)) |>     ggplot2::ggplot(ggplot2::aes(x = year, y = tmps)) +     ggplot2::geom_line() +     # geom_hline(yintercept = 0, size = 1, colour = \"#333333\") +     ggplot2::labs(title = \"New Hampshire yearly temperatures\", subtitle = \"Collected between 1912 and 1971\", x = \"Year\", y = \"Average temperature\") +     dmplot::theme_dereck_light() #> Don't know how to automatically pick scale for object of type <ts>. Defaulting #> to continuous."}]
