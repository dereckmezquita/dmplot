% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stat_movingaverages.R
\name{stat_movingaverages}
\alias{stat_movingaverages}
\title{Moving averages `ggplot2` layer}
\usage{
stat_movingaverages(
  mapping = NULL,
  data = NULL,
  geom = "line",
  position = "identity",
  na.rm = TRUE,
  show.legend = NA,
  inherit.aes = TRUE,
  size = 1.75,
  alpha = 0.75,
  n = list(short = 20L, long = 200L),
  colour = list(short = "yellow", long = "purple"),
  ...
)
}
\arguments{
\item{mapping}{A `ggplot2::aes` object (required - default `NULL`).}

\item{data}{A `data.table` object (required - default `NULL`).}

\item{size}{A `numeric` vector of length one; the size of the line (optional - default `1.75`).}

\item{alpha}{A `numeric` vector of length one; the alpha of the line (optional - default `0.75`).}

\item{colour}{A named or unnamed `list` with three elements "short" and "long". These are the colours for the short and long moving averages (optional - default `list(short = "red", long = "blue")`).}
}
\value{
A `ggplot2::layer` object.
}
\description{
`stat_movingaverages` is a `ggplot2` layer that allows you to plot moving averages on a `ggplot2` plot either by providing the column names `ggplot2::aes` of the previously calculated metrics.

You are free to use whatever algorithm you desire; the result will be two line plots one for a short moving average and one for a long moving average.

To use this layer provide `ggplot2::aes` values for `x` (datetime x-axis) and `short` and `long` (y-axis).

See examples for more details.
}
\details{
This is a `ggplot2` extension; it is used with the `+` operator for adding a layer to a `ggplot2` object.
}
\section{Aesthetics}{

\code{stat_movingaverages} understands the following aesthetics (required aesthetics are in bold):
\itemize{
  \item \strong{x} -- datetime (x-axis)
  \item \strong{short} -- the values for the short moving average (y-axis).
  \item \strong{long} -- the values for the long moving average (y-axis)
}
}

\examples{

# get some financial data
# kucoin is private package - you can use any data source
ticker <- "BTC/USDT"

dt <- kucoin::get_market_data(
    symbols = ticker,
    from = "2022-11-28 15:29:43 EST", # lubridate::now() - lubridate::days(7),
    to = "2022-12-05 15:29:31 EST",# lubridate::now(),
    frequency = "1 hour"
)

dt

# we need a function that calculates the indicator for us
# typically I like to write my own functions in C++; in this case we will use TTR's
# the stat expects a named list to be returned - we redefine ttr
ema <- function(close, n = 2, wilder = TRUE) {
    return(as.list(as.data.frame(TTR::EMA(close, n = n, wilder = wilder))))
}

# calculate the short and long moving averages
dt[, ema_short := ema(close, n = 10, wilder = TRUE)]
dt[, ema_long := ema(close, n = 50, wilder = TRUE)]

dt |>
    ggplot2::ggplot(ggplot2::aes(
        x = datetime,
        open = open,
        close = close,
        high = high,
        low = low,
        group = symbol
    )) +
    ## ------------------------------------
    ddplot::stat_candlestick() +
    ## ------------------------------------
    # provide the colnames to the calculated indicators as aes values
    ddplot::stat_movingaverages(ggplot2::aes(short = ema_short, long = ema_long), alpha = list(mavg = 0.5)) +
    ## ------------------------------------
    ggplot2::scale_x_continuous(n.breaks = 25, labels = \(x) {
        lubridate::floor_date(lubridate::as_datetime(x), "hours")
    }) +
    ggplot2::scale_y_continuous(n.breaks = 25) +
    ggplot2::labs(
        title = ticker,
        x = "Date",
        y = "Price (USD)"
    ) +
    ddplot::theme_dereck_dark() +
    ggplot2::theme(
        axis.text.x = ggplot2::element_text(angle = 75, vjust = 0.925, hjust = 0.975),
        panel.grid.minor = ggplot2::element_blank()
    )

}
\author{
Dereck de Mezquita
}
