// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bb
Rcpp::List bb(std::vector<double> price, int n, int sd);
RcppExport SEXP _dmplot_bb(SEXP priceSEXP, SEXP nSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type price(priceSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(bb(price, n, sd));
    return rcpp_result_gen;
END_RCPP
}
// ema
std::vector<double> ema(std::vector<double> price, int n, bool wilder);
RcppExport SEXP _dmplot_ema(SEXP priceSEXP, SEXP nSEXP, SEXP wilderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type price(priceSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< bool >::type wilder(wilderSEXP);
    rcpp_result_gen = Rcpp::wrap(ema(price, n, wilder));
    return rcpp_result_gen;
END_RCPP
}
// fib
Rcpp::List fib(double high, double low);
RcppExport SEXP _dmplot_fib(SEXP highSEXP, SEXP lowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    rcpp_result_gen = Rcpp::wrap(fib(high, low));
    return rcpp_result_gen;
END_RCPP
}
// ichimoku_cloud
Rcpp::List ichimoku_cloud(NumericVector high, NumericVector low, NumericVector close, int tenkan_period, int kijun_period, int senkou_period);
RcppExport SEXP _dmplot_ichimoku_cloud(SEXP highSEXP, SEXP lowSEXP, SEXP closeSEXP, SEXP tenkan_periodSEXP, SEXP kijun_periodSEXP, SEXP senkou_periodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type high(highSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type low(lowSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type close(closeSEXP);
    Rcpp::traits::input_parameter< int >::type tenkan_period(tenkan_periodSEXP);
    Rcpp::traits::input_parameter< int >::type kijun_period(kijun_periodSEXP);
    Rcpp::traits::input_parameter< int >::type senkou_period(senkou_periodSEXP);
    rcpp_result_gen = Rcpp::wrap(ichimoku_cloud(high, low, close, tenkan_period, kijun_period, senkou_period));
    return rcpp_result_gen;
END_RCPP
}
// ichimoku_cloud2
List ichimoku_cloud2(std::vector<double> high, std::vector<double> low, std::vector<double> close, int tenkan_period, int kijun_period, int senkou_span_b_period, int chikou_shift);
RcppExport SEXP _dmplot_ichimoku_cloud2(SEXP highSEXP, SEXP lowSEXP, SEXP closeSEXP, SEXP tenkan_periodSEXP, SEXP kijun_periodSEXP, SEXP senkou_span_b_periodSEXP, SEXP chikou_shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type high(highSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type low(lowSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type close(closeSEXP);
    Rcpp::traits::input_parameter< int >::type tenkan_period(tenkan_periodSEXP);
    Rcpp::traits::input_parameter< int >::type kijun_period(kijun_periodSEXP);
    Rcpp::traits::input_parameter< int >::type senkou_span_b_period(senkou_span_b_periodSEXP);
    Rcpp::traits::input_parameter< int >::type chikou_shift(chikou_shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(ichimoku_cloud2(high, low, close, tenkan_period, kijun_period, senkou_span_b_period, chikou_shift));
    return rcpp_result_gen;
END_RCPP
}
// macd
List macd(std::vector<double> price, int s, int l, int k, bool percent);
RcppExport SEXP _dmplot_macd(SEXP priceSEXP, SEXP sSEXP, SEXP lSEXP, SEXP kSEXP, SEXP percentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type price(priceSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type percent(percentSEXP);
    rcpp_result_gen = Rcpp::wrap(macd(price, s, l, k, percent));
    return rcpp_result_gen;
END_RCPP
}
// mom
std::vector<double> mom(std::vector<double> price, int n);
RcppExport SEXP _dmplot_mom(SEXP priceSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type price(priceSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(mom(price, n));
    return rcpp_result_gen;
END_RCPP
}
// monte_carlo
Rcpp::List monte_carlo(double seed_price, double daily_vol, int num_sims, int num_days);
RcppExport SEXP _dmplot_monte_carlo(SEXP seed_priceSEXP, SEXP daily_volSEXP, SEXP num_simsSEXP, SEXP num_daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type seed_price(seed_priceSEXP);
    Rcpp::traits::input_parameter< double >::type daily_vol(daily_volSEXP);
    Rcpp::traits::input_parameter< int >::type num_sims(num_simsSEXP);
    Rcpp::traits::input_parameter< int >::type num_days(num_daysSEXP);
    rcpp_result_gen = Rcpp::wrap(monte_carlo(seed_price, daily_vol, num_sims, num_days));
    return rcpp_result_gen;
END_RCPP
}
// roc
std::vector<double> roc(std::vector<double> price, int n, char type);
RcppExport SEXP _dmplot_roc(SEXP priceSEXP, SEXP nSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type price(priceSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< char >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(roc(price, n, type));
    return rcpp_result_gen;
END_RCPP
}
// rsi
std::vector<double> rsi(std::vector<double> price, int n, char method);
RcppExport SEXP _dmplot_rsi(SEXP priceSEXP, SEXP nSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type price(priceSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< char >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(rsi(price, n, method));
    return rcpp_result_gen;
END_RCPP
}
// sma
std::vector<double> sma(std::vector<double> price, int n);
RcppExport SEXP _dmplot_sma(SEXP priceSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type price(priceSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sma(price, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dmplot_bb", (DL_FUNC) &_dmplot_bb, 3},
    {"_dmplot_ema", (DL_FUNC) &_dmplot_ema, 3},
    {"_dmplot_fib", (DL_FUNC) &_dmplot_fib, 2},
    {"_dmplot_ichimoku_cloud", (DL_FUNC) &_dmplot_ichimoku_cloud, 6},
    {"_dmplot_ichimoku_cloud2", (DL_FUNC) &_dmplot_ichimoku_cloud2, 7},
    {"_dmplot_macd", (DL_FUNC) &_dmplot_macd, 5},
    {"_dmplot_mom", (DL_FUNC) &_dmplot_mom, 2},
    {"_dmplot_monte_carlo", (DL_FUNC) &_dmplot_monte_carlo, 4},
    {"_dmplot_roc", (DL_FUNC) &_dmplot_roc, 3},
    {"_dmplot_rsi", (DL_FUNC) &_dmplot_rsi, 3},
    {"_dmplot_sma", (DL_FUNC) &_dmplot_sma, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_dmplot(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
